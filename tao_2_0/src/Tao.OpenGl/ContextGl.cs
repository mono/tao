//
//  THIS FILE IS AUTOMATICALLY GENERATED
//  DO NOT EDIT BY HAND!!
//
//  See the Tao.OpenGl/gen directory in
//  the source distribution for more details.
// 
//  This file is part of Tao.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//  

using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Tao.OpenGl {

[CLSCompliantAttribute(true)]
public sealed class ContextGl {

    //
    // Functions
    //

    [DllImport("opengl32.dll", EntryPoint="glArrayElement"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glArrayElement (int i);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorPointer (int size, int type, int stride, bool [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorPointer (int size, int type, int stride, byte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorPointer (int size, int type, int stride, short [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorPointer (int size, int type, int stride, int [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorPointer (int size, int type, int stride, float [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorPointer (int size, int type, int stride, double [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorPointer (int size, int type, int stride, string pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorPointer (int size, int type, int stride, IntPtr pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ref sbyte pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, sbyte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, sbyte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, sbyte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ref ushort pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ushort [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ushort [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ushort [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ref uint pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, uint [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, uint [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, uint [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ref bool pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, bool [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, bool [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ref byte pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, byte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, byte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ref short pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, short [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, short [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ref int pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, int [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, int [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ref float pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, float [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, float [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, ref double pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, double [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorPointer (int size, int type, int stride, double [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glDisableClientState"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDisableClientState (int array);

    [DllImport("opengl32.dll", EntryPoint="glDrawArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawArrays (int mode, int first, int count);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawElements (int mode, int count, int type, bool [] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawElements (int mode, int count, int type, byte [] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawElements (int mode, int count, int type, short [] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawElements (int mode, int count, int type, int [] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawElements (int mode, int count, int type, float [] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawElements (int mode, int count, int type, double [] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawElements (int mode, int count, int type, string indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawElements (int mode, int count, int type, IntPtr indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ref sbyte indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, sbyte [] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, sbyte [,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, sbyte [,,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ref ushort indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ushort [] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ushort [,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ushort [,,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ref uint indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, uint [] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, uint [,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, uint [,,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ref bool indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, bool [,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, bool [,,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ref byte indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, byte [,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, byte [,,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ref short indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, short [,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, short [,,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ref int indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, int [,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, int [,,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ref float indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, float [,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, float [,,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, ref double indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, double [,] indices);

    [DllImport("opengl32.dll", EntryPoint="glDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawElements (int mode, int count, int type, double [,,] indices);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagPointer (int stride, bool [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagPointer (int stride, byte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagPointer (int stride, short [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagPointer (int stride, int [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagPointer (int stride, float [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagPointer (int stride, double [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagPointer (int stride, string pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagPointer (int stride, IntPtr pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ref sbyte pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, sbyte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, sbyte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, sbyte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ref ushort pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ushort [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ushort [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ushort [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ref uint pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, uint [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, uint [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, uint [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ref bool pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, bool [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, bool [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ref byte pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, byte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, byte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ref short pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, short [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, short [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ref int pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, int [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, int [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ref float pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, float [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, float [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, ref double pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, double [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagPointer (int stride, double [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glEnableClientState"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEnableClientState (int array);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPointerv (int pname, [Out] bool [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPointerv (int pname, [Out] byte [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPointerv (int pname, [Out] short [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPointerv (int pname, [Out] int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPointerv (int pname, [Out] float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPointerv (int pname, [Out] double [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPointerv (int pname, IntPtr arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, out bool arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, out byte arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, out short arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, out int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, out float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, out double arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, out sbyte arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, [Out] sbyte [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, out ushort arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, [Out] ushort [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, out uint arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPointerv (int pname, [Out] uint [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexPointer (int type, int stride, bool [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexPointer (int type, int stride, byte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexPointer (int type, int stride, short [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexPointer (int type, int stride, int [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexPointer (int type, int stride, float [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexPointer (int type, int stride, double [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexPointer (int type, int stride, string pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexPointer (int type, int stride, IntPtr pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ref sbyte pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, sbyte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, sbyte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, sbyte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ref ushort pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ushort [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ushort [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ushort [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ref uint pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, uint [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, uint [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, uint [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ref bool pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, bool [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, bool [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ref byte pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, byte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, byte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ref short pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, short [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, short [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ref int pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, int [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, int [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ref float pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, float [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, float [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, ref double pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, double [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glIndexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexPointer (int type, int stride, double [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glInterleavedArrays (int format, int stride, bool [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glInterleavedArrays (int format, int stride, byte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glInterleavedArrays (int format, int stride, short [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glInterleavedArrays (int format, int stride, int [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glInterleavedArrays (int format, int stride, float [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glInterleavedArrays (int format, int stride, double [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glInterleavedArrays (int format, int stride, string pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glInterleavedArrays (int format, int stride, IntPtr pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ref sbyte pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, sbyte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, sbyte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, sbyte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ref ushort pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ushort [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ushort [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ushort [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ref uint pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, uint [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, uint [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, uint [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ref bool pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, bool [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, bool [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ref byte pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, byte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, byte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ref short pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, short [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, short [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ref int pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, int [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, int [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ref float pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, float [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, float [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, ref double pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, double [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glInterleavedArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glInterleavedArrays (int format, int stride, double [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormalPointer (int type, int stride, bool [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormalPointer (int type, int stride, byte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormalPointer (int type, int stride, short [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormalPointer (int type, int stride, int [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormalPointer (int type, int stride, float [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormalPointer (int type, int stride, double [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormalPointer (int type, int stride, string pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormalPointer (int type, int stride, IntPtr pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ref sbyte pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, sbyte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, sbyte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, sbyte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ref ushort pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ushort [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ushort [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ushort [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ref uint pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, uint [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, uint [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, uint [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ref bool pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, bool [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, bool [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ref byte pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, byte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, byte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ref short pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, short [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, short [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ref int pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, int [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, int [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ref float pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, float [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, float [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, ref double pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, double [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glNormalPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormalPointer (int type, int stride, double [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoordPointer (int size, int type, int stride, bool [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoordPointer (int size, int type, int stride, byte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoordPointer (int size, int type, int stride, short [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoordPointer (int size, int type, int stride, int [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoordPointer (int size, int type, int stride, float [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoordPointer (int size, int type, int stride, double [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoordPointer (int size, int type, int stride, string pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoordPointer (int size, int type, int stride, IntPtr pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ref sbyte pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, sbyte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, sbyte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, sbyte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ref ushort pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ushort [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ushort [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ushort [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ref uint pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, uint [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, uint [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, uint [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ref bool pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, bool [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, bool [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ref byte pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, byte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, byte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ref short pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, short [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, short [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ref int pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, int [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, int [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ref float pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, float [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, float [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, ref double pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, double [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glTexCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexCoordPointer (int size, int type, int stride, double [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertexPointer (int size, int type, int stride, bool [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertexPointer (int size, int type, int stride, byte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertexPointer (int size, int type, int stride, short [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertexPointer (int size, int type, int stride, int [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertexPointer (int size, int type, int stride, float [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertexPointer (int size, int type, int stride, double [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertexPointer (int size, int type, int stride, string pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertexPointer (int size, int type, int stride, IntPtr pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ref sbyte pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, sbyte [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, sbyte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, sbyte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ref ushort pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ushort [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ushort [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ushort [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ref uint pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, uint [] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, uint [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, uint [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ref bool pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, bool [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, bool [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ref byte pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, byte [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, byte [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ref short pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, short [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, short [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ref int pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, int [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, int [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ref float pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, float [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, float [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, ref double pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, double [,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glVertexPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glVertexPointer (int size, int type, int stride, double [,,] pointer);

    [DllImport("opengl32.dll", EntryPoint="glPolygonOffset"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPolygonOffset (float factor, float units);

    [DllImport("opengl32.dll", EntryPoint="glCopyTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCopyTexImage1D (int target, int level, int internalformat, int x, int y, int width, int border);

    [DllImport("opengl32.dll", EntryPoint="glCopyTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border);

    [DllImport("opengl32.dll", EntryPoint="glCopyTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCopyTexSubImage1D (int target, int level, int xoffset, int x, int y, int width);

    [DllImport("opengl32.dll", EntryPoint="glCopyTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, bool [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, byte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, short [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, int [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, float [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, double [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, string pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, IntPtr pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ref sbyte pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, sbyte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, sbyte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, sbyte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ref ushort pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ushort [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ushort [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ushort [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ref uint pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, uint [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, uint [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, uint [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ref bool pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, bool [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, bool [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ref byte pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, byte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, byte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ref short pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, short [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, short [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ref int pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, int [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, int [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ref float pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, float [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, float [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, ref double pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, double [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage1D (int target, int level, int xoffset, int width, int format, int type, double [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, string pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref sbyte pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref ushort pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref uint pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref bool pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref byte pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref short pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref int pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref float pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref double pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glAreTexturesResident (int n, ref int textures, out int residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glAreTexturesResident (int n, int [] textures, out int residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, ref uint textures, out int residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, uint [] textures, out int residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glAreTexturesResident (int n, ref int textures, [Out] int [] residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glAreTexturesResident (int n, int [] textures, [Out] int [] residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, ref uint textures, [Out] int [] residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, uint [] textures, [Out] int [] residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, ref int textures, out bool residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, int [] textures, out bool residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, ref uint textures, out bool residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, uint [] textures, out bool residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, ref int textures, [Out] bool [] residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, int [] textures, [Out] bool [] residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, ref uint textures, [Out] bool [] residences);

    [DllImport("opengl32.dll", EntryPoint="glAreTexturesResident"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glAreTexturesResident (int n, uint [] textures, [Out] bool [] residences);

    [DllImport("opengl32.dll", EntryPoint="glBindTexture"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glBindTexture (int target, int texture);

    [DllImport("opengl32.dll", EntryPoint="glBindTexture"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glBindTexture (int target, uint texture);

    [DllImport("opengl32.dll", EntryPoint="glDeleteTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDeleteTextures (int n, ref int textures);

    [DllImport("opengl32.dll", EntryPoint="glDeleteTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDeleteTextures (int n, int [] textures);

    [DllImport("opengl32.dll", EntryPoint="glDeleteTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDeleteTextures (int n, ref uint textures);

    [DllImport("opengl32.dll", EntryPoint="glDeleteTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDeleteTextures (int n, uint [] textures);

    [DllImport("opengl32.dll", EntryPoint="glGenTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGenTextures (int n, out int textures);

    [DllImport("opengl32.dll", EntryPoint="glGenTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGenTextures (int n, [Out] int [] textures);

    [DllImport("opengl32.dll", EntryPoint="glGenTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGenTextures (int n, out uint textures);

    [DllImport("opengl32.dll", EntryPoint="glGenTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGenTextures (int n, [Out] uint [] textures);

    [DllImport("opengl32.dll", EntryPoint="glIsTexture"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glIsTexture (int texture);

    [DllImport("opengl32.dll", EntryPoint="glIsTexture"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glIsTexture (uint texture);

    [DllImport("opengl32.dll", EntryPoint="glPrioritizeTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPrioritizeTextures (int n, ref int textures, ref float priorities);

    [DllImport("opengl32.dll", EntryPoint="glPrioritizeTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPrioritizeTextures (int n, int [] textures, ref float priorities);

    [DllImport("opengl32.dll", EntryPoint="glPrioritizeTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPrioritizeTextures (int n, ref uint textures, ref float priorities);

    [DllImport("opengl32.dll", EntryPoint="glPrioritizeTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPrioritizeTextures (int n, uint [] textures, ref float priorities);

    [DllImport("opengl32.dll", EntryPoint="glPrioritizeTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPrioritizeTextures (int n, ref int textures, float [] priorities);

    [DllImport("opengl32.dll", EntryPoint="glPrioritizeTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPrioritizeTextures (int n, int [] textures, float [] priorities);

    [DllImport("opengl32.dll", EntryPoint="glPrioritizeTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPrioritizeTextures (int n, ref uint textures, float [] priorities);

    [DllImport("opengl32.dll", EntryPoint="glPrioritizeTextures"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPrioritizeTextures (int n, uint [] textures, float [] priorities);

    [DllImport("opengl32.dll", EntryPoint="glIndexub"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexub (byte c);

    [DllImport("opengl32.dll", EntryPoint="glIndexubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexubv (ref byte c);

    [DllImport("opengl32.dll", EntryPoint="glIndexubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexubv (byte [] c);

    [DllImport("opengl32.dll", EntryPoint="glPopClientAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPopClientAttrib ();

    [DllImport("opengl32.dll", EntryPoint="glPushClientAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPushClientAttrib (int mask);

    [DllImport("opengl32.dll", EntryPoint="glPushClientAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPushClientAttrib (uint mask);

    [DllImport("opengl32.dll", EntryPoint="glNewList"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNewList (int list, int mode);

    [DllImport("opengl32.dll", EntryPoint="glNewList"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNewList (uint list, int mode);

    [DllImport("opengl32.dll", EntryPoint="glEndList"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEndList ();

    [DllImport("opengl32.dll", EntryPoint="glCallList"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCallList (int list);

    [DllImport("opengl32.dll", EntryPoint="glCallList"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallList (uint list);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCallLists (int n, int type, bool [] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCallLists (int n, int type, byte [] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCallLists (int n, int type, short [] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCallLists (int n, int type, int [] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCallLists (int n, int type, float [] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCallLists (int n, int type, double [] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCallLists (int n, int type, string lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCallLists (int n, int type, IntPtr lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ref sbyte lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, sbyte [] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, sbyte [,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, sbyte [,,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ref ushort lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ushort [] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ushort [,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ushort [,,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ref uint lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, uint [] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, uint [,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, uint [,,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ref bool lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, bool [,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, bool [,,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ref byte lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, byte [,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, byte [,,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ref short lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, short [,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, short [,,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ref int lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, int [,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, int [,,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ref float lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, float [,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, float [,,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, ref double lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, double [,] lists);

    [DllImport("opengl32.dll", EntryPoint="glCallLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glCallLists (int n, int type, double [,,] lists);

    [DllImport("opengl32.dll", EntryPoint="glDeleteLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDeleteLists (int list, int range);

    [DllImport("opengl32.dll", EntryPoint="glDeleteLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDeleteLists (uint list, int range);

    [DllImport("opengl32.dll", EntryPoint="glGenLists"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glGenLists (int range);

    [DllImport("opengl32.dll", EntryPoint="glListBase"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glListBase (int arg_base);

    [DllImport("opengl32.dll", EntryPoint="glListBase"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glListBase (uint arg_base);

    [DllImport("opengl32.dll", EntryPoint="glBegin"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glBegin (int mode);

    [DllImport("opengl32.dll", EntryPoint="glBitmap"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glBitmap (int width, int height, float xorig, float yorig, float xmove, float ymove, ref byte bitmap);

    [DllImport("opengl32.dll", EntryPoint="glBitmap"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glBitmap (int width, int height, float xorig, float yorig, float xmove, float ymove, byte [] bitmap);

    [DllImport("opengl32.dll", EntryPoint="glColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3b (byte red, byte green, byte blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3b (sbyte red, byte green, byte blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3b (byte red, sbyte green, byte blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3b (sbyte red, sbyte green, byte blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3b (byte red, byte green, sbyte blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3b (sbyte red, byte green, sbyte blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3b (byte red, sbyte green, sbyte blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3b (sbyte red, sbyte green, sbyte blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3bv (ref byte v);

    [DllImport("opengl32.dll", EntryPoint="glColor3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3bv (byte [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3bv (ref sbyte v);

    [DllImport("opengl32.dll", EntryPoint="glColor3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3bv (sbyte [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3d (double red, double green, double blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glColor3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3f (float red, float green, float blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glColor3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3i (int red, int green, int blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glColor3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3s (short red, short green, short blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glColor3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3ub"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3ub (byte red, byte green, byte blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3ubv (ref byte v);

    [DllImport("opengl32.dll", EntryPoint="glColor3ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3ubv (byte [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3ui (int red, int green, int blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3ui (uint red, int green, int blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3ui (int red, uint green, int blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3ui (uint red, uint green, int blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3ui (int red, int green, uint blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3ui (uint red, int green, uint blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3ui (int red, uint green, uint blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3ui (uint red, uint green, uint blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3uiv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glColor3uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3uiv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3uiv (ref uint v);

    [DllImport("opengl32.dll", EntryPoint="glColor3uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3uiv (uint [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3us (short red, short green, short blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3us (ushort red, short green, short blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3us (short red, ushort green, short blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3us (ushort red, ushort green, short blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3us (short red, short green, ushort blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3us (ushort red, short green, ushort blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3us (short red, ushort green, ushort blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3us (ushort red, ushort green, ushort blue);

    [DllImport("opengl32.dll", EntryPoint="glColor3usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3usv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glColor3usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor3usv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor3usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3usv (ref ushort v);

    [DllImport("opengl32.dll", EntryPoint="glColor3usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor3usv (ushort [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4b (byte red, byte green, byte blue, byte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (sbyte red, byte green, byte blue, byte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (byte red, sbyte green, byte blue, byte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (sbyte red, sbyte green, byte blue, byte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (byte red, byte green, sbyte blue, byte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (sbyte red, byte green, sbyte blue, byte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (byte red, sbyte green, sbyte blue, byte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (sbyte red, sbyte green, sbyte blue, byte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (byte red, byte green, byte blue, sbyte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (sbyte red, byte green, byte blue, sbyte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (byte red, sbyte green, byte blue, sbyte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (sbyte red, sbyte green, byte blue, sbyte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (byte red, byte green, sbyte blue, sbyte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (sbyte red, byte green, sbyte blue, sbyte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (byte red, sbyte green, sbyte blue, sbyte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4b (sbyte red, sbyte green, sbyte blue, sbyte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4bv (ref byte v);

    [DllImport("opengl32.dll", EntryPoint="glColor4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4bv (byte [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4bv (ref sbyte v);

    [DllImport("opengl32.dll", EntryPoint="glColor4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4bv (sbyte [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4d (double red, double green, double blue, double alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glColor4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4f (float red, float green, float blue, float alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glColor4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4i (int red, int green, int blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glColor4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4s (short red, short green, short blue, short alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glColor4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4ub"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4ub (byte red, byte green, byte blue, byte alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4ubv (ref byte v);

    [DllImport("opengl32.dll", EntryPoint="glColor4ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4ubv (byte [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4ui (int red, int green, int blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (uint red, int green, int blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (int red, uint green, int blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (uint red, uint green, int blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (int red, int green, uint blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (uint red, int green, uint blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (int red, uint green, uint blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (uint red, uint green, uint blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (int red, int green, int blue, uint alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (uint red, int green, int blue, uint alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (int red, uint green, int blue, uint alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (uint red, uint green, int blue, uint alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (int red, int green, uint blue, uint alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (uint red, int green, uint blue, uint alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (int red, uint green, uint blue, uint alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4ui (uint red, uint green, uint blue, uint alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4uiv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glColor4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4uiv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4uiv (ref uint v);

    [DllImport("opengl32.dll", EntryPoint="glColor4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4uiv (uint [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4us (short red, short green, short blue, short alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (ushort red, short green, short blue, short alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (short red, ushort green, short blue, short alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (ushort red, ushort green, short blue, short alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (short red, short green, ushort blue, short alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (ushort red, short green, ushort blue, short alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (short red, ushort green, ushort blue, short alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (ushort red, ushort green, ushort blue, short alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (short red, short green, short blue, ushort alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (ushort red, short green, short blue, ushort alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (short red, ushort green, short blue, ushort alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (ushort red, ushort green, short blue, ushort alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (short red, short green, ushort blue, ushort alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (ushort red, short green, ushort blue, ushort alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (short red, ushort green, ushort blue, ushort alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4us (ushort red, ushort green, ushort blue, ushort alpha);

    [DllImport("opengl32.dll", EntryPoint="glColor4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4usv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glColor4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColor4usv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glColor4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4usv (ref ushort v);

    [DllImport("opengl32.dll", EntryPoint="glColor4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColor4usv (ushort [] v);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlag"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlag (int flag);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlag"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlag (bool flag);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagv (ref int flag);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEdgeFlagv (int [] flag);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagv (ref bool flag);

    [DllImport("opengl32.dll", EntryPoint="glEdgeFlagv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glEdgeFlagv (bool [] flag);

    [DllImport("opengl32.dll", EntryPoint="glEnd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEnd ();

    [DllImport("opengl32.dll", EntryPoint="glIndexd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexd (double c);

    [DllImport("opengl32.dll", EntryPoint="glIndexdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexdv (ref double c);

    [DllImport("opengl32.dll", EntryPoint="glIndexdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexdv (double [] c);

    [DllImport("opengl32.dll", EntryPoint="glIndexf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexf (float c);

    [DllImport("opengl32.dll", EntryPoint="glIndexfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexfv (ref float c);

    [DllImport("opengl32.dll", EntryPoint="glIndexfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexfv (float [] c);

    [DllImport("opengl32.dll", EntryPoint="glIndexi"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexi (int c);

    [DllImport("opengl32.dll", EntryPoint="glIndexiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexiv (ref int c);

    [DllImport("opengl32.dll", EntryPoint="glIndexiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexiv (int [] c);

    [DllImport("opengl32.dll", EntryPoint="glIndexs"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexs (short c);

    [DllImport("opengl32.dll", EntryPoint="glIndexsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexsv (ref short c);

    [DllImport("opengl32.dll", EntryPoint="glIndexsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexsv (short [] c);

    [DllImport("opengl32.dll", EntryPoint="glNormal3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3b (byte nx, byte ny, byte nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormal3b (sbyte nx, byte ny, byte nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormal3b (byte nx, sbyte ny, byte nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormal3b (sbyte nx, sbyte ny, byte nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormal3b (byte nx, byte ny, sbyte nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormal3b (sbyte nx, byte ny, sbyte nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormal3b (byte nx, sbyte ny, sbyte nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormal3b (sbyte nx, sbyte ny, sbyte nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3bv (ref byte v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3bv (byte [] v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormal3bv (ref sbyte v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glNormal3bv (sbyte [] v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3d (double nx, double ny, double nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3f (float nx, float ny, float nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3i (int nx, int ny, int nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3s (short nx, short ny, short nz);

    [DllImport("opengl32.dll", EntryPoint="glNormal3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glNormal3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glNormal3sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2d (double x, double y);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2f (float x, float y);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2i (int x, int y);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2s (short x, short y);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos2sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3d (double x, double y, double z);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3f (float x, float y, float z);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3i (int x, int y, int z);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3s (short x, short y, short z);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos3sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4d (double x, double y, double z, double w);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4f (float x, float y, float z, float w);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4i (int x, int y, int z, int w);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4s (short x, short y, short z, short w);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glRasterPos4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRasterPos4sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glRectd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectd (double x1, double y1, double x2, double y2);

    [DllImport("opengl32.dll", EntryPoint="glRectdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectdv (ref double v1, ref double v2);

    [DllImport("opengl32.dll", EntryPoint="glRectdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectdv (double [] v1, ref double v2);

    [DllImport("opengl32.dll", EntryPoint="glRectdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectdv (ref double v1, double [] v2);

    [DllImport("opengl32.dll", EntryPoint="glRectdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectdv (double [] v1, double [] v2);

    [DllImport("opengl32.dll", EntryPoint="glRectf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectf (float x1, float y1, float x2, float y2);

    [DllImport("opengl32.dll", EntryPoint="glRectfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectfv (ref float v1, ref float v2);

    [DllImport("opengl32.dll", EntryPoint="glRectfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectfv (float [] v1, ref float v2);

    [DllImport("opengl32.dll", EntryPoint="glRectfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectfv (ref float v1, float [] v2);

    [DllImport("opengl32.dll", EntryPoint="glRectfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectfv (float [] v1, float [] v2);

    [DllImport("opengl32.dll", EntryPoint="glRecti"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRecti (int x1, int y1, int x2, int y2);

    [DllImport("opengl32.dll", EntryPoint="glRectiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectiv (ref int v1, ref int v2);

    [DllImport("opengl32.dll", EntryPoint="glRectiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectiv (int [] v1, ref int v2);

    [DllImport("opengl32.dll", EntryPoint="glRectiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectiv (ref int v1, int [] v2);

    [DllImport("opengl32.dll", EntryPoint="glRectiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectiv (int [] v1, int [] v2);

    [DllImport("opengl32.dll", EntryPoint="glRects"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRects (short x1, short y1, short x2, short y2);

    [DllImport("opengl32.dll", EntryPoint="glRectsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectsv (ref short v1, ref short v2);

    [DllImport("opengl32.dll", EntryPoint="glRectsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectsv (short [] v1, ref short v2);

    [DllImport("opengl32.dll", EntryPoint="glRectsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectsv (ref short v1, short [] v2);

    [DllImport("opengl32.dll", EntryPoint="glRectsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRectsv (short [] v1, short [] v2);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1d (double s);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1f (float s);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1i (int s);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1s (short s);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord1sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord1sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2d (double s, double t);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2f (float s, float t);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2i (int s, int t);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2s (short s, short t);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord2sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3d (double s, double t, double r);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3f (float s, float t, float r);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3i (int s, int t, int r);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3s (short s, short t, short r);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord3sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4d (double s, double t, double r, double q);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4f (float s, float t, float r, float q);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4i (int s, int t, int r, int q);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4s (short s, short t, short r, short q);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glTexCoord4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexCoord4sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2d (double x, double y);

    [DllImport("opengl32.dll", EntryPoint="glVertex2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glVertex2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2f (float x, float y);

    [DllImport("opengl32.dll", EntryPoint="glVertex2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glVertex2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex2i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2i (int x, int y);

    [DllImport("opengl32.dll", EntryPoint="glVertex2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glVertex2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex2s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2s (short x, short y);

    [DllImport("opengl32.dll", EntryPoint="glVertex2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glVertex2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex2sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3d (double x, double y, double z);

    [DllImport("opengl32.dll", EntryPoint="glVertex3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glVertex3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3f (float x, float y, float z);

    [DllImport("opengl32.dll", EntryPoint="glVertex3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glVertex3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex3i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3i (int x, int y, int z);

    [DllImport("opengl32.dll", EntryPoint="glVertex3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glVertex3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3s (short x, short y, short z);

    [DllImport("opengl32.dll", EntryPoint="glVertex3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glVertex3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex3sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex4d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4d (double x, double y, double z, double w);

    [DllImport("opengl32.dll", EntryPoint="glVertex4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4dv (ref double v);

    [DllImport("opengl32.dll", EntryPoint="glVertex4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4dv (double [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex4f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4f (float x, float y, float z, float w);

    [DllImport("opengl32.dll", EntryPoint="glVertex4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4fv (ref float v);

    [DllImport("opengl32.dll", EntryPoint="glVertex4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4fv (float [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex4i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4i (int x, int y, int z, int w);

    [DllImport("opengl32.dll", EntryPoint="glVertex4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4iv (ref int v);

    [DllImport("opengl32.dll", EntryPoint="glVertex4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4iv (int [] v);

    [DllImport("opengl32.dll", EntryPoint="glVertex4s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4s (short x, short y, short z, short w);

    [DllImport("opengl32.dll", EntryPoint="glVertex4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4sv (ref short v);

    [DllImport("opengl32.dll", EntryPoint="glVertex4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glVertex4sv (short [] v);

    [DllImport("opengl32.dll", EntryPoint="glClipPlane"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glClipPlane (int plane, ref double equation);

    [DllImport("opengl32.dll", EntryPoint="glClipPlane"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glClipPlane (int plane, double [] equation);

    [DllImport("opengl32.dll", EntryPoint="glColorMaterial"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorMaterial (int face, int mode);

    [DllImport("opengl32.dll", EntryPoint="glCullFace"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCullFace (int mode);

    [DllImport("opengl32.dll", EntryPoint="glFogf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFogf (int pname, float param);

    [DllImport("opengl32.dll", EntryPoint="glFogfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFogfv (int pname, ref float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glFogfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFogfv (int pname, float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glFogi"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFogi (int pname, int param);

    [DllImport("opengl32.dll", EntryPoint="glFogiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFogiv (int pname, ref int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glFogiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFogiv (int pname, int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glFrontFace"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFrontFace (int mode);

    [DllImport("opengl32.dll", EntryPoint="glHint"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glHint (int target, int mode);

    [DllImport("opengl32.dll", EntryPoint="glLightf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightf (int light, int pname, float param);

    [DllImport("opengl32.dll", EntryPoint="glLightfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightfv (int light, int pname, ref float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glLightfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightfv (int light, int pname, float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glLighti"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLighti (int light, int pname, int param);

    [DllImport("opengl32.dll", EntryPoint="glLightiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightiv (int light, int pname, ref int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glLightiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightiv (int light, int pname, int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glLightModelf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightModelf (int pname, float param);

    [DllImport("opengl32.dll", EntryPoint="glLightModelfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightModelfv (int pname, ref float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glLightModelfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightModelfv (int pname, float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glLightModeli"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightModeli (int pname, int param);

    [DllImport("opengl32.dll", EntryPoint="glLightModeliv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightModeliv (int pname, ref int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glLightModeliv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLightModeliv (int pname, int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glLineStipple"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLineStipple (int factor, short pattern);

    [DllImport("opengl32.dll", EntryPoint="glLineStipple"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glLineStipple (int factor, ushort pattern);

    [DllImport("opengl32.dll", EntryPoint="glLineWidth"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLineWidth (float width);

    [DllImport("opengl32.dll", EntryPoint="glMaterialf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMaterialf (int face, int pname, float param);

    [DllImport("opengl32.dll", EntryPoint="glMaterialfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMaterialfv (int face, int pname, ref float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glMaterialfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMaterialfv (int face, int pname, float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glMateriali"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMateriali (int face, int pname, int param);

    [DllImport("opengl32.dll", EntryPoint="glMaterialiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMaterialiv (int face, int pname, ref int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glMaterialiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMaterialiv (int face, int pname, int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glPointSize"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPointSize (float size);

    [DllImport("opengl32.dll", EntryPoint="glPolygonMode"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPolygonMode (int face, int mode);

    [DllImport("opengl32.dll", EntryPoint="glPolygonStipple"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPolygonStipple (ref byte mask);

    [DllImport("opengl32.dll", EntryPoint="glPolygonStipple"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPolygonStipple (byte [] mask);

    [DllImport("opengl32.dll", EntryPoint="glScissor"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glScissor (int x, int y, int width, int height);

    [DllImport("opengl32.dll", EntryPoint="glShadeModel"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glShadeModel (int mode);

    [DllImport("opengl32.dll", EntryPoint="glTexParameterf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexParameterf (int target, int pname, float param);

    [DllImport("opengl32.dll", EntryPoint="glTexParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexParameterfv (int target, int pname, ref float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexParameterfv (int target, int pname, float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexParameteri"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexParameteri (int target, int pname, int param);

    [DllImport("opengl32.dll", EntryPoint="glTexParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexParameteriv (int target, int pname, ref int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexParameteriv (int target, int pname, int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, bool [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, byte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, short [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, int [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, float [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, double [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, string pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, IntPtr pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ref sbyte pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, sbyte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, sbyte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, sbyte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ref ushort pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ushort [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ushort [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ushort [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ref uint pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, uint [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, uint [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, uint [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ref bool pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, bool [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, bool [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ref byte pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, byte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, byte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ref short pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, short [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, short [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ref int pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, int [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, int [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ref float pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, float [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, float [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, ref double pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, double [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage1D (int target, int level, int internalformat, int width, int border, int format, int type, double [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, bool [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, byte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, short [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, int [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, float [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, double [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, string pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, IntPtr pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ref sbyte pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, sbyte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, sbyte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, sbyte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ref ushort pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ushort [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ushort [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ushort [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ref uint pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, uint [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, uint [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, uint [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ref bool pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, bool [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, bool [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ref byte pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, byte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, byte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ref short pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, short [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, short [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ref int pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, int [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, int [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ref float pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, float [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, float [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, ref double pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, double [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glTexImage2D (int target, int level, int internalformat, int width, int height, int border, int format, int type, double [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glTexEnvf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexEnvf (int target, int pname, float param);

    [DllImport("opengl32.dll", EntryPoint="glTexEnvfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexEnvfv (int target, int pname, ref float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexEnvfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexEnvfv (int target, int pname, float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexEnvi"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexEnvi (int target, int pname, int param);

    [DllImport("opengl32.dll", EntryPoint="glTexEnviv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexEnviv (int target, int pname, ref int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexEnviv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexEnviv (int target, int pname, int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexGend"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexGend (int coord, int pname, double param);

    [DllImport("opengl32.dll", EntryPoint="glTexGendv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexGendv (int coord, int pname, ref double arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexGendv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexGendv (int coord, int pname, double [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexGenf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexGenf (int coord, int pname, float param);

    [DllImport("opengl32.dll", EntryPoint="glTexGenfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexGenfv (int coord, int pname, ref float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexGenfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexGenfv (int coord, int pname, float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexGeni"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexGeni (int coord, int pname, int param);

    [DllImport("opengl32.dll", EntryPoint="glTexGeniv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexGeniv (int coord, int pname, ref int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glTexGeniv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTexGeniv (int coord, int pname, int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glFeedbackBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFeedbackBuffer (int size, int type, out float buffer);

    [DllImport("opengl32.dll", EntryPoint="glFeedbackBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFeedbackBuffer (int size, int type, [Out] float [] buffer);

    [DllImport("opengl32.dll", EntryPoint="glSelectBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glSelectBuffer (int size, out int buffer);

    [DllImport("opengl32.dll", EntryPoint="glSelectBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glSelectBuffer (int size, [Out] int [] buffer);

    [DllImport("opengl32.dll", EntryPoint="glSelectBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glSelectBuffer (int size, out uint buffer);

    [DllImport("opengl32.dll", EntryPoint="glSelectBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glSelectBuffer (int size, [Out] uint [] buffer);

    [DllImport("opengl32.dll", EntryPoint="glRenderMode"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glRenderMode (int mode);

    [DllImport("opengl32.dll", EntryPoint="glInitNames"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glInitNames ();

    [DllImport("opengl32.dll", EntryPoint="glLoadName"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLoadName (int name);

    [DllImport("opengl32.dll", EntryPoint="glLoadName"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glLoadName (uint name);

    [DllImport("opengl32.dll", EntryPoint="glPassThrough"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPassThrough (float token);

    [DllImport("opengl32.dll", EntryPoint="glPopName"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPopName ();

    [DllImport("opengl32.dll", EntryPoint="glPushName"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPushName (int name);

    [DllImport("opengl32.dll", EntryPoint="glPushName"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPushName (uint name);

    [DllImport("opengl32.dll", EntryPoint="glDrawBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawBuffer (int mode);

    [DllImport("opengl32.dll", EntryPoint="glClear"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glClear (int mask);

    [DllImport("opengl32.dll", EntryPoint="glClear"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glClear (uint mask);

    [DllImport("opengl32.dll", EntryPoint="glClearAccum"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glClearAccum (float red, float green, float blue, float alpha);

    [DllImport("opengl32.dll", EntryPoint="glClearIndex"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glClearIndex (float c);

    [DllImport("opengl32.dll", EntryPoint="glClearColor"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glClearColor (float red, float green, float blue, float alpha);

    [DllImport("opengl32.dll", EntryPoint="glClearStencil"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glClearStencil (int s);

    [DllImport("opengl32.dll", EntryPoint="glClearDepth"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glClearDepth (double depth);

    [DllImport("opengl32.dll", EntryPoint="glStencilMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glStencilMask (int mask);

    [DllImport("opengl32.dll", EntryPoint="glStencilMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glStencilMask (uint mask);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glColorMask (int red, int green, int blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (bool red, int green, int blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (int red, bool green, int blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (bool red, bool green, int blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (int red, int green, bool blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (bool red, int green, bool blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (int red, bool green, bool blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (bool red, bool green, bool blue, int alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (int red, int green, int blue, bool alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (bool red, int green, int blue, bool alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (int red, bool green, int blue, bool alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (bool red, bool green, int blue, bool alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (int red, int green, bool blue, bool alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (bool red, int green, bool blue, bool alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (int red, bool green, bool blue, bool alpha);

    [DllImport("opengl32.dll", EntryPoint="glColorMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glColorMask (bool red, bool green, bool blue, bool alpha);

    [DllImport("opengl32.dll", EntryPoint="glDepthMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDepthMask (int flag);

    [DllImport("opengl32.dll", EntryPoint="glDepthMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDepthMask (bool flag);

    [DllImport("opengl32.dll", EntryPoint="glIndexMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glIndexMask (int mask);

    [DllImport("opengl32.dll", EntryPoint="glIndexMask"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glIndexMask (uint mask);

    [DllImport("opengl32.dll", EntryPoint="glAccum"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glAccum (int op, float value);

    [DllImport("opengl32.dll", EntryPoint="glDisable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDisable (int cap);

    [DllImport("opengl32.dll", EntryPoint="glEnable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEnable (int cap);

    [DllImport("opengl32.dll", EntryPoint="glFinish"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFinish ();

    [DllImport("opengl32.dll", EntryPoint="glFlush"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFlush ();

    [DllImport("opengl32.dll", EntryPoint="glPopAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPopAttrib ();

    [DllImport("opengl32.dll", EntryPoint="glPushAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPushAttrib (int mask);

    [DllImport("opengl32.dll", EntryPoint="glPushAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPushAttrib (uint mask);

    [DllImport("opengl32.dll", EntryPoint="glMap1d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMap1d (int target, double u1, double u2, int stride, int order, ref double points);

    [DllImport("opengl32.dll", EntryPoint="glMap1d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMap1d (int target, double u1, double u2, int stride, int order, double [] points);

    [DllImport("opengl32.dll", EntryPoint="glMap1f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMap1f (int target, float u1, float u2, int stride, int order, ref float points);

    [DllImport("opengl32.dll", EntryPoint="glMap1f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMap1f (int target, float u1, float u2, int stride, int order, float [] points);

    [DllImport("opengl32.dll", EntryPoint="glMap2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMap2d (int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points);

    [DllImport("opengl32.dll", EntryPoint="glMap2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMap2d (int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double [] points);

    [DllImport("opengl32.dll", EntryPoint="glMap2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMap2f (int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points);

    [DllImport("opengl32.dll", EntryPoint="glMap2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMap2f (int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float [] points);

    [DllImport("opengl32.dll", EntryPoint="glMapGrid1d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMapGrid1d (int un, double u1, double u2);

    [DllImport("opengl32.dll", EntryPoint="glMapGrid1f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMapGrid1f (int un, float u1, float u2);

    [DllImport("opengl32.dll", EntryPoint="glMapGrid2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMapGrid2d (int un, double u1, double u2, int vn, double v1, double v2);

    [DllImport("opengl32.dll", EntryPoint="glMapGrid2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMapGrid2f (int un, float u1, float u2, int vn, float v1, float v2);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord1d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord1d (double u);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord1dv (ref double u);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord1dv (double [] u);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord1f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord1f (float u);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord1fv (ref float u);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord1fv (float [] u);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord2d (double u, double v);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord2dv (ref double u);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord2dv (double [] u);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord2f (float u, float v);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord2fv (ref float u);

    [DllImport("opengl32.dll", EntryPoint="glEvalCoord2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalCoord2fv (float [] u);

    [DllImport("opengl32.dll", EntryPoint="glEvalMesh1"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalMesh1 (int mode, int i1, int i2);

    [DllImport("opengl32.dll", EntryPoint="glEvalPoint1"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalPoint1 (int i);

    [DllImport("opengl32.dll", EntryPoint="glEvalMesh2"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalMesh2 (int mode, int i1, int i2, int j1, int j2);

    [DllImport("opengl32.dll", EntryPoint="glEvalPoint2"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glEvalPoint2 (int i, int j);

    [DllImport("opengl32.dll", EntryPoint="glAlphaFunc"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glAlphaFunc (int func, float arg_ref);

    [DllImport("opengl32.dll", EntryPoint="glBlendFunc"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glBlendFunc (int sfactor, int dfactor);

    [DllImport("opengl32.dll", EntryPoint="glLogicOp"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLogicOp (int opcode);

    [DllImport("opengl32.dll", EntryPoint="glStencilFunc"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glStencilFunc (int func, int arg_ref, int mask);

    [DllImport("opengl32.dll", EntryPoint="glStencilFunc"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glStencilFunc (int func, int arg_ref, uint mask);

    [DllImport("opengl32.dll", EntryPoint="glStencilOp"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glStencilOp (int fail, int zfail, int zpass);

    [DllImport("opengl32.dll", EntryPoint="glDepthFunc"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDepthFunc (int func);

    [DllImport("opengl32.dll", EntryPoint="glPixelZoom"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelZoom (float xfactor, float yfactor);

    [DllImport("opengl32.dll", EntryPoint="glPixelTransferf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelTransferf (int pname, float param);

    [DllImport("opengl32.dll", EntryPoint="glPixelTransferi"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelTransferi (int pname, int param);

    [DllImport("opengl32.dll", EntryPoint="glPixelStoref"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelStoref (int pname, float param);

    [DllImport("opengl32.dll", EntryPoint="glPixelStorei"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelStorei (int pname, int param);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelMapfv (int map, int mapsize, ref float values);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelMapfv (int map, int mapsize, float [] values);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelMapuiv (int map, int mapsize, ref int values);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelMapuiv (int map, int mapsize, int [] values);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPixelMapuiv (int map, int mapsize, ref uint values);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPixelMapuiv (int map, int mapsize, uint [] values);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelMapusv (int map, int mapsize, ref short values);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPixelMapusv (int map, int mapsize, short [] values);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPixelMapusv (int map, int mapsize, ref ushort values);

    [DllImport("opengl32.dll", EntryPoint="glPixelMapusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glPixelMapusv (int map, int mapsize, ushort [] values);

    [DllImport("opengl32.dll", EntryPoint="glReadBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glReadBuffer (int mode);

    [DllImport("opengl32.dll", EntryPoint="glCopyPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glCopyPixels (int x, int y, int width, int height, int type);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, [Out] bool [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, [Out] byte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, [Out] short [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, [Out] int [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, [Out] float [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, [Out] double [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, IntPtr pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, out bool pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, out byte pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, out short pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, out int pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, out float pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, out double pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, out sbyte pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, [Out] sbyte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, out ushort pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, [Out] ushort [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, out uint pixels);

    [DllImport("opengl32.dll", EntryPoint="glReadPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glReadPixels (int x, int y, int width, int height, int format, int type, [Out] uint [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawPixels (int width, int height, int format, int type, bool [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawPixels (int width, int height, int format, int type, byte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawPixels (int width, int height, int format, int type, short [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawPixels (int width, int height, int format, int type, int [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawPixels (int width, int height, int format, int type, float [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawPixels (int width, int height, int format, int type, double [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawPixels (int width, int height, int format, int type, string pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDrawPixels (int width, int height, int format, int type, IntPtr pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ref sbyte pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, sbyte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, sbyte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, sbyte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ref ushort pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ushort [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ushort [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ushort [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ref uint pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, uint [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, uint [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, uint [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ref bool pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, bool [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, bool [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ref byte pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, byte [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, byte [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ref short pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, short [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, short [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ref int pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, int [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, int [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ref float pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, float [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, float [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, ref double pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, double [,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glDrawPixels"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glDrawPixels (int width, int height, int format, int type, double [,,] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetBooleanv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetBooleanv (int pname, out int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetBooleanv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetBooleanv (int pname, [Out] int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetBooleanv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetBooleanv (int pname, out bool arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetBooleanv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetBooleanv (int pname, [Out] bool [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetClipPlane"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetClipPlane (int plane, out double equation);

    [DllImport("opengl32.dll", EntryPoint="glGetClipPlane"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetClipPlane (int plane, [Out] double [] equation);

    [DllImport("opengl32.dll", EntryPoint="glGetDoublev"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetDoublev (int pname, out double arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetDoublev"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetDoublev (int pname, [Out] double [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetError"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glGetError ();

    [DllImport("opengl32.dll", EntryPoint="glGetFloatv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetFloatv (int pname, out float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetFloatv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetFloatv (int pname, [Out] float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetIntegerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetIntegerv (int pname, out int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetIntegerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetIntegerv (int pname, [Out] int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetLightfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetLightfv (int light, int pname, out float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetLightfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetLightfv (int light, int pname, [Out] float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetLightiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetLightiv (int light, int pname, out int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetLightiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetLightiv (int light, int pname, [Out] int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetMapdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMapdv (int target, int query, out double v);

    [DllImport("opengl32.dll", EntryPoint="glGetMapdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMapdv (int target, int query, [Out] double [] v);

    [DllImport("opengl32.dll", EntryPoint="glGetMapfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMapfv (int target, int query, out float v);

    [DllImport("opengl32.dll", EntryPoint="glGetMapfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMapfv (int target, int query, [Out] float [] v);

    [DllImport("opengl32.dll", EntryPoint="glGetMapiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMapiv (int target, int query, out int v);

    [DllImport("opengl32.dll", EntryPoint="glGetMapiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMapiv (int target, int query, [Out] int [] v);

    [DllImport("opengl32.dll", EntryPoint="glGetMaterialfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMaterialfv (int face, int pname, out float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetMaterialfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMaterialfv (int face, int pname, [Out] float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetMaterialiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMaterialiv (int face, int pname, out int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetMaterialiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetMaterialiv (int face, int pname, [Out] int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPixelMapfv (int map, out float values);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPixelMapfv (int map, [Out] float [] values);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPixelMapuiv (int map, out int values);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPixelMapuiv (int map, [Out] int [] values);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPixelMapuiv (int map, out uint values);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPixelMapuiv (int map, [Out] uint [] values);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPixelMapusv (int map, out short values);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPixelMapusv (int map, [Out] short [] values);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPixelMapusv (int map, out ushort values);

    [DllImport("opengl32.dll", EntryPoint="glGetPixelMapusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetPixelMapusv (int map, [Out] ushort [] values);

    [DllImport("opengl32.dll", EntryPoint="glGetPolygonStipple"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPolygonStipple (out byte mask);

    [DllImport("opengl32.dll", EntryPoint="glGetPolygonStipple"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetPolygonStipple ([Out] byte [] mask);

    [DllImport("opengl32.dll", EntryPoint="glGetString"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern IntPtr glGetString (int name);

    [DllImport("opengl32.dll", EntryPoint="glGetTexEnvfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexEnvfv (int target, int pname, out float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexEnvfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexEnvfv (int target, int pname, [Out] float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexEnviv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexEnviv (int target, int pname, out int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexEnviv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexEnviv (int target, int pname, [Out] int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexGendv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexGendv (int coord, int pname, out double arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexGendv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexGendv (int coord, int pname, [Out] double [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexGenfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexGenfv (int coord, int pname, out float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexGenfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexGenfv (int coord, int pname, [Out] float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexGeniv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexGeniv (int coord, int pname, out int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexGeniv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexGeniv (int coord, int pname, [Out] int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexImage (int target, int level, int format, int type, [Out] bool [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexImage (int target, int level, int format, int type, [Out] byte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexImage (int target, int level, int format, int type, [Out] short [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexImage (int target, int level, int format, int type, [Out] int [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexImage (int target, int level, int format, int type, [Out] float [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexImage (int target, int level, int format, int type, [Out] double [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexImage (int target, int level, int format, int type, IntPtr pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, out bool pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, out byte pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, out short pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, out int pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, out float pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, out double pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, out sbyte pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, [Out] sbyte [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, out ushort pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, [Out] ushort [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, out uint pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern void glGetTexImage (int target, int level, int format, int type, [Out] uint [] pixels);

    [DllImport("opengl32.dll", EntryPoint="glGetTexParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexParameterfv (int target, int pname, out float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexParameterfv (int target, int pname, [Out] float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexParameteriv (int target, int pname, out int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexParameteriv (int target, int pname, [Out] int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexLevelParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexLevelParameterfv (int target, int level, int pname, out float arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexLevelParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexLevelParameterfv (int target, int level, int pname, [Out] float [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexLevelParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexLevelParameteriv (int target, int level, int pname, out int arg_params);

    [DllImport("opengl32.dll", EntryPoint="glGetTexLevelParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glGetTexLevelParameteriv (int target, int level, int pname, [Out] int [] arg_params);

    [DllImport("opengl32.dll", EntryPoint="glIsEnabled"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glIsEnabled (int cap);

    [DllImport("opengl32.dll", EntryPoint="glIsList"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern int glIsList (int list);

    [DllImport("opengl32.dll", EntryPoint="glIsList"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public static extern int glIsList (uint list);

    [DllImport("opengl32.dll", EntryPoint="glDepthRange"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glDepthRange (double near, double far);

    [DllImport("opengl32.dll", EntryPoint="glFrustum"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glFrustum (double left, double right, double bottom, double top, double zNear, double zFar);

    [DllImport("opengl32.dll", EntryPoint="glLoadIdentity"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLoadIdentity ();

    [DllImport("opengl32.dll", EntryPoint="glLoadMatrixf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLoadMatrixf (ref float m);

    [DllImport("opengl32.dll", EntryPoint="glLoadMatrixf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLoadMatrixf (float [] m);

    [DllImport("opengl32.dll", EntryPoint="glLoadMatrixd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLoadMatrixd (ref double m);

    [DllImport("opengl32.dll", EntryPoint="glLoadMatrixd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glLoadMatrixd (double [] m);

    [DllImport("opengl32.dll", EntryPoint="glMatrixMode"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMatrixMode (int mode);

    [DllImport("opengl32.dll", EntryPoint="glMultMatrixf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMultMatrixf (ref float m);

    [DllImport("opengl32.dll", EntryPoint="glMultMatrixf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMultMatrixf (float [] m);

    [DllImport("opengl32.dll", EntryPoint="glMultMatrixd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMultMatrixd (ref double m);

    [DllImport("opengl32.dll", EntryPoint="glMultMatrixd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glMultMatrixd (double [] m);

    [DllImport("opengl32.dll", EntryPoint="glOrtho"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glOrtho (double left, double right, double bottom, double top, double zNear, double zFar);

    [DllImport("opengl32.dll", EntryPoint="glPopMatrix"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPopMatrix ();

    [DllImport("opengl32.dll", EntryPoint="glPushMatrix"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glPushMatrix ();

    [DllImport("opengl32.dll", EntryPoint="glRotated"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRotated (double angle, double x, double y, double z);

    [DllImport("opengl32.dll", EntryPoint="glRotatef"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glRotatef (float angle, float x, float y, float z);

    [DllImport("opengl32.dll", EntryPoint="glScaled"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glScaled (double x, double y, double z);

    [DllImport("opengl32.dll", EntryPoint="glScalef"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glScalef (float x, float y, float z);

    [DllImport("opengl32.dll", EntryPoint="glTranslated"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTranslated (double x, double y, double z);

    [DllImport("opengl32.dll", EntryPoint="glTranslatef"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glTranslatef (float x, float y, float z);

    [DllImport("opengl32.dll", EntryPoint="glViewport"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public static extern void glViewport (int x, int y, int width, int height);

    [OpenGLExtensionImport("GL_3DFX_tbuffer", "glTbufferMask3DFX")]
    public  IntPtr ext__GL_3DFX_tbuffer__glTbufferMask3DFX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_3DFX_tbuffer", "glTbufferMask3DFX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTbufferMask3DFX (int mask) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_3DFX_tbuffer", "glTbufferMask3DFX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTbufferMask3DFX (uint mask) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE")]
    public  IntPtr ext__GL_APPLE_element_array__glElementPointerAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerAPPLE (int type, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerAPPLE (int type, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerAPPLE (int type, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerAPPLE (int type, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerAPPLE (int type, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerAPPLE (int type, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerAPPLE (int type, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerAPPLE (int type, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glElementPointerAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerAPPLE (int type, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawElementArrayAPPLE")]
    public  IntPtr ext__GL_APPLE_element_array__glDrawElementArrayAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawElementArrayAPPLE (int mode, int first, int count) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE")]
    public  IntPtr ext__GL_APPLE_element_array__glDrawRangeElementArrayAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementArrayAPPLE (int mode, int start, int end, int first, int count) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementArrayAPPLE (int mode, uint start, int end, int first, int count) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementArrayAPPLE (int mode, int start, uint end, int first, int count) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementArrayAPPLE (int mode, uint start, uint end, int first, int count) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE")]
    public  IntPtr ext__GL_APPLE_element_array__glMultiDrawElementArrayAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementArrayAPPLE (int mode, ref int first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementArrayAPPLE (int mode, int [] first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementArrayAPPLE (int mode, ref int first, int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementArrayAPPLE (int mode, int [] first, int [] count, int primcount) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE")]
    public  IntPtr ext__GL_APPLE_element_array__glMultiDrawRangeElementArrayAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, int start, int end, ref int first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, uint start, int end, ref int first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, int start, uint end, ref int first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, uint start, uint end, ref int first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, int start, int end, int [] first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, uint start, int end, int [] first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, int start, uint end, int [] first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, uint start, uint end, int [] first, ref int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, int start, int end, ref int first, int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, uint start, int end, ref int first, int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, int start, uint end, ref int first, int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, uint start, uint end, ref int first, int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, int start, int end, int [] first, int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, uint start, int end, int [] first, int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, int start, uint end, int [] first, int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_element_array", "glMultiDrawRangeElementArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawRangeElementArrayAPPLE (int mode, uint start, uint end, int [] first, int [] count, int primcount) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE")]
    public  IntPtr ext__GL_APPLE_fence__glGenFencesAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenFencesAPPLE (int n, out int fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenFencesAPPLE (int n, [Out] int [] fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenFencesAPPLE (int n, out uint fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glGenFencesAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenFencesAPPLE (int n, [Out] uint [] fences) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE")]
    public  IntPtr ext__GL_APPLE_fence__glDeleteFencesAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteFencesAPPLE (int n, ref int fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteFencesAPPLE (int n, int [] fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteFencesAPPLE (int n, ref uint fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glDeleteFencesAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteFencesAPPLE (int n, uint [] fences) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_fence", "glSetFenceAPPLE")]
    public  IntPtr ext__GL_APPLE_fence__glSetFenceAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_fence", "glSetFenceAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetFenceAPPLE (int fence) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glSetFenceAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetFenceAPPLE (uint fence) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_fence", "glIsFenceAPPLE")]
    public  IntPtr ext__GL_APPLE_fence__glIsFenceAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_fence", "glIsFenceAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsFenceAPPLE (int fence) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glIsFenceAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsFenceAPPLE (uint fence) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_fence", "glTestFenceAPPLE")]
    public  IntPtr ext__GL_APPLE_fence__glTestFenceAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_fence", "glTestFenceAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glTestFenceAPPLE (int fence) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glTestFenceAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glTestFenceAPPLE (uint fence) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_fence", "glFinishFenceAPPLE")]
    public  IntPtr ext__GL_APPLE_fence__glFinishFenceAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_fence", "glFinishFenceAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFinishFenceAPPLE (int fence) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glFinishFenceAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFinishFenceAPPLE (uint fence) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_fence", "glTestObjectAPPLE")]
    public  IntPtr ext__GL_APPLE_fence__glTestObjectAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_fence", "glTestObjectAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glTestObjectAPPLE (int arg_object, int name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_fence", "glTestObjectAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glTestObjectAPPLE (int arg_object, uint name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_fence", "glFinishObjectAPPLE")]
    public  IntPtr ext__GL_APPLE_fence__glFinishObjectAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_fence", "glFinishObjectAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFinishObjectAPPLE (int arg_object, int name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glBindVertexArrayAPPLE")]
    public  IntPtr ext__GL_APPLE_vertex_array_object__glBindVertexArrayAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glBindVertexArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindVertexArrayAPPLE (int array) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glBindVertexArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindVertexArrayAPPLE (uint array) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE")]
    public  IntPtr ext__GL_APPLE_vertex_array_object__glDeleteVertexArraysAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteVertexArraysAPPLE (int n, ref int arrays) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteVertexArraysAPPLE (int n, int [] arrays) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteVertexArraysAPPLE (int n, ref uint arrays) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glDeleteVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteVertexArraysAPPLE (int n, uint [] arrays) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE")]
    public  IntPtr ext__GL_APPLE_vertex_array_object__glGenVertexArraysAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenVertexArraysAPPLE (int n, ref int arrays) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenVertexArraysAPPLE (int n, int [] arrays) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenVertexArraysAPPLE (int n, ref uint arrays) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glGenVertexArraysAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenVertexArraysAPPLE (int n, uint [] arrays) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glIsVertexArrayAPPLE")]
    public  IntPtr ext__GL_APPLE_vertex_array_object__glIsVertexArrayAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glIsVertexArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsVertexArrayAPPLE (int array) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_object", "glIsVertexArrayAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsVertexArrayAPPLE (uint array) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE")]
    public  IntPtr ext__GL_APPLE_vertex_array_range__glVertexArrayRangeAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeAPPLE (int length, [Out] bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeAPPLE (int length, [Out] byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeAPPLE (int length, [Out] short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeAPPLE (int length, [Out] int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeAPPLE (int length, [Out] float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeAPPLE (int length, [Out] double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeAPPLE (int length, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, out bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, out byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, out short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, out int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, out float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, out double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, out sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, [Out] sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, out ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, [Out] ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, out uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeAPPLE (int length, [Out] uint [] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE")]
    public  IntPtr ext__GL_APPLE_vertex_array_range__glFlushVertexArrayRangeAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushVertexArrayRangeAPPLE (int length, [Out] bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushVertexArrayRangeAPPLE (int length, [Out] byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushVertexArrayRangeAPPLE (int length, [Out] short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushVertexArrayRangeAPPLE (int length, [Out] int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushVertexArrayRangeAPPLE (int length, [Out] float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushVertexArrayRangeAPPLE (int length, [Out] double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushVertexArrayRangeAPPLE (int length, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, out bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, out byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, out short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, out int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, out float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, out double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, out sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, [Out] sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, out ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, [Out] ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, out uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glFlushVertexArrayRangeAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFlushVertexArrayRangeAPPLE (int length, [Out] uint [] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayParameteriAPPLE")]
    public  IntPtr ext__GL_APPLE_vertex_array_range__glVertexArrayParameteriAPPLE = IntPtr.Zero;

    [OpenGLExtensionImport("GL_APPLE_vertex_array_range", "glVertexArrayParameteriAPPLE"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayParameteriAPPLE (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_color_buffer_float", "glClampColorARB")]
    public  IntPtr ext__GL_ARB_color_buffer_float__glClampColorARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_color_buffer_float", "glClampColorARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glClampColorARB (int target, int clamp) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_draw_buffers", "glDrawBuffersARB")]
    public  IntPtr ext__GL_ARB_draw_buffers__glDrawBuffersARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_draw_buffers", "glDrawBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawBuffersARB (int n, ref int bufs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_draw_buffers", "glDrawBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawBuffersARB (int n, int [] bufs) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glCurrentPaletteMatrixARB")]
    public  IntPtr ext__GL_ARB_matrix_palette__glCurrentPaletteMatrixARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glCurrentPaletteMatrixARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCurrentPaletteMatrixARB (int index) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexubvARB")]
    public  IntPtr ext__GL_ARB_matrix_palette__glMatrixIndexubvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexubvARB (int size, ref byte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexubvARB (int size, byte [] indices) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB")]
    public  IntPtr ext__GL_ARB_matrix_palette__glMatrixIndexusvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexusvARB (int size, ref short indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexusvARB (int size, short [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexusvARB (int size, ref ushort indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexusvARB (int size, ushort [] indices) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB")]
    public  IntPtr ext__GL_ARB_matrix_palette__glMatrixIndexuivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexuivARB (int size, ref int indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexuivARB (int size, int [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexuivARB (int size, ref uint indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexuivARB (int size, uint [] indices) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB")]
    public  IntPtr ext__GL_ARB_matrix_palette__glMatrixIndexPointerARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_matrix_palette", "glMatrixIndexPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMatrixIndexPointerARB (int size, int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multisample", "glSampleCoverageARB")]
    public  IntPtr ext__GL_ARB_multisample__glSampleCoverageARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multisample", "glSampleCoverageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSampleCoverageARB (float value, int invert) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multisample", "glSampleCoverageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSampleCoverageARB (float value, bool invert) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glActiveTextureARB")]
    public  IntPtr ext__GL_ARB_multitexture__glActiveTextureARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glActiveTextureARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glActiveTextureARB (int texture) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glClientActiveTextureARB")]
    public  IntPtr ext__GL_ARB_multitexture__glClientActiveTextureARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glClientActiveTextureARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glClientActiveTextureARB (int texture) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1dARB (int target, double s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dvARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1dvARB (int target, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1dvARB (int target, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1fARB (int target, float s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fvARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1fvARB (int target, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1fvARB (int target, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1iARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1iARB (int target, int s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1ivARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1ivARB (int target, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1ivARB (int target, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1sARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1sARB (int target, short s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1svARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord1svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1svARB (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord1svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1svARB (int target, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2dARB (int target, double s, double t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dvARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2dvARB (int target, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2dvARB (int target, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2fARB (int target, float s, float t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fvARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2fvARB (int target, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2fvARB (int target, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2iARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2iARB (int target, int s, int t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2ivARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2ivARB (int target, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2ivARB (int target, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2sARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2sARB (int target, short s, short t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2svARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord2svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2svARB (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord2svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2svARB (int target, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3dARB (int target, double s, double t, double r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dvARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3dvARB (int target, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3dvARB (int target, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3fARB (int target, float s, float t, float r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fvARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3fvARB (int target, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3fvARB (int target, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3iARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3iARB (int target, int s, int t, int r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3ivARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3ivARB (int target, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3ivARB (int target, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3sARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3sARB (int target, short s, short t, short r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3svARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord3svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3svARB (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord3svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3svARB (int target, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4dARB (int target, double s, double t, double r, double q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dvARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4dvARB (int target, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4dvARB (int target, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4fARB (int target, float s, float t, float r, float q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fvARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4fvARB (int target, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4fvARB (int target, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4iARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4iARB (int target, int s, int t, int r, int q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4ivARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4ivARB (int target, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4ivARB (int target, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4sARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4sARB (int target, short s, short t, short r, short q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4svARB")]
    public  IntPtr ext__GL_ARB_multitexture__glMultiTexCoord4svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4svARB (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_multitexture", "glMultiTexCoord4svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4svARB (int target, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB")]
    public  IntPtr ext__GL_ARB_occlusion_query__glGenQueriesARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenQueriesARB (int n, out int ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenQueriesARB (int n, [Out] int [] ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenQueriesARB (int n, out uint ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGenQueriesARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenQueriesARB (int n, [Out] uint [] ids) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB")]
    public  IntPtr ext__GL_ARB_occlusion_query__glDeleteQueriesARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteQueriesARB (int n, ref int ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteQueriesARB (int n, int [] ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteQueriesARB (int n, ref uint ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glDeleteQueriesARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteQueriesARB (int n, uint [] ids) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glIsQueryARB")]
    public  IntPtr ext__GL_ARB_occlusion_query__glIsQueryARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glIsQueryARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsQueryARB (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glIsQueryARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsQueryARB (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glBeginQueryARB")]
    public  IntPtr ext__GL_ARB_occlusion_query__glBeginQueryARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glBeginQueryARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBeginQueryARB (int target, int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glBeginQueryARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBeginQueryARB (int target, uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glEndQueryARB")]
    public  IntPtr ext__GL_ARB_occlusion_query__glEndQueryARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glEndQueryARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEndQueryARB (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryivARB")]
    public  IntPtr ext__GL_ARB_occlusion_query__glGetQueryivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryivARB (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryivARB (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB")]
    public  IntPtr ext__GL_ARB_occlusion_query__glGetQueryObjectivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryObjectivARB (int id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectivARB (uint id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryObjectivARB (int id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectivARB (uint id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB")]
    public  IntPtr ext__GL_ARB_occlusion_query__glGetQueryObjectuivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryObjectuivARB (int id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuivARB (uint id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryObjectuivARB (int id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuivARB (uint id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuivARB (int id, int pname, out uint arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuivARB (uint id, int pname, out uint arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuivARB (int id, int pname, [Out] uint [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_occlusion_query", "glGetQueryObjectuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuivARB (uint id, int pname, [Out] uint [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfARB")]
    public  IntPtr ext__GL_ARB_point_parameters__glPointParameterfARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfARB (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfvARB")]
    public  IntPtr ext__GL_ARB_point_parameters__glPointParameterfvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfvARB (int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_point_parameters", "glPointParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfvARB (int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glDeleteObjectARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glDeleteObjectARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glDeleteObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteObjectARB (int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glDeleteObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteObjectARB (uint obj) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetHandleARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetHandleARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetHandleARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGetHandleARB (int pname) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glDetachObjectARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDetachObjectARB (int containerObj, int attachedObj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDetachObjectARB (uint containerObj, int attachedObj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDetachObjectARB (int containerObj, uint attachedObj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glDetachObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDetachObjectARB (uint containerObj, uint attachedObj) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glCreateShaderObjectARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glCreateShaderObjectARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glCreateShaderObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glCreateShaderObjectARB (int shaderType) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glShaderSourceARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderSourceARB (int shaderObj, int count, ref string arg_string, ref int length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderSourceARB (uint shaderObj, int count, ref string arg_string, ref int length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderSourceARB (int shaderObj, int count, string [] arg_string, ref int length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderSourceARB (uint shaderObj, int count, string [] arg_string, ref int length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderSourceARB (int shaderObj, int count, ref string arg_string, int [] length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderSourceARB (uint shaderObj, int count, ref string arg_string, int [] length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderSourceARB (int shaderObj, int count, string [] arg_string, int [] length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderSourceARB (uint shaderObj, int count, string [] arg_string, int [] length) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glCompileShaderARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glCompileShaderARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glCompileShaderARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompileShaderARB (int shaderObj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glCompileShaderARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompileShaderARB (uint shaderObj) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glCreateProgramObjectARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glCreateProgramObjectARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glCreateProgramObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glCreateProgramObjectARB () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glAttachObjectARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glAttachObjectARB (int containerObj, int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glAttachObjectARB (uint containerObj, int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glAttachObjectARB (int containerObj, uint obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glAttachObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glAttachObjectARB (uint containerObj, uint obj) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glLinkProgramARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glLinkProgramARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glLinkProgramARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLinkProgramARB (int programObj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glLinkProgramARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glLinkProgramARB (uint programObj) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUseProgramObjectARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUseProgramObjectARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUseProgramObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUseProgramObjectARB (int programObj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUseProgramObjectARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUseProgramObjectARB (uint programObj) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glValidateProgramARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glValidateProgramARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glValidateProgramARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glValidateProgramARB (int programObj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glValidateProgramARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glValidateProgramARB (uint programObj) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform1fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1fARB (int location, float v0) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform2fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2fARB (int location, float v0, float v1) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform3fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3fARB (int location, float v0, float v1, float v2) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform4fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4fARB (int location, float v0, float v1, float v2, float v3) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1iARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform1iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1iARB (int location, int v0) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2iARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform2iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2iARB (int location, int v0, int v1) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3iARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform3iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3iARB (int location, int v0, int v1, int v2) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4iARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform4iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4iARB (int location, int v0, int v1, int v2, int v3) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fvARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform1fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1fvARB (int location, int count, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1fvARB (int location, int count, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fvARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform2fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2fvARB (int location, int count, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2fvARB (int location, int count, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fvARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform3fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3fvARB (int location, int count, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3fvARB (int location, int count, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fvARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform4fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4fvARB (int location, int count, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4fvARB (int location, int count, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1ivARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform1ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1ivARB (int location, int count, ref int value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform1ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1ivARB (int location, int count, int [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2ivARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform2ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2ivARB (int location, int count, ref int value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform2ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2ivARB (int location, int count, int [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3ivARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform3ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3ivARB (int location, int count, ref int value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform3ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3ivARB (int location, int count, int [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4ivARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniform4ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4ivARB (int location, int count, ref int value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniform4ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4ivARB (int location, int count, int [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniformMatrix2fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix2fvARB (int location, int count, int transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix2fvARB (int location, int count, bool transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix2fvARB (int location, int count, int transpose, float [] value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix2fvARB (int location, int count, bool transpose, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniformMatrix3fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix3fvARB (int location, int count, int transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix3fvARB (int location, int count, bool transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix3fvARB (int location, int count, int transpose, float [] value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix3fvARB (int location, int count, bool transpose, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glUniformMatrix4fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix4fvARB (int location, int count, int transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix4fvARB (int location, int count, bool transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix4fvARB (int location, int count, int transpose, float [] value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glUniformMatrix4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix4fvARB (int location, int count, bool transpose, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetObjectParameterfvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetObjectParameterfvARB (int obj, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetObjectParameterfvARB (uint obj, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetObjectParameterfvARB (int obj, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetObjectParameterfvARB (uint obj, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetObjectParameterivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetObjectParameterivARB (int obj, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetObjectParameterivARB (uint obj, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetObjectParameterivARB (int obj, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetObjectParameterivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetObjectParameterivARB (uint obj, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetInfoLogARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetInfoLogARB (int obj, int maxLength, out int length, IntPtr infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInfoLogARB (uint obj, int maxLength, out int length, IntPtr infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetInfoLogARB (int obj, int maxLength, [Out] int [] length, IntPtr infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetInfoLogARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInfoLogARB (uint obj, int maxLength, [Out] int [] length, IntPtr infoLog) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetAttachedObjectsARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetAttachedObjectsARB (int containerObj, int maxCount, out int count, out int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (uint containerObj, int maxCount, out int count, out int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetAttachedObjectsARB (int containerObj, int maxCount, [Out] int [] count, out int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (uint containerObj, int maxCount, [Out] int [] count, out int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetAttachedObjectsARB (int containerObj, int maxCount, out int count, [Out] int [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (uint containerObj, int maxCount, out int count, [Out] int [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetAttachedObjectsARB (int containerObj, int maxCount, [Out] int [] count, [Out] int [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (uint containerObj, int maxCount, [Out] int [] count, [Out] int [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (int containerObj, int maxCount, out int count, out uint obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (uint containerObj, int maxCount, out int count, out uint obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (int containerObj, int maxCount, [Out] int [] count, out uint obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (uint containerObj, int maxCount, [Out] int [] count, out uint obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (int containerObj, int maxCount, out int count, [Out] uint [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (uint containerObj, int maxCount, out int count, [Out] uint [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (int containerObj, int maxCount, [Out] int [] count, [Out] uint [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetAttachedObjectsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedObjectsARB (uint containerObj, int maxCount, [Out] int [] count, [Out] uint [] obj) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformLocationARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetUniformLocationARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformLocationARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGetUniformLocationARB (int programObj, string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformLocationARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glGetUniformLocationARB (uint programObj, string name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetActiveUniformARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniformARB (int programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (int programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniformARB (int programObj, int index, int maxLength, [Out] int [] length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, int index, int maxLength, [Out] int [] length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (int programObj, uint index, int maxLength, [Out] int [] length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, uint index, int maxLength, [Out] int [] length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniformARB (int programObj, int index, int maxLength, out int length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, int index, int maxLength, out int length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (int programObj, uint index, int maxLength, out int length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, uint index, int maxLength, out int length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniformARB (int programObj, int index, int maxLength, [Out] int [] length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, int index, int maxLength, [Out] int [] length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (int programObj, uint index, int maxLength, [Out] int [] length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, uint index, int maxLength, [Out] int [] length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniformARB (int programObj, int index, int maxLength, out int length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, int index, int maxLength, out int length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (int programObj, uint index, int maxLength, out int length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, uint index, int maxLength, out int length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniformARB (int programObj, int index, int maxLength, [Out] int [] length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, int index, int maxLength, [Out] int [] length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (int programObj, uint index, int maxLength, [Out] int [] length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, uint index, int maxLength, [Out] int [] length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniformARB (int programObj, int index, int maxLength, out int length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, int index, int maxLength, out int length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (int programObj, uint index, int maxLength, out int length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, uint index, int maxLength, out int length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniformARB (int programObj, int index, int maxLength, [Out] int [] length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, int index, int maxLength, [Out] int [] length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (int programObj, uint index, int maxLength, [Out] int [] length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetActiveUniformARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniformARB (uint programObj, uint index, int maxLength, [Out] int [] length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetUniformfvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetUniformfvARB (int programObj, int location, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetUniformfvARB (uint programObj, int location, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetUniformfvARB (int programObj, int location, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetUniformfvARB (uint programObj, int location, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetUniformivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetUniformivARB (int programObj, int location, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetUniformivARB (uint programObj, int location, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetUniformivARB (int programObj, int location, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetUniformivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetUniformivARB (uint programObj, int location, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB")]
    public  IntPtr ext__GL_ARB_shader_objects__glGetShaderSourceARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderSourceARB (int obj, int maxLength, out int length, System.Text.StringBuilder source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderSourceARB (uint obj, int maxLength, out int length, System.Text.StringBuilder source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderSourceARB (int obj, int maxLength, [Out] int [] length, System.Text.StringBuilder source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_shader_objects", "glGetShaderSourceARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderSourceARB (uint obj, int maxLength, [Out] int [] length, System.Text.StringBuilder source) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB")]
    public  IntPtr ext__GL_ARB_texture_compression__glCompressedTexImage3DARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3DARB (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB")]
    public  IntPtr ext__GL_ARB_texture_compression__glCompressedTexImage2DARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2DARB (int target, int level, int internalformat, int width, int height, int border, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB")]
    public  IntPtr ext__GL_ARB_texture_compression__glCompressedTexImage1DARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1DARB (int target, int level, int internalformat, int width, int border, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB")]
    public  IntPtr ext__GL_ARB_texture_compression__glCompressedTexSubImage3DARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage3DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3DARB (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB")]
    public  IntPtr ext__GL_ARB_texture_compression__glCompressedTexSubImage2DARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage2DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2DARB (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB")]
    public  IntPtr ext__GL_ARB_texture_compression__glCompressedTexSubImage1DARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glCompressedTexSubImage1DARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1DARB (int target, int level, int xoffset, int width, int format, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB")]
    public  IntPtr ext__GL_ARB_texture_compression__glGetCompressedTexImageARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImageARB (int target, int level, [Out] bool [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImageARB (int target, int level, [Out] byte [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImageARB (int target, int level, [Out] short [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImageARB (int target, int level, [Out] int [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImageARB (int target, int level, [Out] float [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImageARB (int target, int level, [Out] double [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImageARB (int target, int level, IntPtr img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, out bool img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, out byte img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, out short img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, out int img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, out float img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, out double img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, out sbyte img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, [Out] sbyte [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, out ushort img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, [Out] ushort [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, out uint img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_texture_compression", "glGetCompressedTexImageARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImageARB (int target, int level, [Out] uint [] img) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixfARB")]
    public  IntPtr ext__GL_ARB_transpose_matrix__glLoadTransposeMatrixfARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixfARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadTransposeMatrixfARB (ref float m) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixfARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadTransposeMatrixfARB (float [] m) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixdARB")]
    public  IntPtr ext__GL_ARB_transpose_matrix__glLoadTransposeMatrixdARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixdARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadTransposeMatrixdARB (ref double m) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glLoadTransposeMatrixdARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadTransposeMatrixdARB (double [] m) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixfARB")]
    public  IntPtr ext__GL_ARB_transpose_matrix__glMultTransposeMatrixfARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixfARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultTransposeMatrixfARB (ref float m) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixfARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultTransposeMatrixfARB (float [] m) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixdARB")]
    public  IntPtr ext__GL_ARB_transpose_matrix__glMultTransposeMatrixdARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixdARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultTransposeMatrixdARB (ref double m) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_transpose_matrix", "glMultTransposeMatrixdARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultTransposeMatrixdARB (double [] m) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glWeightbvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightbvARB (int size, ref byte weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightbvARB (int size, byte [] weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightbvARB (int size, ref sbyte weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightbvARB (int size, sbyte [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightsvARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glWeightsvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightsvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightsvARB (int size, ref short weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightsvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightsvARB (int size, short [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightivARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glWeightivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightivARB (int size, ref int weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightivARB (int size, int [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightfvARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glWeightfvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightfvARB (int size, ref float weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightfvARB (int size, float [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightdvARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glWeightdvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightdvARB (int size, ref double weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightdvARB (int size, double [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightubvARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glWeightubvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightubvARB (int size, ref byte weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightubvARB (int size, byte [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glWeightusvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightusvARB (int size, ref short weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightusvARB (int size, short [] weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightusvARB (int size, ref ushort weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightusvARB (int size, ushort [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glWeightuivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightuivARB (int size, ref int weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightuivARB (int size, int [] weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightuivARB (int size, ref uint weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightuivARB (int size, uint [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glWeightPointerARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightPointerARB (int size, int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightPointerARB (int size, int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightPointerARB (int size, int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightPointerARB (int size, int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightPointerARB (int size, int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightPointerARB (int size, int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightPointerARB (int size, int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWeightPointerARB (int size, int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glWeightPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWeightPointerARB (int size, int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glVertexBlendARB")]
    public  IntPtr ext__GL_ARB_vertex_blend__glVertexBlendARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_blend", "glVertexBlendARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexBlendARB (int count) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBindBufferARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glBindBufferARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBindBufferARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindBufferARB (int target, int buffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBindBufferARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindBufferARB (int target, uint buffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glDeleteBuffersARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteBuffersARB (int n, ref int buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteBuffersARB (int n, int [] buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteBuffersARB (int n, ref uint buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glDeleteBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteBuffersARB (int n, uint [] buffers) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glGenBuffersARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenBuffersARB (int n, out int buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenBuffersARB (int n, [Out] int [] buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenBuffersARB (int n, out uint buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGenBuffersARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenBuffersARB (int n, [Out] uint [] buffers) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glIsBufferARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glIsBufferARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glIsBufferARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsBufferARB (int buffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glIsBufferARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsBufferARB (uint buffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glBufferDataARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferDataARB (int target, int size, bool [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferDataARB (int target, int size, byte [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferDataARB (int target, int size, short [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferDataARB (int target, int size, int [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferDataARB (int target, int size, float [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferDataARB (int target, int size, double [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferDataARB (int target, int size, string data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferDataARB (int target, int size, IntPtr data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ref sbyte data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, sbyte [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, sbyte [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, sbyte [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ref ushort data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ushort [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ushort [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ushort [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ref uint data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, uint [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, uint [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, uint [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ref bool data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, bool [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, bool [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ref byte data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, byte [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, byte [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ref short data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, short [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, short [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ref int data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, int [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, int [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ref float data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, float [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, float [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, ref double data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, double [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferDataARB (int target, int size, double [,,] data, int usage) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glBufferSubDataARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubDataARB (int target, int offset, int size, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubDataARB (int target, int offset, int size, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubDataARB (int target, int offset, int size, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubDataARB (int target, int offset, int size, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubDataARB (int target, int offset, int size, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubDataARB (int target, int offset, int size, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubDataARB (int target, int offset, int size, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubDataARB (int target, int offset, int size, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubDataARB (int target, int offset, int size, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glGetBufferSubDataARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, [Out] bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, [Out] byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, [Out] short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, [Out] float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, [Out] double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, out byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, out short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, out double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, out sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, [Out] sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, out ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, [Out] ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, out uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferSubDataARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubDataARB (int target, int offset, int size, [Out] uint [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glMapBufferARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glMapBufferARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glMapBufferARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  IntPtr glMapBufferARB (int target, int access) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glUnmapBufferARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glUnmapBufferARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glUnmapBufferARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glUnmapBufferARB (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferParameterivARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glGetBufferParameterivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferParameterivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferParameterivARB (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferParameterivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferParameterivARB (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB")]
    public  IntPtr ext__GL_ARB_vertex_buffer_object__glGetBufferPointervARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointervARB (int target, int pname, [Out] bool [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointervARB (int target, int pname, [Out] byte [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointervARB (int target, int pname, [Out] short [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointervARB (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointervARB (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointervARB (int target, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointervARB (int target, int pname, IntPtr arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, out bool arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, out byte arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, out short arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, out sbyte arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, [Out] sbyte [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, out ushort arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, [Out] ushort [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, out uint arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_buffer_object", "glGetBufferPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointervARB (int target, int pname, [Out] uint [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1dARB (int index, double x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1dARB (uint index, double x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1dvARB (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1dvARB (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1dvARB (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1dvARB (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1fARB (int index, float x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1fARB (uint index, float x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1fvARB (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1fvARB (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1fvARB (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1fvARB (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1sARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1sARB (int index, short x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1sARB (uint index, short x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib1svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1svARB (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1svARB (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1svARB (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib1svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1svARB (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2dARB (int index, double x, double y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2dARB (uint index, double x, double y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2dvARB (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2dvARB (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2dvARB (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2dvARB (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2fARB (int index, float x, float y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2fARB (uint index, float x, float y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2fvARB (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2fvARB (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2fvARB (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2fvARB (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2sARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2sARB (int index, short x, short y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2sARB (uint index, short x, short y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib2svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2svARB (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2svARB (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2svARB (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib2svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2svARB (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3dARB (int index, double x, double y, double z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3dARB (uint index, double x, double y, double z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3dvARB (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3dvARB (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3dvARB (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3dvARB (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3fARB (int index, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3fARB (uint index, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3fvARB (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3fvARB (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3fvARB (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3fvARB (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3sARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3sARB (int index, short x, short y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3sARB (uint index, short x, short y, short z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib3svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3svARB (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3svARB (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3svARB (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib3svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3svARB (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NbvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NbvARB (int index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NbvARB (uint index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NbvARB (int index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NbvARB (uint index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NbvARB (int index, ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NbvARB (uint index, ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NbvARB (int index, sbyte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NbvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NbvARB (uint index, sbyte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NivARB (int index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NivARB (uint index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NivARB (int index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NivARB (uint index, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NsvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NsvARB (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NsvARB (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NsvARB (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NsvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NsvARB (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NubARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NubARB (int index, byte x, byte y, byte z, byte w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NubARB (uint index, byte x, byte y, byte z, byte w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NubvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NubvARB (int index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NubvARB (uint index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NubvARB (int index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NubvARB (uint index, byte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NuivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NuivARB (int index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NuivARB (uint index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NuivARB (int index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NuivARB (uint index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NuivARB (int index, ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NuivARB (uint index, ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NuivARB (int index, uint [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NuivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NuivARB (uint index, uint [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4NusvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NusvARB (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NusvARB (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4NusvARB (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NusvARB (uint index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NusvARB (int index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NusvARB (uint index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NusvARB (int index, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4NusvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4NusvARB (uint index, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4bvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4bvARB (int index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bvARB (uint index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4bvARB (int index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bvARB (uint index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bvARB (int index, ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bvARB (uint index, ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bvARB (int index, sbyte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4bvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bvARB (uint index, sbyte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4dARB (int index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4dARB (uint index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4dvARB (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4dvARB (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4dvARB (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4dvARB (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4fARB (int index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4fARB (uint index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4fvARB (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4fvARB (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4fvARB (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4fvARB (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4ivARB (int index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4ivARB (uint index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4ivARB (int index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4ivARB (uint index, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4sARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4sARB (int index, short x, short y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4sARB (uint index, short x, short y, short z, short w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4svARB (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4svARB (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4svARB (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4svARB (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4ubvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4ubvARB (int index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4ubvARB (uint index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4ubvARB (int index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4ubvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4ubvARB (uint index, byte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4uivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4uivARB (int index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uivARB (uint index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4uivARB (int index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uivARB (uint index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uivARB (int index, ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uivARB (uint index, ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uivARB (int index, uint [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4uivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uivARB (uint index, uint [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttrib4usvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4usvARB (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usvARB (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4usvARB (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usvARB (uint index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usvARB (int index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usvARB (uint index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usvARB (int index, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttrib4usvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usvARB (uint index, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glVertexAttribPointerARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, int normalized, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, int normalized, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (int index, int size, int type, bool normalized, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glVertexAttribPointerARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerARB (uint index, int size, int type, bool normalized, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glEnableVertexAttribArrayARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glEnableVertexAttribArrayARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glEnableVertexAttribArrayARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEnableVertexAttribArrayARB (int index) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glEnableVertexAttribArrayARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glEnableVertexAttribArrayARB (uint index) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glDisableVertexAttribArrayARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glDisableVertexAttribArrayARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glDisableVertexAttribArrayARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDisableVertexAttribArrayARB (int index) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glDisableVertexAttribArrayARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDisableVertexAttribArrayARB (uint index) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glProgramStringARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramStringARB (int target, int format, int len, bool [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramStringARB (int target, int format, int len, byte [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramStringARB (int target, int format, int len, short [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramStringARB (int target, int format, int len, int [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramStringARB (int target, int format, int len, float [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramStringARB (int target, int format, int len, double [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramStringARB (int target, int format, int len, string arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramStringARB (int target, int format, int len, IntPtr arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ref sbyte arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, sbyte [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, sbyte [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, sbyte [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ref ushort arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ushort [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ushort [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ushort [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ref uint arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, uint [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, uint [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, uint [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ref bool arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, bool [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, bool [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ref byte arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, byte [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, byte [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ref short arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, short [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, short [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ref int arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, int [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, int [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ref float arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, float [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, float [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, ref double arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, double [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramStringARB (int target, int format, int len, double [,,] arg_string) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glBindProgramARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glBindProgramARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glBindProgramARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindProgramARB (int target, int program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glBindProgramARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindProgramARB (int target, uint program) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glDeleteProgramsARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteProgramsARB (int n, ref int programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteProgramsARB (int n, int [] programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteProgramsARB (int n, ref uint programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glDeleteProgramsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteProgramsARB (int n, uint [] programs) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGenProgramsARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenProgramsARB (int n, out int programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenProgramsARB (int n, [Out] int [] programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenProgramsARB (int n, out uint programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGenProgramsARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenProgramsARB (int n, [Out] uint [] programs) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glProgramEnvParameter4dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramEnvParameter4dARB (int target, int index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramEnvParameter4dARB (int target, uint index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glProgramEnvParameter4dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramEnvParameter4dvARB (int target, int index, ref double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramEnvParameter4dvARB (int target, uint index, ref double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramEnvParameter4dvARB (int target, int index, double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramEnvParameter4dvARB (int target, uint index, double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glProgramEnvParameter4fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramEnvParameter4fARB (int target, int index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramEnvParameter4fARB (int target, uint index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glProgramEnvParameter4fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramEnvParameter4fvARB (int target, int index, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramEnvParameter4fvARB (int target, uint index, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramEnvParameter4fvARB (int target, int index, float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramEnvParameter4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramEnvParameter4fvARB (int target, uint index, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glProgramLocalParameter4dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramLocalParameter4dARB (int target, int index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramLocalParameter4dARB (int target, uint index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glProgramLocalParameter4dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramLocalParameter4dvARB (int target, int index, ref double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramLocalParameter4dvARB (int target, uint index, ref double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramLocalParameter4dvARB (int target, int index, double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramLocalParameter4dvARB (int target, uint index, double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glProgramLocalParameter4fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramLocalParameter4fARB (int target, int index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramLocalParameter4fARB (int target, uint index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glProgramLocalParameter4fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramLocalParameter4fvARB (int target, int index, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramLocalParameter4fvARB (int target, uint index, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramLocalParameter4fvARB (int target, int index, float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glProgramLocalParameter4fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramLocalParameter4fvARB (int target, uint index, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetProgramEnvParameterdvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramEnvParameterdvARB (int target, int index, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramEnvParameterdvARB (int target, uint index, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramEnvParameterdvARB (int target, int index, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramEnvParameterdvARB (int target, uint index, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetProgramEnvParameterfvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramEnvParameterfvARB (int target, int index, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramEnvParameterfvARB (int target, uint index, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramEnvParameterfvARB (int target, int index, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramEnvParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramEnvParameterfvARB (int target, uint index, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetProgramLocalParameterdvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramLocalParameterdvARB (int target, int index, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramLocalParameterdvARB (int target, uint index, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramLocalParameterdvARB (int target, int index, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramLocalParameterdvARB (int target, uint index, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetProgramLocalParameterfvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramLocalParameterfvARB (int target, int index, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramLocalParameterfvARB (int target, uint index, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramLocalParameterfvARB (int target, int index, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramLocalParameterfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramLocalParameterfvARB (int target, uint index, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramivARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetProgramivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramivARB (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramivARB (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetProgramStringARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramStringARB (int target, int pname, [Out] bool [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramStringARB (int target, int pname, [Out] byte [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramStringARB (int target, int pname, [Out] short [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramStringARB (int target, int pname, [Out] int [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramStringARB (int target, int pname, [Out] float [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramStringARB (int target, int pname, [Out] double [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramStringARB (int target, int pname, IntPtr arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, out bool arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, out byte arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, out short arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, out int arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, out float arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, out double arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, out sbyte arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, [Out] sbyte [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, out ushort arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, [Out] ushort [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, out uint arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetProgramStringARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringARB (int target, int pname, [Out] uint [] arg_string) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetVertexAttribdvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribdvARB (int index, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribdvARB (uint index, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribdvARB (int index, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribdvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribdvARB (uint index, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetVertexAttribfvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribfvARB (int index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribfvARB (uint index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribfvARB (int index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribfvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribfvARB (uint index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetVertexAttribivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribivARB (int index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribivARB (uint index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribivARB (int index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribivARB (uint index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glGetVertexAttribPointervARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervARB (int index, int pname, [Out] bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, [Out] bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervARB (int index, int pname, [Out] byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, [Out] byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervARB (int index, int pname, [Out] short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, [Out] short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervARB (int index, int pname, [Out] int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, [Out] int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervARB (int index, int pname, [Out] float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, [Out] float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervARB (int index, int pname, [Out] double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, [Out] double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervARB (int index, int pname, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, out bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, out bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, out byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, out byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, out short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, out short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, out int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, out int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, out float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, out float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, out double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, out double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, out sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, out sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, [Out] sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, [Out] sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, out ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, out ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, [Out] ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, [Out] ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, out uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, out uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (int index, int pname, [Out] uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glGetVertexAttribPointervARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervARB (uint index, int pname, [Out] uint [] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glIsProgramARB")]
    public  IntPtr ext__GL_ARB_vertex_program__glIsProgramARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_program", "glIsProgramARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsProgramARB (int program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_program", "glIsProgramARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsProgramARB (uint program) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB")]
    public  IntPtr ext__GL_ARB_vertex_shader__glBindAttribLocationARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindAttribLocationARB (int programObj, int index, string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindAttribLocationARB (uint programObj, int index, string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindAttribLocationARB (int programObj, uint index, string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glBindAttribLocationARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindAttribLocationARB (uint programObj, uint index, string name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB")]
    public  IntPtr ext__GL_ARB_vertex_shader__glGetActiveAttribARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttribARB (int programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, int index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (int programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, uint index, int maxLength, out int length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttribARB (int programObj, int index, int maxLength, [Out] int [] length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, int index, int maxLength, [Out] int [] length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (int programObj, uint index, int maxLength, [Out] int [] length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, uint index, int maxLength, [Out] int [] length, out int size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttribARB (int programObj, int index, int maxLength, out int length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, int index, int maxLength, out int length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (int programObj, uint index, int maxLength, out int length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, uint index, int maxLength, out int length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttribARB (int programObj, int index, int maxLength, [Out] int [] length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, int index, int maxLength, [Out] int [] length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (int programObj, uint index, int maxLength, [Out] int [] length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, uint index, int maxLength, [Out] int [] length, [Out] int [] size, out int type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttribARB (int programObj, int index, int maxLength, out int length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, int index, int maxLength, out int length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (int programObj, uint index, int maxLength, out int length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, uint index, int maxLength, out int length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttribARB (int programObj, int index, int maxLength, [Out] int [] length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, int index, int maxLength, [Out] int [] length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (int programObj, uint index, int maxLength, [Out] int [] length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, uint index, int maxLength, [Out] int [] length, out int size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttribARB (int programObj, int index, int maxLength, out int length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, int index, int maxLength, out int length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (int programObj, uint index, int maxLength, out int length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, uint index, int maxLength, out int length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttribARB (int programObj, int index, int maxLength, [Out] int [] length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, int index, int maxLength, [Out] int [] length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (int programObj, uint index, int maxLength, [Out] int [] length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetActiveAttribARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttribARB (uint programObj, uint index, int maxLength, [Out] int [] length, [Out] int [] size, [Out] int [] type, System.Text.StringBuilder name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetAttribLocationARB")]
    public  IntPtr ext__GL_ARB_vertex_shader__glGetAttribLocationARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetAttribLocationARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGetAttribLocationARB (int programObj, string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_vertex_shader", "glGetAttribLocationARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glGetAttribLocationARB (uint programObj, string name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos2dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2dARB (double x, double y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dvARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos2dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2dvARB (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2dvARB (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos2fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2fARB (float x, float y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fvARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos2fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2fvARB (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2fvARB (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2iARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos2iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2iARB (int x, int y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2ivARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos2ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2ivARB (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2ivARB (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2sARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos2sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2sARB (short x, short y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2svARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos2svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2svARB (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos2svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2svARB (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos3dARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3dARB (double x, double y, double z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dvARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos3dvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3dvARB (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3dvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3dvARB (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos3fARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3fARB (float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fvARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos3fvARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3fvARB (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3fvARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3fvARB (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3iARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos3iARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3iARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3iARB (int x, int y, int z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3ivARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos3ivARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3ivARB (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3ivARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3ivARB (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3sARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos3sARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3sARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3sARB (short x, short y, short z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3svARB")]
    public  IntPtr ext__GL_ARB_window_pos__glWindowPos3svARB = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3svARB (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ARB_window_pos", "glWindowPos3svARB"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3svARB (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_draw_buffers", "glDrawBuffersATI")]
    public  IntPtr ext__GL_ATI_draw_buffers__glDrawBuffersATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_draw_buffers", "glDrawBuffersATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawBuffersATI (int n, ref int bufs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_draw_buffers", "glDrawBuffersATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawBuffersATI (int n, int [] bufs) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI")]
    public  IntPtr ext__GL_ATI_element_array__glElementPointerATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerATI (int type, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerATI (int type, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerATI (int type, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerATI (int type, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerATI (int type, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerATI (int type, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerATI (int type, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glElementPointerATI (int type, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glElementPointerATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glElementPointerATI (int type, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_element_array", "glDrawElementArrayATI")]
    public  IntPtr ext__GL_ATI_element_array__glDrawElementArrayATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_element_array", "glDrawElementArrayATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawElementArrayATI (int mode, int count) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI")]
    public  IntPtr ext__GL_ATI_element_array__glDrawRangeElementArrayATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementArrayATI (int mode, int start, int end, int count) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementArrayATI (int mode, uint start, int end, int count) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementArrayATI (int mode, int start, uint end, int count) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_element_array", "glDrawRangeElementArrayATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementArrayATI (int mode, uint start, uint end, int count) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterivATI")]
    public  IntPtr ext__GL_ATI_envmap_bumpmap__glTexBumpParameterivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexBumpParameterivATI (int pname, ref int param) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexBumpParameterivATI (int pname, int [] param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterfvATI")]
    public  IntPtr ext__GL_ATI_envmap_bumpmap__glTexBumpParameterfvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexBumpParameterfvATI (int pname, ref float param) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glTexBumpParameterfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexBumpParameterfvATI (int pname, float [] param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterivATI")]
    public  IntPtr ext__GL_ATI_envmap_bumpmap__glGetTexBumpParameterivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetTexBumpParameterivATI (int pname, out int param) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetTexBumpParameterivATI (int pname, [Out] int [] param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterfvATI")]
    public  IntPtr ext__GL_ATI_envmap_bumpmap__glGetTexBumpParameterfvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetTexBumpParameterfvATI (int pname, out float param) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_envmap_bumpmap", "glGetTexBumpParameterfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetTexBumpParameterfvATI (int pname, [Out] float [] param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glGenFragmentShadersATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glGenFragmentShadersATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glGenFragmentShadersATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGenFragmentShadersATI (int range) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glGenFragmentShadersATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glGenFragmentShadersATI (uint range) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBindFragmentShaderATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glBindFragmentShaderATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBindFragmentShaderATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindFragmentShaderATI (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBindFragmentShaderATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindFragmentShaderATI (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glDeleteFragmentShaderATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glDeleteFragmentShaderATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glDeleteFragmentShaderATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteFragmentShaderATI (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glDeleteFragmentShaderATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteFragmentShaderATI (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBeginFragmentShaderATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glBeginFragmentShaderATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glBeginFragmentShaderATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBeginFragmentShaderATI () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glEndFragmentShaderATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glEndFragmentShaderATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glEndFragmentShaderATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEndFragmentShaderATI () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glPassTexCoordATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPassTexCoordATI (int dst, int coord, int swizzle) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPassTexCoordATI (uint dst, int coord, int swizzle) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPassTexCoordATI (int dst, uint coord, int swizzle) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glPassTexCoordATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPassTexCoordATI (uint dst, uint coord, int swizzle) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glSampleMapATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSampleMapATI (int dst, int interp, int swizzle) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSampleMapATI (uint dst, int interp, int swizzle) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSampleMapATI (int dst, uint interp, int swizzle) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSampleMapATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSampleMapATI (uint dst, uint interp, int swizzle) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp1ATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glColorFragmentOp1ATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp1ATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorFragmentOp1ATI (int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp2ATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glColorFragmentOp2ATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp2ATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorFragmentOp2ATI (int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp3ATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glColorFragmentOp3ATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glColorFragmentOp3ATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorFragmentOp3ATI (int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp1ATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glAlphaFragmentOp1ATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp1ATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glAlphaFragmentOp1ATI (int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp2ATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glAlphaFragmentOp2ATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp2ATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glAlphaFragmentOp2ATI (int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp3ATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glAlphaFragmentOp3ATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glAlphaFragmentOp3ATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glAlphaFragmentOp3ATI (int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI")]
    public  IntPtr ext__GL_ATI_fragment_shader__glSetFragmentShaderConstantATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetFragmentShaderConstantATI (int dst, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetFragmentShaderConstantATI (uint dst, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetFragmentShaderConstantATI (int dst, float [] value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_fragment_shader", "glSetFragmentShaderConstantATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetFragmentShaderConstantATI (uint dst, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glMapObjectBufferATI")]
    public  IntPtr ext__GL_ATI_map_object_buffer__glMapObjectBufferATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glMapObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  IntPtr glMapObjectBufferATI (int buffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glMapObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  IntPtr glMapObjectBufferATI (uint buffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glUnmapObjectBufferATI")]
    public  IntPtr ext__GL_ATI_map_object_buffer__glUnmapObjectBufferATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glUnmapObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUnmapObjectBufferATI (int buffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_map_object_buffer", "glUnmapObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUnmapObjectBufferATI (uint buffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_pn_triangles", "glPNTrianglesiATI")]
    public  IntPtr ext__GL_ATI_pn_triangles__glPNTrianglesiATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_pn_triangles", "glPNTrianglesiATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPNTrianglesiATI (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_pn_triangles", "glPNTrianglesfATI")]
    public  IntPtr ext__GL_ATI_pn_triangles__glPNTrianglesfATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_pn_triangles", "glPNTrianglesfATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPNTrianglesfATI (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilOpSeparateATI")]
    public  IntPtr ext__GL_ATI_separate_stencil__glStencilOpSeparateATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilOpSeparateATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStencilOpSeparateATI (int face, int sfail, int dpfail, int dppass) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilFuncSeparateATI")]
    public  IntPtr ext__GL_ATI_separate_stencil__glStencilFuncSeparateATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilFuncSeparateATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStencilFuncSeparateATI (int frontfunc, int backfunc, int arg_ref, int mask) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_separate_stencil", "glStencilFuncSeparateATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStencilFuncSeparateATI (int frontfunc, int backfunc, int arg_ref, uint mask) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glNewObjectBufferATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glNewObjectBufferATI (int size, bool [] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glNewObjectBufferATI (int size, byte [] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glNewObjectBufferATI (int size, short [] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glNewObjectBufferATI (int size, int [] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glNewObjectBufferATI (int size, float [] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glNewObjectBufferATI (int size, double [] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glNewObjectBufferATI (int size, string pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glNewObjectBufferATI (int size, IntPtr pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ref sbyte pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, sbyte [] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, sbyte [,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, sbyte [,,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ref ushort pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ushort [] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ushort [,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ushort [,,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ref uint pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, uint [] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, uint [,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, uint [,,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ref bool pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, bool [,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, bool [,,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ref byte pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, byte [,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, byte [,,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ref short pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, short [,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, short [,,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ref int pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, int [,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, int [,,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ref float pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, float [,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, float [,,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, ref double pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, double [,] pointer, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glNewObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glNewObjectBufferATI (int size, double [,,] pointer, int usage) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glIsObjectBufferATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glIsObjectBufferATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glIsObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsObjectBufferATI (int buffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glIsObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsObjectBufferATI (uint buffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glUpdateObjectBufferATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, bool [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, bool [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, bool [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, bool [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, byte [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, byte [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, byte [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, byte [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, short [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, short [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, short [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, short [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, int [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, int [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, int [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, int [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, float [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, float [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, float [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, float [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, double [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, double [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, double [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, double [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, string pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, string pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, string pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, string pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, IntPtr pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, IntPtr pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, IntPtr pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, IntPtr pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ref sbyte pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ref sbyte pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ref sbyte pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ref sbyte pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, sbyte [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, sbyte [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, sbyte [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, sbyte [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, sbyte [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, sbyte [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, sbyte [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, sbyte [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, sbyte [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, sbyte [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, sbyte [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, sbyte [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ref ushort pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ref ushort pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ref ushort pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ref ushort pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ushort [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ushort [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ushort [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ushort [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ushort [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ushort [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ushort [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ushort [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ushort [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ushort [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ushort [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ushort [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ref uint pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ref uint pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ref uint pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ref uint pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, uint [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, uint [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, uint [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, uint [] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, uint [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, uint [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, uint [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, uint [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, uint [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, uint [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, uint [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, uint [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ref bool pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ref bool pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ref bool pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ref bool pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, bool [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, bool [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, bool [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, bool [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, bool [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, bool [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, bool [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, bool [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ref byte pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ref byte pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ref byte pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ref byte pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, byte [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, byte [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, byte [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, byte [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, byte [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, byte [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, byte [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, byte [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ref short pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ref short pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ref short pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ref short pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, short [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, short [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, short [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, short [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, short [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, short [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, short [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, short [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ref int pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ref int pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ref int pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ref int pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, int [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, int [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, int [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, int [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, int [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, int [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, int [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, int [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ref float pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ref float pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ref float pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ref float pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, float [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, float [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, float [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, float [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, float [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, float [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, float [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, float [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, ref double pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, ref double pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, ref double pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, ref double pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, double [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, double [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, double [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, double [,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, int offset, int size, double [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, int offset, int size, double [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (int buffer, uint offset, int size, double [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glUpdateObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUpdateObjectBufferATI (uint buffer, uint offset, int size, double [,,] pointer, int preserve) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glGetObjectBufferfvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetObjectBufferfvATI (int buffer, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetObjectBufferfvATI (uint buffer, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetObjectBufferfvATI (int buffer, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetObjectBufferfvATI (uint buffer, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glGetObjectBufferivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetObjectBufferivATI (int buffer, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetObjectBufferivATI (uint buffer, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetObjectBufferivATI (int buffer, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetObjectBufferivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetObjectBufferivATI (uint buffer, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glFreeObjectBufferATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glFreeObjectBufferATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glFreeObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFreeObjectBufferATI (int buffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glFreeObjectBufferATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFreeObjectBufferATI (uint buffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glArrayObjectATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glArrayObjectATI (int array, int size, int type, int stride, int buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glArrayObjectATI (int array, int size, int type, int stride, uint buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glArrayObjectATI (int array, int size, int type, int stride, int buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glArrayObjectATI (int array, int size, int type, int stride, uint buffer, uint offset) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectfvATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glGetArrayObjectfvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetArrayObjectfvATI (int array, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetArrayObjectfvATI (int array, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectivATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glGetArrayObjectivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetArrayObjectivATI (int array, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetArrayObjectivATI (int array, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glVariantArrayObjectATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantArrayObjectATI (int id, int type, int stride, int buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantArrayObjectATI (uint id, int type, int stride, int buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantArrayObjectATI (int id, int type, int stride, uint buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantArrayObjectATI (uint id, int type, int stride, uint buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantArrayObjectATI (int id, int type, int stride, int buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantArrayObjectATI (uint id, int type, int stride, int buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantArrayObjectATI (int id, int type, int stride, uint buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glVariantArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantArrayObjectATI (uint id, int type, int stride, uint buffer, uint offset) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glGetVariantArrayObjectfvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantArrayObjectfvATI (int id, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantArrayObjectfvATI (uint id, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantArrayObjectfvATI (int id, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantArrayObjectfvATI (uint id, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI")]
    public  IntPtr ext__GL_ATI_vertex_array_object__glGetVariantArrayObjectivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantArrayObjectivATI (int id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantArrayObjectivATI (uint id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantArrayObjectivATI (int id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_array_object", "glGetVariantArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantArrayObjectivATI (uint id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI")]
    public  IntPtr ext__GL_ATI_vertex_attrib_array_object__glVertexAttribArrayObjectATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribArrayObjectATI (int index, int size, int type, int normalized, int stride, int buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (uint index, int size, int type, int normalized, int stride, int buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (int index, int size, int type, bool normalized, int stride, int buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (uint index, int size, int type, bool normalized, int stride, int buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (int index, int size, int type, int normalized, int stride, uint buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (uint index, int size, int type, int normalized, int stride, uint buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (int index, int size, int type, bool normalized, int stride, uint buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (uint index, int size, int type, bool normalized, int stride, uint buffer, int offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (int index, int size, int type, int normalized, int stride, int buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (uint index, int size, int type, int normalized, int stride, int buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (int index, int size, int type, bool normalized, int stride, int buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (uint index, int size, int type, bool normalized, int stride, int buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (int index, int size, int type, int normalized, int stride, uint buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (uint index, int size, int type, int normalized, int stride, uint buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (int index, int size, int type, bool normalized, int stride, uint buffer, uint offset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glVertexAttribArrayObjectATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribArrayObjectATI (uint index, int size, int type, bool normalized, int stride, uint buffer, uint offset) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI")]
    public  IntPtr ext__GL_ATI_vertex_attrib_array_object__glGetVertexAttribArrayObjectfvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribArrayObjectfvATI (int index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribArrayObjectfvATI (uint index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribArrayObjectfvATI (int index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectfvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribArrayObjectfvATI (uint index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI")]
    public  IntPtr ext__GL_ATI_vertex_attrib_array_object__glGetVertexAttribArrayObjectivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribArrayObjectivATI (int index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribArrayObjectivATI (uint index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribArrayObjectivATI (int index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_attrib_array_object", "glGetVertexAttribArrayObjectivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribArrayObjectivATI (uint index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1sATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream1sATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1sATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1sATI (int stream, short x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1svATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream1svATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1svATI (int stream, ref short coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1svATI (int stream, short [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1iATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream1iATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1iATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1iATI (int stream, int x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1ivATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream1ivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1ivATI (int stream, ref int coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1ivATI (int stream, int [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream1fATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1fATI (int stream, float x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream1fvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1fvATI (int stream, ref float coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1fvATI (int stream, float [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream1dATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1dATI (int stream, double x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream1dvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1dvATI (int stream, ref double coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream1dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream1dvATI (int stream, double [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2sATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream2sATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2sATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2sATI (int stream, short x, short y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2svATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream2svATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2svATI (int stream, ref short coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2svATI (int stream, short [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2iATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream2iATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2iATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2iATI (int stream, int x, int y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2ivATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream2ivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2ivATI (int stream, ref int coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2ivATI (int stream, int [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream2fATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2fATI (int stream, float x, float y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream2fvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2fvATI (int stream, ref float coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2fvATI (int stream, float [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream2dATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2dATI (int stream, double x, double y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream2dvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2dvATI (int stream, ref double coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream2dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream2dvATI (int stream, double [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3sATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream3sATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3sATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3sATI (int stream, short x, short y, short z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3svATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream3svATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3svATI (int stream, ref short coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3svATI (int stream, short [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3iATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream3iATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3iATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3iATI (int stream, int x, int y, int z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3ivATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream3ivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3ivATI (int stream, ref int coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3ivATI (int stream, int [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream3fATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3fATI (int stream, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream3fvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3fvATI (int stream, ref float coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3fvATI (int stream, float [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream3dATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3dATI (int stream, double x, double y, double z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream3dvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3dvATI (int stream, ref double coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream3dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream3dvATI (int stream, double [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4sATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream4sATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4sATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4sATI (int stream, short x, short y, short z, short w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4svATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream4svATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4svATI (int stream, ref short coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4svATI (int stream, short [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4iATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream4iATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4iATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4iATI (int stream, int x, int y, int z, int w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4ivATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream4ivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4ivATI (int stream, ref int coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4ivATI (int stream, int [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream4fATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4fATI (int stream, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream4fvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4fvATI (int stream, ref float coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4fvATI (int stream, float [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream4dATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4dATI (int stream, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexStream4dvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4dvATI (int stream, ref double coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexStream4dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexStream4dvATI (int stream, double [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3bATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3bATI (int stream, byte nx, byte ny, byte nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalStream3bATI (int stream, sbyte nx, byte ny, byte nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalStream3bATI (int stream, byte nx, sbyte ny, byte nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalStream3bATI (int stream, sbyte nx, sbyte ny, byte nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalStream3bATI (int stream, byte nx, byte ny, sbyte nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalStream3bATI (int stream, sbyte nx, byte ny, sbyte nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalStream3bATI (int stream, byte nx, sbyte ny, sbyte nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalStream3bATI (int stream, sbyte nx, sbyte ny, sbyte nz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3bvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3bvATI (int stream, ref byte coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3bvATI (int stream, byte [] coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalStream3bvATI (int stream, ref sbyte coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3bvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalStream3bvATI (int stream, sbyte [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3sATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3sATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3sATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3sATI (int stream, short nx, short ny, short nz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3svATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3svATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3svATI (int stream, ref short coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3svATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3svATI (int stream, short [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3iATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3iATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3iATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3iATI (int stream, int nx, int ny, int nz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3ivATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3ivATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3ivATI (int stream, ref int coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3ivATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3ivATI (int stream, int [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3fATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3fATI (int stream, float nx, float ny, float nz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3fvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3fvATI (int stream, ref float coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3fvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3fvATI (int stream, float [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3dATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3dATI (int stream, double nx, double ny, double nz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dvATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glNormalStream3dvATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3dvATI (int stream, ref double coords) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glNormalStream3dvATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalStream3dvATI (int stream, double [] coords) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glClientActiveVertexStreamATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glClientActiveVertexStreamATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glClientActiveVertexStreamATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glClientActiveVertexStreamATI (int stream) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexBlendEnviATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexBlendEnviATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexBlendEnviATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexBlendEnviATI (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexBlendEnvfATI")]
    public  IntPtr ext__GL_ATI_vertex_streams__glVertexBlendEnvfATI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_ATI_vertex_streams", "glVertexBlendEnvfATI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexBlendEnvfATI (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_blend_color", "glBlendColorEXT")]
    public  IntPtr ext__GL_EXT_blend_color__glBlendColorEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_blend_color", "glBlendColorEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBlendColorEXT (float red, float green, float blue, float alpha) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_blend_equation_separate", "glBlendEquationSeparateEXT")]
    public  IntPtr ext__GL_EXT_blend_equation_separate__glBlendEquationSeparateEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_blend_equation_separate", "glBlendEquationSeparateEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBlendEquationSeparateEXT (int modeRGB, int modeAlpha) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_blend_func_separate", "glBlendFuncSeparateEXT")]
    public  IntPtr ext__GL_EXT_blend_func_separate__glBlendFuncSeparateEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_blend_func_separate", "glBlendFuncSeparateEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBlendFuncSeparateEXT (int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_blend_minmax", "glBlendEquationEXT")]
    public  IntPtr ext__GL_EXT_blend_minmax__glBlendEquationEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_blend_minmax", "glBlendEquationEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBlendEquationEXT (int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT")]
    public  IntPtr ext__GL_EXT_color_subtable__glColorSubTableEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_color_subtable", "glColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTableEXT (int target, int start, int count, int format, int type, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_color_subtable", "glCopyColorSubTableEXT")]
    public  IntPtr ext__GL_EXT_color_subtable__glCopyColorSubTableEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_color_subtable", "glCopyColorSubTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyColorSubTableEXT (int target, int start, int x, int y, int width) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_compiled_vertex_array", "glLockArraysEXT")]
    public  IntPtr ext__GL_EXT_compiled_vertex_array__glLockArraysEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_compiled_vertex_array", "glLockArraysEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLockArraysEXT (int first, int count) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_compiled_vertex_array", "glUnlockArraysEXT")]
    public  IntPtr ext__GL_EXT_compiled_vertex_array__glUnlockArraysEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_compiled_vertex_array", "glUnlockArraysEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUnlockArraysEXT () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT")]
    public  IntPtr ext__GL_EXT_convolution__glConvolutionFilter1DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, bool [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, byte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, short [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, int [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, float [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, double [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, string image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, IntPtr image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ref sbyte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, sbyte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, sbyte [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, sbyte [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ref ushort image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ushort [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ushort [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ushort [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ref uint image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, uint [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, uint [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, uint [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ref bool image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, bool [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, bool [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ref byte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, byte [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, byte [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ref short image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, short [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, short [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ref int image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, int [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, int [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ref float image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, float [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, float [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, ref double image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, double [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1DEXT (int target, int internalformat, int width, int format, int type, double [,,] image) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT")]
    public  IntPtr ext__GL_EXT_convolution__glConvolutionFilter2DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, bool [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, byte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, short [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, int [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, float [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, double [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, string image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, IntPtr image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ref sbyte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, sbyte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, sbyte [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, sbyte [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ref ushort image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ushort [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ushort [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ushort [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ref uint image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, uint [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, uint [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, uint [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ref bool image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, bool [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, bool [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ref byte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, byte [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, byte [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ref short image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, short [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, short [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ref int image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, int [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, int [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ref float image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, float [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, float [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, ref double image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, double [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2DEXT (int target, int internalformat, int width, int height, int format, int type, double [,,] image) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfEXT")]
    public  IntPtr ext__GL_EXT_convolution__glConvolutionParameterfEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameterfEXT (int target, int pname, float arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfvEXT")]
    public  IntPtr ext__GL_EXT_convolution__glConvolutionParameterfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameterfvEXT (int target, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameterfvEXT (int target, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameteriEXT")]
    public  IntPtr ext__GL_EXT_convolution__glConvolutionParameteriEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameteriEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameteriEXT (int target, int pname, int arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterivEXT")]
    public  IntPtr ext__GL_EXT_convolution__glConvolutionParameterivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameterivEXT (int target, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glConvolutionParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameterivEXT (int target, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glCopyConvolutionFilter1DEXT")]
    public  IntPtr ext__GL_EXT_convolution__glCopyConvolutionFilter1DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glCopyConvolutionFilter1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyConvolutionFilter1DEXT (int target, int internalformat, int x, int y, int width) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glCopyConvolutionFilter2DEXT")]
    public  IntPtr ext__GL_EXT_convolution__glCopyConvolutionFilter2DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glCopyConvolutionFilter2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyConvolutionFilter2DEXT (int target, int internalformat, int x, int y, int width, int height) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT")]
    public  IntPtr ext__GL_EXT_convolution__glGetConvolutionFilterEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, [Out] bool [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, [Out] byte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, [Out] short [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, [Out] int [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, [Out] float [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, [Out] double [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, IntPtr image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, out bool image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, out byte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, out short image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, out int image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, out float image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, out double image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, out sbyte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, [Out] sbyte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, out ushort image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, [Out] ushort [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, out uint image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionFilterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilterEXT (int target, int format, int type, [Out] uint [] image) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterfvEXT")]
    public  IntPtr ext__GL_EXT_convolution__glGetConvolutionParameterfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionParameterfvEXT (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionParameterfvEXT (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterivEXT")]
    public  IntPtr ext__GL_EXT_convolution__glGetConvolutionParameterivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionParameterivEXT (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_convolution", "glGetConvolutionParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionParameterivEXT (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3bEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3bEXT (byte tx, byte ty, byte tz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangent3bEXT (sbyte tx, byte ty, byte tz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangent3bEXT (byte tx, sbyte ty, byte tz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangent3bEXT (sbyte tx, sbyte ty, byte tz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangent3bEXT (byte tx, byte ty, sbyte tz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangent3bEXT (sbyte tx, byte ty, sbyte tz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangent3bEXT (byte tx, sbyte ty, sbyte tz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangent3bEXT (sbyte tx, sbyte ty, sbyte tz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3bvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3bvEXT (ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3bvEXT (byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangent3bvEXT (ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangent3bvEXT (sbyte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3dEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3dEXT (double tx, double ty, double tz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dvEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3dvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3dvEXT (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3dvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3dvEXT (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3fEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3fEXT (float tx, float ty, float tz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fvEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3fvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3fvEXT (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3fvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3fvEXT (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3iEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3iEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3iEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3iEXT (int tx, int ty, int tz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3ivEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3ivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3ivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3ivEXT (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3ivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3ivEXT (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3sEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3sEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3sEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3sEXT (short tx, short ty, short tz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3svEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangent3svEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3svEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3svEXT (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangent3svEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangent3svEXT (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3bEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3bEXT (byte bx, byte by, byte bz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormal3bEXT (sbyte bx, byte by, byte bz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormal3bEXT (byte bx, sbyte by, byte bz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormal3bEXT (sbyte bx, sbyte by, byte bz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormal3bEXT (byte bx, byte by, sbyte bz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormal3bEXT (sbyte bx, byte by, sbyte bz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormal3bEXT (byte bx, sbyte by, sbyte bz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormal3bEXT (sbyte bx, sbyte by, sbyte bz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3bvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3bvEXT (ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3bvEXT (byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormal3bvEXT (ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormal3bvEXT (sbyte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3dEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3dEXT (double bx, double by, double bz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dvEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3dvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3dvEXT (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3dvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3dvEXT (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3fEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3fEXT (float bx, float by, float bz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fvEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3fvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3fvEXT (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3fvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3fvEXT (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3iEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3iEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3iEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3iEXT (int bx, int by, int bz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3ivEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3ivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3ivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3ivEXT (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3ivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3ivEXT (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3sEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3sEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3sEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3sEXT (short bx, short by, short bz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3svEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormal3svEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3svEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3svEXT (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormal3svEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormal3svEXT (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glTangentPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangentPointerEXT (int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangentPointerEXT (int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangentPointerEXT (int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangentPointerEXT (int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangentPointerEXT (int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangentPointerEXT (int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangentPointerEXT (int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTangentPointerEXT (int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glTangentPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTangentPointerEXT (int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT")]
    public  IntPtr ext__GL_EXT_coordinate_frame__glBinormalPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormalPointerEXT (int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormalPointerEXT (int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormalPointerEXT (int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormalPointerEXT (int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormalPointerEXT (int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormalPointerEXT (int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormalPointerEXT (int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBinormalPointerEXT (int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_coordinate_frame", "glBinormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBinormalPointerEXT (int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexImage1DEXT")]
    public  IntPtr ext__GL_EXT_copy_texture__glCopyTexImage1DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyTexImage1DEXT (int target, int level, int internalformat, int x, int y, int width, int border) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexImage2DEXT")]
    public  IntPtr ext__GL_EXT_copy_texture__glCopyTexImage2DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyTexImage2DEXT (int target, int level, int internalformat, int x, int y, int width, int height, int border) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage1DEXT")]
    public  IntPtr ext__GL_EXT_copy_texture__glCopyTexSubImage1DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyTexSubImage1DEXT (int target, int level, int xoffset, int x, int y, int width) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage2DEXT")]
    public  IntPtr ext__GL_EXT_copy_texture__glCopyTexSubImage2DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage3DEXT")]
    public  IntPtr ext__GL_EXT_copy_texture__glCopyTexSubImage3DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_copy_texture", "glCopyTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterdvEXT")]
    public  IntPtr ext__GL_EXT_cull_vertex__glCullParameterdvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterdvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCullParameterdvEXT (int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterdvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCullParameterdvEXT (int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterfvEXT")]
    public  IntPtr ext__GL_EXT_cull_vertex__glCullParameterfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCullParameterfvEXT (int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_cull_vertex", "glCullParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCullParameterfvEXT (int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_depth_bounds_test", "glDepthBoundsEXT")]
    public  IntPtr ext__GL_EXT_depth_bounds_test__glDepthBoundsEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_depth_bounds_test", "glDepthBoundsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDepthBoundsEXT (double zmin, double zmax) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT")]
    public  IntPtr ext__GL_EXT_draw_range_elements__glDrawRangeElementsEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, bool [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, bool [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, bool [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, bool [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, byte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, byte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, byte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, byte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, short [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, short [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, short [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, short [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, int [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, int [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, int [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, int [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, float [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, float [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, float [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, float [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, double [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, double [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, double [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, double [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, string indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, string indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, string indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, string indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, IntPtr indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, IntPtr indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, IntPtr indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, IntPtr indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ref sbyte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ref sbyte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ref sbyte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ref sbyte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, sbyte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, sbyte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, sbyte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, sbyte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, sbyte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, sbyte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, sbyte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, sbyte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, sbyte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, sbyte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, sbyte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, sbyte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ref ushort indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ref ushort indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ref ushort indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ref ushort indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ushort [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ushort [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ushort [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ushort [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ushort [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ushort [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ushort [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ushort [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ushort [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ushort [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ushort [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ushort [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ref uint indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ref uint indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ref uint indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ref uint indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, uint [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, uint [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, uint [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, uint [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, uint [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, uint [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, uint [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, uint [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, uint [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, uint [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, uint [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, uint [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ref bool indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ref bool indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ref bool indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ref bool indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, bool [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, bool [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, bool [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, bool [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, bool [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, bool [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, bool [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, bool [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ref byte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ref byte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ref byte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ref byte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, byte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, byte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, byte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, byte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, byte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, byte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, byte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, byte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ref short indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ref short indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ref short indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ref short indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, short [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, short [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, short [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, short [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, short [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, short [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, short [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, short [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ref int indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ref int indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ref int indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ref int indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, int [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, int [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, int [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, int [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, int [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, int [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, int [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, int [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ref float indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ref float indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ref float indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ref float indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, float [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, float [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, float [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, float [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, float [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, float [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, float [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, float [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, ref double indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, ref double indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, ref double indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, ref double indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, double [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, double [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, double [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, double [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, int end, int count, int type, double [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, int end, int count, int type, double [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, int start, uint end, int count, int type, double [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_draw_range_elements", "glDrawRangeElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElementsEXT (int mode, uint start, uint end, int count, int type, double [,,] indices) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfEXT")]
    public  IntPtr ext__GL_EXT_fog_coord__glFogCoordfEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordfEXT (float coord) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfvEXT")]
    public  IntPtr ext__GL_EXT_fog_coord__glFogCoordfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordfvEXT (ref float coord) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordfvEXT (float [] coord) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddEXT")]
    public  IntPtr ext__GL_EXT_fog_coord__glFogCoorddEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoorddEXT (double coord) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddvEXT")]
    public  IntPtr ext__GL_EXT_fog_coord__glFogCoorddvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoorddvEXT (ref double coord) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoorddvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoorddvEXT (double [] coord) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT")]
    public  IntPtr ext__GL_EXT_fog_coord__glFogCoordPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerEXT (int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerEXT (int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerEXT (int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerEXT (int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerEXT (int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerEXT (int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerEXT (int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerEXT (int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_fog_coord", "glFogCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerEXT (int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsRenderbufferEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glIsRenderbufferEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsRenderbufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsRenderbufferEXT (int renderbuffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsRenderbufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsRenderbufferEXT (uint renderbuffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindRenderbufferEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glBindRenderbufferEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindRenderbufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindRenderbufferEXT (int target, int renderbuffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindRenderbufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindRenderbufferEXT (int target, uint renderbuffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glDeleteRenderbuffersEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteRenderbuffersEXT (int n, ref int renderbuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteRenderbuffersEXT (int n, int [] renderbuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteRenderbuffersEXT (int n, ref uint renderbuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteRenderbuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteRenderbuffersEXT (int n, uint [] renderbuffers) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glGenRenderbuffersEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenRenderbuffersEXT (int n, out int renderbuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenRenderbuffersEXT (int n, [Out] int [] renderbuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenRenderbuffersEXT (int n, out uint renderbuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenRenderbuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenRenderbuffersEXT (int n, [Out] uint [] renderbuffers) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glRenderbufferStorageEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glRenderbufferStorageEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glRenderbufferStorageEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glRenderbufferStorageEXT (int target, int internalformat, int width, int height) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetRenderbufferParameterivEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glGetRenderbufferParameterivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetRenderbufferParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetRenderbufferParameterivEXT (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetRenderbufferParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetRenderbufferParameterivEXT (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsFramebufferEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glIsFramebufferEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsFramebufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsFramebufferEXT (int framebuffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glIsFramebufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsFramebufferEXT (uint framebuffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindFramebufferEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glBindFramebufferEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindFramebufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindFramebufferEXT (int target, int framebuffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glBindFramebufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindFramebufferEXT (int target, uint framebuffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glDeleteFramebuffersEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteFramebuffersEXT (int n, ref int framebuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteFramebuffersEXT (int n, int [] framebuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteFramebuffersEXT (int n, ref uint framebuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glDeleteFramebuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteFramebuffersEXT (int n, uint [] framebuffers) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glGenFramebuffersEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenFramebuffersEXT (int n, out int framebuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenFramebuffersEXT (int n, [Out] int [] framebuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenFramebuffersEXT (int n, out uint framebuffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenFramebuffersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenFramebuffersEXT (int n, [Out] uint [] framebuffers) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glCheckFramebufferStatusEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glCheckFramebufferStatusEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glCheckFramebufferStatusEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glCheckFramebufferStatusEXT (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture1DEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glFramebufferTexture1DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFramebufferTexture1DEXT (int target, int attachment, int textarget, int texture, int level) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFramebufferTexture1DEXT (int target, int attachment, int textarget, uint texture, int level) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture2DEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glFramebufferTexture2DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFramebufferTexture2DEXT (int target, int attachment, int textarget, int texture, int level) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFramebufferTexture2DEXT (int target, int attachment, int textarget, uint texture, int level) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture3DEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glFramebufferTexture3DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFramebufferTexture3DEXT (int target, int attachment, int textarget, int texture, int level, int zoffset) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferTexture3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFramebufferTexture3DEXT (int target, int attachment, int textarget, uint texture, int level, int zoffset) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferRenderbufferEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glFramebufferRenderbufferEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferRenderbufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFramebufferRenderbufferEXT (int target, int attachment, int renderbuffertarget, int renderbuffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glFramebufferRenderbufferEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFramebufferRenderbufferEXT (int target, int attachment, int renderbuffertarget, uint renderbuffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetFramebufferAttachmentParameterivEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glGetFramebufferAttachmentParameterivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetFramebufferAttachmentParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFramebufferAttachmentParameterivEXT (int target, int attachment, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGetFramebufferAttachmentParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFramebufferAttachmentParameterivEXT (int target, int attachment, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenerateMipmapEXT")]
    public  IntPtr ext__GL_EXT_framebuffer_object__glGenerateMipmapEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_framebuffer_object", "glGenerateMipmapEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenerateMipmapEXT (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT")]
    public  IntPtr ext__GL_EXT_histogram__glGetHistogramEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, [Out] bool [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, [Out] bool [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, [Out] byte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, [Out] byte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, [Out] short [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, [Out] short [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, [Out] int [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, [Out] int [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, [Out] float [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, [Out] float [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, [Out] double [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, [Out] double [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, IntPtr values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, IntPtr values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, out bool values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, out bool values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, out byte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, out byte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, out short values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, out short values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, out int values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, out int values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, out float values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, out float values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, out double values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, out double values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, out sbyte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, out sbyte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, [Out] sbyte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, [Out] sbyte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, out ushort values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, out ushort values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, [Out] ushort [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, [Out] ushort [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, out uint values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, out uint values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, int reset, int format, int type, [Out] uint [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogramEXT (int target, bool reset, int format, int type, [Out] uint [] values) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterfvEXT")]
    public  IntPtr ext__GL_EXT_histogram__glGetHistogramParameterfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramParameterfvEXT (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramParameterfvEXT (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterivEXT")]
    public  IntPtr ext__GL_EXT_histogram__glGetHistogramParameterivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramParameterivEXT (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetHistogramParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramParameterivEXT (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT")]
    public  IntPtr ext__GL_EXT_histogram__glGetMinmaxEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, [Out] bool [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, [Out] bool [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, [Out] byte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, [Out] byte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, [Out] short [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, [Out] short [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, [Out] int [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, [Out] int [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, [Out] float [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, [Out] float [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, [Out] double [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, [Out] double [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, IntPtr values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, IntPtr values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, out bool values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, out bool values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, out byte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, out byte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, out short values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, out short values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, out int values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, out int values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, out float values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, out float values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, out double values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, out double values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, out sbyte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, out sbyte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, [Out] sbyte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, [Out] sbyte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, out ushort values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, out ushort values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, [Out] ushort [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, [Out] ushort [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, out uint values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, out uint values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, int reset, int format, int type, [Out] uint [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmaxEXT (int target, bool reset, int format, int type, [Out] uint [] values) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterfvEXT")]
    public  IntPtr ext__GL_EXT_histogram__glGetMinmaxParameterfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxParameterfvEXT (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxParameterfvEXT (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterivEXT")]
    public  IntPtr ext__GL_EXT_histogram__glGetMinmaxParameterivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxParameterivEXT (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glGetMinmaxParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxParameterivEXT (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glHistogramEXT")]
    public  IntPtr ext__GL_EXT_histogram__glHistogramEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glHistogramEXT (int target, int width, int internalformat, int sink) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glHistogramEXT (int target, int width, int internalformat, bool sink) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glMinmaxEXT")]
    public  IntPtr ext__GL_EXT_histogram__glMinmaxEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMinmaxEXT (int target, int internalformat, int sink) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_histogram", "glMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMinmaxEXT (int target, int internalformat, bool sink) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glResetHistogramEXT")]
    public  IntPtr ext__GL_EXT_histogram__glResetHistogramEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glResetHistogramEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glResetHistogramEXT (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_histogram", "glResetMinmaxEXT")]
    public  IntPtr ext__GL_EXT_histogram__glResetMinmaxEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_histogram", "glResetMinmaxEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glResetMinmaxEXT (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_index_func", "glIndexFuncEXT")]
    public  IntPtr ext__GL_EXT_index_func__glIndexFuncEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_index_func", "glIndexFuncEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexFuncEXT (int func, float arg_ref) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_index_material", "glIndexMaterialEXT")]
    public  IntPtr ext__GL_EXT_index_material__glIndexMaterialEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_index_material", "glIndexMaterialEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexMaterialEXT (int face, int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_light_texture", "glApplyTextureEXT")]
    public  IntPtr ext__GL_EXT_light_texture__glApplyTextureEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_light_texture", "glApplyTextureEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glApplyTextureEXT (int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_light_texture", "glTextureLightEXT")]
    public  IntPtr ext__GL_EXT_light_texture__glTextureLightEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_light_texture", "glTextureLightEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTextureLightEXT (int pname) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_light_texture", "glTextureMaterialEXT")]
    public  IntPtr ext__GL_EXT_light_texture__glTextureMaterialEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_light_texture", "glTextureMaterialEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTextureMaterialEXT (int face, int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT")]
    public  IntPtr ext__GL_EXT_multi_draw_arrays__glMultiDrawArraysEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawArraysEXT (int mode, out int first, out int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawArraysEXT (int mode, [Out] int [] first, out int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawArraysEXT (int mode, out int first, [Out] int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawArraysEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawArraysEXT (int mode, [Out] int [] first, [Out] int [] count, int primcount) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT")]
    public  IntPtr ext__GL_EXT_multi_draw_arrays__glMultiDrawElementsEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, bool [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, bool [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, byte [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, byte [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, short [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, short [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, int [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, int [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, float [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, float [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, double [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, double [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, string indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, string indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, IntPtr indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, IntPtr indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ref sbyte indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ref sbyte indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, sbyte [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, sbyte [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, sbyte [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, sbyte [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, sbyte [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, sbyte [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ref ushort indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ref ushort indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ushort [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ushort [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ushort [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ushort [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ushort [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ushort [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ref uint indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ref uint indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, uint [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, uint [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, uint [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, uint [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, uint [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, uint [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ref bool indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ref bool indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, bool [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, bool [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, bool [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, bool [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ref byte indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ref byte indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, byte [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, byte [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, byte [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, byte [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ref short indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ref short indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, short [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, short [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, short [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, short [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ref int indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ref int indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, int [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, int [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, int [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, int [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ref float indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ref float indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, float [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, float [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, float [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, float [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, ref double indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, ref double indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, double [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, double [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, ref int count, int type, double [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multi_draw_arrays", "glMultiDrawElementsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElementsEXT (int mode, int [] count, int type, double [,,] indices, int primcount) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_multisample", "glSampleMaskEXT")]
    public  IntPtr ext__GL_EXT_multisample__glSampleMaskEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_multisample", "glSampleMaskEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSampleMaskEXT (float value, int invert) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_multisample", "glSampleMaskEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSampleMaskEXT (float value, bool invert) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_multisample", "glSamplePatternEXT")]
    public  IntPtr ext__GL_EXT_multisample__glSamplePatternEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_multisample", "glSamplePatternEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSamplePatternEXT (int pattern) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT")]
    public  IntPtr ext__GL_EXT_paletted_texture__glColorTableEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, bool [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, byte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, short [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, int [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, float [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, double [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, string table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, IntPtr table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ref sbyte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, sbyte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, sbyte [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, sbyte [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ref ushort table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ushort [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ushort [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ushort [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ref uint table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, uint [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, uint [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, uint [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ref bool table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, bool [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, bool [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ref byte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, byte [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, byte [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ref short table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, short [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, short [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ref int table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, int [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, int [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ref float table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, float [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, float [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, ref double table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, double [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableEXT (int target, int internalFormat, int width, int format, int type, double [,,] table) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT")]
    public  IntPtr ext__GL_EXT_paletted_texture__glGetColorTableEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableEXT (int target, int format, int type, [Out] bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableEXT (int target, int format, int type, [Out] byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableEXT (int target, int format, int type, [Out] short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableEXT (int target, int format, int type, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableEXT (int target, int format, int type, [Out] float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableEXT (int target, int format, int type, [Out] double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableEXT (int target, int format, int type, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, out byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, out short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, out double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, out sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, [Out] sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, out ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, [Out] ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, out uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableEXT (int target, int format, int type, [Out] uint [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterivEXT")]
    public  IntPtr ext__GL_EXT_paletted_texture__glGetColorTableParameterivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterivEXT (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterivEXT (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterfvEXT")]
    public  IntPtr ext__GL_EXT_paletted_texture__glGetColorTableParameterfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterfvEXT (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_paletted_texture", "glGetColorTableParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterfvEXT (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameteriEXT")]
    public  IntPtr ext__GL_EXT_pixel_transform__glPixelTransformParameteriEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameteriEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTransformParameteriEXT (int target, int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfEXT")]
    public  IntPtr ext__GL_EXT_pixel_transform__glPixelTransformParameterfEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTransformParameterfEXT (int target, int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterivEXT")]
    public  IntPtr ext__GL_EXT_pixel_transform__glPixelTransformParameterivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTransformParameterivEXT (int target, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTransformParameterivEXT (int target, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfvEXT")]
    public  IntPtr ext__GL_EXT_pixel_transform__glPixelTransformParameterfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTransformParameterfvEXT (int target, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_pixel_transform", "glPixelTransformParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTransformParameterfvEXT (int target, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfEXT")]
    public  IntPtr ext__GL_EXT_point_parameters__glPointParameterfEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfEXT (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfvEXT")]
    public  IntPtr ext__GL_EXT_point_parameters__glPointParameterfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfvEXT (int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_point_parameters", "glPointParameterfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfvEXT (int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_polygon_offset", "glPolygonOffsetEXT")]
    public  IntPtr ext__GL_EXT_polygon_offset__glPolygonOffsetEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_polygon_offset", "glPolygonOffsetEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPolygonOffsetEXT (float factor, float bias) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3bEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3bEXT (byte red, byte green, byte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bEXT (sbyte red, byte green, byte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bEXT (byte red, sbyte green, byte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bEXT (sbyte red, sbyte green, byte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bEXT (byte red, byte green, sbyte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bEXT (sbyte red, byte green, sbyte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bEXT (byte red, sbyte green, sbyte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bEXT (sbyte red, sbyte green, sbyte blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3bvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3bvEXT (ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3bvEXT (byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bvEXT (ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3bvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bvEXT (sbyte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3dEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3dEXT (double red, double green, double blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dvEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3dvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3dvEXT (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3dvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3dvEXT (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3fEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3fEXT (float red, float green, float blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fvEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3fvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3fvEXT (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3fvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3fvEXT (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3iEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3iEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3iEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3iEXT (int red, int green, int blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ivEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3ivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3ivEXT (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3ivEXT (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3sEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3sEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3sEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3sEXT (short red, short green, short blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3svEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3svEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3svEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3svEXT (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3svEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3svEXT (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3ubEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3ubEXT (byte red, byte green, byte blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubvEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3ubvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3ubvEXT (ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3ubvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3ubvEXT (byte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3uiEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3uiEXT (int red, int green, int blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uiEXT (uint red, int green, int blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uiEXT (int red, uint green, int blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uiEXT (uint red, uint green, int blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uiEXT (int red, int green, uint blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uiEXT (uint red, int green, uint blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uiEXT (int red, uint green, uint blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uiEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uiEXT (uint red, uint green, uint blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3uivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3uivEXT (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3uivEXT (int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uivEXT (ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3uivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uivEXT (uint [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3usEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3usEXT (short red, short green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usEXT (ushort red, short green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usEXT (short red, ushort green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usEXT (ushort red, ushort green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usEXT (short red, short green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usEXT (ushort red, short green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usEXT (short red, ushort green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usEXT (ushort red, ushort green, ushort blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColor3usvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3usvEXT (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3usvEXT (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usvEXT (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColor3usvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usvEXT (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT")]
    public  IntPtr ext__GL_EXT_secondary_color__glSecondaryColorPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_secondary_color", "glSecondaryColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerEXT (int size, int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_stencil_two_side", "glActiveStencilFaceEXT")]
    public  IntPtr ext__GL_EXT_stencil_two_side__glActiveStencilFaceEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_stencil_two_side", "glActiveStencilFaceEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glActiveStencilFaceEXT (int face) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT")]
    public  IntPtr ext__GL_EXT_subtexture__glTexSubImage1DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, bool [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, byte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, short [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, int [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, float [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, double [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, string pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, IntPtr pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ref sbyte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, sbyte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, sbyte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, sbyte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ref ushort pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ushort [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ushort [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ushort [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ref uint pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, uint [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, uint [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, uint [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ref bool pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, bool [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, bool [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ref byte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, byte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, byte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ref short pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, short [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, short [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ref int pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, int [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, int [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ref float pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, float [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, float [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, ref double pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, double [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage1DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage1DEXT (int target, int level, int xoffset, int width, int format, int type, double [,,] pixels) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT")]
    public  IntPtr ext__GL_EXT_subtexture__glTexSubImage2DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, string pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntPtr pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref sbyte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, sbyte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref ushort pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ushort [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref uint pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, uint [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref bool pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, bool [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref byte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, byte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref short pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, short [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref int pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref float pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, float [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ref double pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_subtexture", "glTexSubImage2DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage2DEXT (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, double [,,] pixels) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT")]
    public  IntPtr ext__GL_EXT_texture3D__glTexImage3DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, string pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref sbyte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref ushort pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref uint pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref bool pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref byte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref short pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref int pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref float pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref double pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3DEXT (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double [,,] pixels) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT")]
    public  IntPtr ext__GL_EXT_texture3D__glTexSubImage3DEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, string pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref sbyte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref ushort pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref uint pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref bool pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref byte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref short pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref int pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref float pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref double pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture3D", "glTexSubImage3DEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3DEXT (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double [,,] pixels) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT")]
    public  IntPtr ext__GL_EXT_texture_object__glAreTexturesResidentEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glAreTexturesResidentEXT (int n, ref int textures, out int residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glAreTexturesResidentEXT (int n, int [] textures, out int residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, ref uint textures, out int residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, uint [] textures, out int residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glAreTexturesResidentEXT (int n, ref int textures, [Out] int [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glAreTexturesResidentEXT (int n, int [] textures, [Out] int [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, ref uint textures, [Out] int [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, uint [] textures, [Out] int [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, ref int textures, out bool residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, int [] textures, out bool residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, ref uint textures, out bool residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, uint [] textures, out bool residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, ref int textures, [Out] bool [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, int [] textures, [Out] bool [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, ref uint textures, [Out] bool [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glAreTexturesResidentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreTexturesResidentEXT (int n, uint [] textures, [Out] bool [] residences) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_texture_object", "glBindTextureEXT")]
    public  IntPtr ext__GL_EXT_texture_object__glBindTextureEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_texture_object", "glBindTextureEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindTextureEXT (int target, int texture) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glBindTextureEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindTextureEXT (int target, uint texture) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT")]
    public  IntPtr ext__GL_EXT_texture_object__glDeleteTexturesEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteTexturesEXT (int n, ref int textures) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteTexturesEXT (int n, int [] textures) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteTexturesEXT (int n, ref uint textures) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glDeleteTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteTexturesEXT (int n, uint [] textures) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT")]
    public  IntPtr ext__GL_EXT_texture_object__glGenTexturesEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenTexturesEXT (int n, out int textures) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenTexturesEXT (int n, [Out] int [] textures) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenTexturesEXT (int n, out uint textures) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glGenTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenTexturesEXT (int n, [Out] uint [] textures) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_texture_object", "glIsTextureEXT")]
    public  IntPtr ext__GL_EXT_texture_object__glIsTextureEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_texture_object", "glIsTextureEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsTextureEXT (int texture) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glIsTextureEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsTextureEXT (uint texture) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT")]
    public  IntPtr ext__GL_EXT_texture_object__glPrioritizeTexturesEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPrioritizeTexturesEXT (int n, ref int textures, ref float priorities) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPrioritizeTexturesEXT (int n, int [] textures, ref float priorities) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPrioritizeTexturesEXT (int n, ref uint textures, ref float priorities) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPrioritizeTexturesEXT (int n, uint [] textures, ref float priorities) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPrioritizeTexturesEXT (int n, ref int textures, float [] priorities) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPrioritizeTexturesEXT (int n, int [] textures, float [] priorities) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPrioritizeTexturesEXT (int n, ref uint textures, float [] priorities) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_texture_object", "glPrioritizeTexturesEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPrioritizeTexturesEXT (int n, uint [] textures, float [] priorities) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_texture_perturb_normal", "glTextureNormalEXT")]
    public  IntPtr ext__GL_EXT_texture_perturb_normal__glTextureNormalEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_texture_perturb_normal", "glTextureNormalEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTextureNormalEXT (int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glArrayElementEXT")]
    public  IntPtr ext__GL_EXT_vertex_array__glArrayElementEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glArrayElementEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glArrayElementEXT (int i) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT")]
    public  IntPtr ext__GL_EXT_vertex_array__glColorPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glColorPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerEXT (int size, int type, int stride, int count, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glDrawArraysEXT")]
    public  IntPtr ext__GL_EXT_vertex_array__glDrawArraysEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glDrawArraysEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawArraysEXT (int mode, int first, int count) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT")]
    public  IntPtr ext__GL_EXT_vertex_array__glEdgeFlagPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEdgeFlagPointerEXT (int stride, int count, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEdgeFlagPointerEXT (int stride, int count, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glEdgeFlagPointerEXT (int stride, int count, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glEdgeFlagPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glEdgeFlagPointerEXT (int stride, int count, bool [] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT")]
    public  IntPtr ext__GL_EXT_vertex_array__glGetPointervEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPointervEXT (int pname, [Out] bool [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPointervEXT (int pname, [Out] byte [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPointervEXT (int pname, [Out] short [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPointervEXT (int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPointervEXT (int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPointervEXT (int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPointervEXT (int pname, IntPtr arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, out bool arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, out byte arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, out short arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, out sbyte arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, [Out] sbyte [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, out ushort arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, [Out] ushort [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, out uint arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glGetPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetPointervEXT (int pname, [Out] uint [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT")]
    public  IntPtr ext__GL_EXT_vertex_array__glIndexPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerEXT (int type, int stride, int count, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerEXT (int type, int stride, int count, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerEXT (int type, int stride, int count, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerEXT (int type, int stride, int count, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerEXT (int type, int stride, int count, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerEXT (int type, int stride, int count, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerEXT (int type, int stride, int count, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerEXT (int type, int stride, int count, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glIndexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerEXT (int type, int stride, int count, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT")]
    public  IntPtr ext__GL_EXT_vertex_array__glNormalPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerEXT (int type, int stride, int count, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerEXT (int type, int stride, int count, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerEXT (int type, int stride, int count, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerEXT (int type, int stride, int count, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerEXT (int type, int stride, int count, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerEXT (int type, int stride, int count, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerEXT (int type, int stride, int count, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerEXT (int type, int stride, int count, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glNormalPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerEXT (int type, int stride, int count, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT")]
    public  IntPtr ext__GL_EXT_vertex_array__glTexCoordPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glTexCoordPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerEXT (int size, int type, int stride, int count, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT")]
    public  IntPtr ext__GL_EXT_vertex_array__glVertexPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_array", "glVertexPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerEXT (int size, int type, int stride, int count, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBeginVertexShaderEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glBeginVertexShaderEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBeginVertexShaderEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBeginVertexShaderEXT () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEndVertexShaderEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glEndVertexShaderEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEndVertexShaderEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEndVertexShaderEXT () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindVertexShaderEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glBindVertexShaderEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindVertexShaderEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindVertexShaderEXT (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindVertexShaderEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindVertexShaderEXT (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenVertexShadersEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGenVertexShadersEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenVertexShadersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGenVertexShadersEXT (int range) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenVertexShadersEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glGenVertexShadersEXT (uint range) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDeleteVertexShaderEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glDeleteVertexShaderEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDeleteVertexShaderEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteVertexShaderEXT (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDeleteVertexShaderEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteVertexShaderEXT (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glShaderOp1EXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderOp1EXT (int op, int res, int arg1) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp1EXT (int op, uint res, int arg1) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp1EXT (int op, int res, uint arg1) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp1EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp1EXT (int op, uint res, uint arg1) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glShaderOp2EXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderOp2EXT (int op, int res, int arg1, int arg2) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp2EXT (int op, uint res, int arg1, int arg2) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp2EXT (int op, int res, uint arg1, int arg2) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp2EXT (int op, uint res, uint arg1, int arg2) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp2EXT (int op, int res, int arg1, uint arg2) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp2EXT (int op, uint res, int arg1, uint arg2) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp2EXT (int op, int res, uint arg1, uint arg2) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp2EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp2EXT (int op, uint res, uint arg1, uint arg2) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glShaderOp3EXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderOp3EXT (int op, int res, int arg1, int arg2, int arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, uint res, int arg1, int arg2, int arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, int res, uint arg1, int arg2, int arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, uint res, uint arg1, int arg2, int arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, int res, int arg1, uint arg2, int arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, uint res, int arg1, uint arg2, int arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, int res, uint arg1, uint arg2, int arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, uint res, uint arg1, uint arg2, int arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, int res, int arg1, int arg2, uint arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, uint res, int arg1, int arg2, uint arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, int res, uint arg1, int arg2, uint arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, uint res, uint arg1, int arg2, uint arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, int res, int arg1, uint arg2, uint arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, uint res, int arg1, uint arg2, uint arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, int res, uint arg1, uint arg2, uint arg3) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glShaderOp3EXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderOp3EXT (int op, uint res, uint arg1, uint arg2, uint arg3) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glSwizzleEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSwizzleEXT (int res, int arg_in, int outX, int outY, int outZ, int outW) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSwizzleEXT (uint res, int arg_in, int outX, int outY, int outZ, int outW) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSwizzleEXT (int res, uint arg_in, int outX, int outY, int outZ, int outW) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSwizzleEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSwizzleEXT (uint res, uint arg_in, int outX, int outY, int outZ, int outW) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glWriteMaskEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWriteMaskEXT (int res, int arg_in, int outX, int outY, int outZ, int outW) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWriteMaskEXT (uint res, int arg_in, int outX, int outY, int outZ, int outW) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWriteMaskEXT (int res, uint arg_in, int outX, int outY, int outZ, int outW) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glWriteMaskEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glWriteMaskEXT (uint res, uint arg_in, int outX, int outY, int outZ, int outW) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glInsertComponentEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glInsertComponentEXT (int res, int src, int num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glInsertComponentEXT (uint res, int src, int num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glInsertComponentEXT (int res, uint src, int num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glInsertComponentEXT (uint res, uint src, int num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glInsertComponentEXT (int res, int src, uint num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glInsertComponentEXT (uint res, int src, uint num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glInsertComponentEXT (int res, uint src, uint num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glInsertComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glInsertComponentEXT (uint res, uint src, uint num) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glExtractComponentEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glExtractComponentEXT (int res, int src, int num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glExtractComponentEXT (uint res, int src, int num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glExtractComponentEXT (int res, uint src, int num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glExtractComponentEXT (uint res, uint src, int num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glExtractComponentEXT (int res, int src, uint num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glExtractComponentEXT (uint res, int src, uint num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glExtractComponentEXT (int res, uint src, uint num) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glExtractComponentEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glExtractComponentEXT (uint res, uint src, uint num) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenSymbolsEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGenSymbolsEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenSymbolsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGenSymbolsEXT (int datatype, int storagetype, int range, int components) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGenSymbolsEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glGenSymbolsEXT (int datatype, int storagetype, int range, uint components) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glSetInvariantEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetInvariantEXT (int id, int type, bool [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, bool [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetInvariantEXT (int id, int type, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetInvariantEXT (int id, int type, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetInvariantEXT (int id, int type, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetInvariantEXT (int id, int type, float [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, float [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetInvariantEXT (int id, int type, double [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, double [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetInvariantEXT (int id, int type, string addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, string addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetInvariantEXT (int id, int type, IntPtr addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, IntPtr addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, sbyte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, sbyte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, sbyte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, sbyte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, sbyte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, sbyte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ushort [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ushort [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ushort [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ushort [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ushort [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ushort [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, uint [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, uint [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, uint [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, uint [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, uint [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, uint [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ref bool addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ref bool addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, bool [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, bool [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, bool [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, bool [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, byte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, byte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, byte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, byte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, short [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, short [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, short [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, short [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, int [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, int [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, int [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, int [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, float [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, float [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, float [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, float [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, double [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, double [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (int id, int type, double [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetInvariantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetInvariantEXT (uint id, int type, double [,,] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glSetLocalConstantEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetLocalConstantEXT (int id, int type, bool [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, bool [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetLocalConstantEXT (int id, int type, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetLocalConstantEXT (int id, int type, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetLocalConstantEXT (int id, int type, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetLocalConstantEXT (int id, int type, float [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, float [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetLocalConstantEXT (int id, int type, double [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, double [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetLocalConstantEXT (int id, int type, string addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, string addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetLocalConstantEXT (int id, int type, IntPtr addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, IntPtr addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, sbyte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, sbyte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, sbyte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, sbyte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, sbyte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, sbyte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ushort [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ushort [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ushort [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ushort [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ushort [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ushort [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, uint [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, uint [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, uint [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, uint [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, uint [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, uint [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ref bool addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ref bool addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, bool [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, bool [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, bool [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, bool [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, byte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, byte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, byte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, byte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, short [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, short [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, short [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, short [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, int [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, int [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, int [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, int [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, float [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, float [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, float [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, float [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, double [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, double [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (int id, int type, double [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glSetLocalConstantEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetLocalConstantEXT (uint id, int type, double [,,] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glVariantbvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantbvEXT (int id, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantbvEXT (uint id, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantbvEXT (int id, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantbvEXT (uint id, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantbvEXT (int id, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantbvEXT (uint id, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantbvEXT (int id, sbyte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantbvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantbvEXT (uint id, sbyte [] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glVariantsvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantsvEXT (int id, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantsvEXT (uint id, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantsvEXT (int id, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantsvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantsvEXT (uint id, short [] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glVariantivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantivEXT (int id, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantivEXT (uint id, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantivEXT (int id, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantivEXT (uint id, int [] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glVariantfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantfvEXT (int id, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantfvEXT (uint id, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantfvEXT (int id, float [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantfvEXT (uint id, float [] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glVariantdvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantdvEXT (int id, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantdvEXT (uint id, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantdvEXT (int id, double [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantdvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantdvEXT (uint id, double [] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glVariantubvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantubvEXT (int id, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantubvEXT (uint id, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantubvEXT (int id, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantubvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantubvEXT (uint id, byte [] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glVariantusvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantusvEXT (int id, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantusvEXT (uint id, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantusvEXT (int id, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantusvEXT (uint id, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantusvEXT (int id, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantusvEXT (uint id, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantusvEXT (int id, ushort [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantusvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantusvEXT (uint id, ushort [] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glVariantuivEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantuivEXT (int id, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantuivEXT (uint id, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantuivEXT (int id, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantuivEXT (uint id, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantuivEXT (int id, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantuivEXT (uint id, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantuivEXT (int id, uint [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantuivEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantuivEXT (uint id, uint [] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glVariantPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantPointerEXT (int id, int type, int stride, bool [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, bool [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, bool [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, bool [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantPointerEXT (int id, int type, int stride, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, byte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantPointerEXT (int id, int type, int stride, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, short [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantPointerEXT (int id, int type, int stride, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, int [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantPointerEXT (int id, int type, int stride, float [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, float [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, float [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, float [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantPointerEXT (int id, int type, int stride, double [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, double [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, double [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, double [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantPointerEXT (int id, int type, int stride, string addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, string addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, string addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, string addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVariantPointerEXT (int id, int type, int stride, IntPtr addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, IntPtr addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, IntPtr addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, IntPtr addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ref sbyte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, sbyte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, sbyte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, sbyte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, sbyte [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, sbyte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, sbyte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, sbyte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, sbyte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, sbyte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, sbyte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, sbyte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, sbyte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ref ushort addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ushort [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ushort [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ushort [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ushort [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ushort [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ushort [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ushort [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ushort [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ushort [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ushort [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ushort [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ushort [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ref uint addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, uint [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, uint [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, uint [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, uint [] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, uint [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, uint [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, uint [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, uint [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, uint [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, uint [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, uint [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, uint [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ref bool addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ref bool addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ref bool addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ref bool addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, bool [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, bool [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, bool [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, bool [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, bool [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, bool [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, bool [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, bool [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ref byte addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, byte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, byte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, byte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, byte [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, byte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, byte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, byte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, byte [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ref short addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, short [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, short [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, short [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, short [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, short [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, short [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, short [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, short [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ref int addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, int [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, int [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, int [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, int [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, int [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, int [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, int [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, int [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ref float addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, float [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, float [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, float [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, float [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, float [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, float [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, float [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, float [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, ref double addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, double [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, double [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, double [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, double [,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, int stride, double [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, int stride, double [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (int id, int type, uint stride, double [,,] addr) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glVariantPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVariantPointerEXT (uint id, int type, uint stride, double [,,] addr) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEnableVariantClientStateEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glEnableVariantClientStateEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEnableVariantClientStateEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEnableVariantClientStateEXT (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glEnableVariantClientStateEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glEnableVariantClientStateEXT (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDisableVariantClientStateEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glDisableVariantClientStateEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDisableVariantClientStateEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDisableVariantClientStateEXT (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glDisableVariantClientStateEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDisableVariantClientStateEXT (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindLightParameterEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glBindLightParameterEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindLightParameterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glBindLightParameterEXT (int light, int value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindMaterialParameterEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glBindMaterialParameterEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindMaterialParameterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glBindMaterialParameterEXT (int face, int value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindTexGenParameterEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glBindTexGenParameterEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindTexGenParameterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glBindTexGenParameterEXT (int unit, int coord, int value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindTextureUnitParameterEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glBindTextureUnitParameterEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindTextureUnitParameterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glBindTextureUnitParameterEXT (int unit, int value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindParameterEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glBindParameterEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glBindParameterEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glBindParameterEXT (int value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glIsVariantEnabledEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glIsVariantEnabledEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glIsVariantEnabledEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsVariantEnabledEXT (int id, int cap) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glIsVariantEnabledEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsVariantEnabledEXT (uint id, int cap) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetVariantBooleanvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantBooleanvEXT (int id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantBooleanvEXT (uint id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantBooleanvEXT (int id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantBooleanvEXT (uint id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantBooleanvEXT (int id, int value, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantBooleanvEXT (uint id, int value, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantBooleanvEXT (int id, int value, [Out] bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantBooleanvEXT (uint id, int value, [Out] bool [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetVariantIntegervEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantIntegervEXT (int id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantIntegervEXT (uint id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantIntegervEXT (int id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantIntegervEXT (uint id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetVariantFloatvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantFloatvEXT (int id, int value, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantFloatvEXT (uint id, int value, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantFloatvEXT (int id, int value, [Out] float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantFloatvEXT (uint id, int value, [Out] float [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetVariantPointervEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantPointervEXT (int id, int value, [Out] bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, [Out] bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantPointervEXT (int id, int value, [Out] byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, [Out] byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantPointervEXT (int id, int value, [Out] short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, [Out] short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantPointervEXT (int id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantPointervEXT (int id, int value, [Out] float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, [Out] float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantPointervEXT (int id, int value, [Out] double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, [Out] double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVariantPointervEXT (int id, int value, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, out byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, out byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, out short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, out short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, out double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, out double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, out sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, out sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, [Out] sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, [Out] sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, out ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, out ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, [Out] ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, [Out] ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, out uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, out uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (int id, int value, [Out] uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetVariantPointervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVariantPointervEXT (uint id, int value, [Out] uint [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetInvariantBooleanvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetInvariantBooleanvEXT (int id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantBooleanvEXT (uint id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetInvariantBooleanvEXT (int id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantBooleanvEXT (uint id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantBooleanvEXT (int id, int value, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantBooleanvEXT (uint id, int value, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantBooleanvEXT (int id, int value, [Out] bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantBooleanvEXT (uint id, int value, [Out] bool [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetInvariantIntegervEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetInvariantIntegervEXT (int id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantIntegervEXT (uint id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetInvariantIntegervEXT (int id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantIntegervEXT (uint id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetInvariantFloatvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetInvariantFloatvEXT (int id, int value, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantFloatvEXT (uint id, int value, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetInvariantFloatvEXT (int id, int value, [Out] float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetInvariantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetInvariantFloatvEXT (uint id, int value, [Out] float [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetLocalConstantBooleanvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetLocalConstantBooleanvEXT (int id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantBooleanvEXT (uint id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetLocalConstantBooleanvEXT (int id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantBooleanvEXT (uint id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantBooleanvEXT (int id, int value, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantBooleanvEXT (uint id, int value, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantBooleanvEXT (int id, int value, [Out] bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantBooleanvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantBooleanvEXT (uint id, int value, [Out] bool [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetLocalConstantIntegervEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetLocalConstantIntegervEXT (int id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantIntegervEXT (uint id, int value, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetLocalConstantIntegervEXT (int id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantIntegervEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantIntegervEXT (uint id, int value, [Out] int [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT")]
    public  IntPtr ext__GL_EXT_vertex_shader__glGetLocalConstantFloatvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetLocalConstantFloatvEXT (int id, int value, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantFloatvEXT (uint id, int value, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetLocalConstantFloatvEXT (int id, int value, [Out] float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_shader", "glGetLocalConstantFloatvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetLocalConstantFloatvEXT (uint id, int value, [Out] float [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfEXT")]
    public  IntPtr ext__GL_EXT_vertex_weighting__glVertexWeightfEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightfEXT (float weight) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfvEXT")]
    public  IntPtr ext__GL_EXT_vertex_weighting__glVertexWeightfvEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightfvEXT (ref float weight) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightfvEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightfvEXT (float [] weight) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT")]
    public  IntPtr ext__GL_EXT_vertex_weighting__glVertexWeightPointerEXT = IntPtr.Zero;

    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_EXT_vertex_weighting", "glVertexWeightPointerEXT"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeightPointerEXT (int size, int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY")]
    public  IntPtr ext__GL_GREMEDY_string_marker__glStringMarkerGREMEDY = IntPtr.Zero;

    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStringMarkerGREMEDY (int len, bool [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStringMarkerGREMEDY (int len, byte [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStringMarkerGREMEDY (int len, short [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStringMarkerGREMEDY (int len, int [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStringMarkerGREMEDY (int len, float [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStringMarkerGREMEDY (int len, double [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStringMarkerGREMEDY (int len, string arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStringMarkerGREMEDY (int len, IntPtr arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ref sbyte arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, sbyte [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, sbyte [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, sbyte [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ref ushort arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ushort [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ushort [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ushort [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ref uint arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, uint [] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, uint [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, uint [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ref bool arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, bool [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, bool [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ref byte arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, byte [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, byte [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ref short arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, short [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, short [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ref int arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, int [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, int [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ref float arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, float [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, float [,,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, ref double arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, double [,] arg_string) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_GREMEDY_string_marker", "glStringMarkerGREMEDY"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStringMarkerGREMEDY (int len, double [,,] arg_string) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameteriHP")]
    public  IntPtr ext__GL_HP_image_transform__glImageTransformParameteriHP = IntPtr.Zero;

    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameteriHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glImageTransformParameteriHP (int target, int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfHP")]
    public  IntPtr ext__GL_HP_image_transform__glImageTransformParameterfHP = IntPtr.Zero;

    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glImageTransformParameterfHP (int target, int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterivHP")]
    public  IntPtr ext__GL_HP_image_transform__glImageTransformParameterivHP = IntPtr.Zero;

    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterivHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glImageTransformParameterivHP (int target, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterivHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glImageTransformParameterivHP (int target, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfvHP")]
    public  IntPtr ext__GL_HP_image_transform__glImageTransformParameterfvHP = IntPtr.Zero;

    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfvHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glImageTransformParameterfvHP (int target, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_HP_image_transform", "glImageTransformParameterfvHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glImageTransformParameterfvHP (int target, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterivHP")]
    public  IntPtr ext__GL_HP_image_transform__glGetImageTransformParameterivHP = IntPtr.Zero;

    [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterivHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetImageTransformParameterivHP (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterivHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetImageTransformParameterivHP (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterfvHP")]
    public  IntPtr ext__GL_HP_image_transform__glGetImageTransformParameterfvHP = IntPtr.Zero;

    [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterfvHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetImageTransformParameterfvHP (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_HP_image_transform", "glGetImageTransformParameterfvHP"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetImageTransformParameterfvHP (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM")]
    public  IntPtr ext__GL_IBM_multimode_draw_arrays__glMultiModeDrawArraysIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawArraysIBM (ref int mode, ref int first, ref int count, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawArraysIBM (int [] mode, ref int first, ref int count, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawArraysIBM (ref int mode, int [] first, ref int count, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawArraysIBM (int [] mode, int [] first, ref int count, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawArraysIBM (ref int mode, ref int first, int [] count, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawArraysIBM (int [] mode, ref int first, int [] count, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawArraysIBM (ref int mode, int [] first, int [] count, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawArraysIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawArraysIBM (int [] mode, int [] first, int [] count, int primcount, int modestride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM")]
    public  IntPtr ext__GL_IBM_multimode_draw_arrays__glMultiModeDrawElementsIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, bool [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, bool [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, bool [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, bool [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, byte [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, byte [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, byte [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, byte [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, short [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, short [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, short [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, short [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, int [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, int [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, int [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, int [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, float [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, float [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, float [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, float [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, double [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, double [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, double [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, double [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, string indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, string indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, string indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, string indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, IntPtr indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, IntPtr indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, IntPtr indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, IntPtr indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ref sbyte indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ref sbyte indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ref sbyte indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ref sbyte indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, sbyte [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, sbyte [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, sbyte [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, sbyte [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, sbyte [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, sbyte [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, sbyte [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, sbyte [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, sbyte [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, sbyte [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, sbyte [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, sbyte [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ref ushort indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ref ushort indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ref ushort indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ref ushort indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ushort [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ushort [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ushort [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ushort [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ushort [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ushort [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ushort [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ushort [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ushort [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ushort [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ushort [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ushort [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ref uint indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ref uint indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ref uint indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ref uint indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, uint [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, uint [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, uint [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, uint [] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, uint [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, uint [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, uint [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, uint [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, uint [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, uint [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, uint [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, uint [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ref bool indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ref bool indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ref bool indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ref bool indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, bool [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, bool [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, bool [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, bool [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, bool [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, bool [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, bool [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, bool [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ref byte indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ref byte indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ref byte indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ref byte indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, byte [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, byte [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, byte [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, byte [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, byte [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, byte [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, byte [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, byte [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ref short indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ref short indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ref short indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ref short indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, short [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, short [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, short [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, short [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, short [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, short [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, short [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, short [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ref int indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ref int indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ref int indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ref int indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, int [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, int [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, int [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, int [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, int [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, int [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, int [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, int [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ref float indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ref float indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ref float indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ref float indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, float [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, float [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, float [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, float [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, float [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, float [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, float [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, float [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, ref double indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, ref double indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, ref double indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, ref double indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, double [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, double [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, double [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, double [,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, ref int count, int type, double [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, ref int count, int type, double [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (ref int mode, int [] count, int type, double [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_multimode_draw_arrays", "glMultiModeDrawElementsIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiModeDrawElementsIBM (int [] mode, int [] count, int type, double [,,] indices, int primcount, int modestride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM")]
    public  IntPtr ext__GL_IBM_vertex_array_lists__glColorPointerListIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerListIBM (int size, int type, int stride, bool [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerListIBM (int size, int type, int stride, byte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerListIBM (int size, int type, int stride, short [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerListIBM (int size, int type, int stride, int [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerListIBM (int size, int type, int stride, float [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerListIBM (int size, int type, int stride, double [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerListIBM (int size, int type, int stride, string pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointerListIBM (int size, int type, int stride, IntPtr pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ref sbyte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, sbyte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, sbyte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, sbyte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ref ushort pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ushort [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ushort [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ushort [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ref uint pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, uint [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, uint [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, uint [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ref bool pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, bool [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, bool [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ref byte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, byte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, byte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ref short pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, short [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, short [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ref int pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, int [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, int [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ref float pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, float [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, float [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, ref double pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, double [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointerListIBM (int size, int type, int stride, double [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM")]
    public  IntPtr ext__GL_IBM_vertex_array_lists__glSecondaryColorPointerListIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, bool [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, byte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, short [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, int [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, float [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, double [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, string pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, IntPtr pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ref sbyte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, sbyte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, sbyte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, sbyte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ref ushort pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ushort [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ushort [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ushort [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ref uint pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, uint [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, uint [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, uint [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ref bool pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, bool [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, bool [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ref byte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, byte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, byte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ref short pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, short [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, short [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ref int pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, int [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, int [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ref float pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, float [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, float [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, ref double pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, double [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glSecondaryColorPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointerListIBM (int size, int type, int stride, double [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glEdgeFlagPointerListIBM")]
    public  IntPtr ext__GL_IBM_vertex_array_lists__glEdgeFlagPointerListIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glEdgeFlagPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEdgeFlagPointerListIBM (int stride, ref bool pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glEdgeFlagPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEdgeFlagPointerListIBM (int stride, bool [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM")]
    public  IntPtr ext__GL_IBM_vertex_array_lists__glFogCoordPointerListIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerListIBM (int type, int stride, bool [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerListIBM (int type, int stride, byte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerListIBM (int type, int stride, short [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerListIBM (int type, int stride, int [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerListIBM (int type, int stride, float [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerListIBM (int type, int stride, double [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerListIBM (int type, int stride, string pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointerListIBM (int type, int stride, IntPtr pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ref sbyte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, sbyte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, sbyte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, sbyte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ref ushort pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ushort [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ushort [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ushort [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ref uint pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, uint [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, uint [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, uint [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ref bool pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, bool [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, bool [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ref byte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, byte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, byte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ref short pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, short [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, short [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ref int pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, int [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, int [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ref float pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, float [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, float [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, ref double pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, double [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glFogCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointerListIBM (int type, int stride, double [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM")]
    public  IntPtr ext__GL_IBM_vertex_array_lists__glIndexPointerListIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerListIBM (int type, int stride, bool [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerListIBM (int type, int stride, byte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerListIBM (int type, int stride, short [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerListIBM (int type, int stride, int [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerListIBM (int type, int stride, float [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerListIBM (int type, int stride, double [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerListIBM (int type, int stride, string pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIndexPointerListIBM (int type, int stride, IntPtr pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ref sbyte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, sbyte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, sbyte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, sbyte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ref ushort pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ushort [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ushort [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ushort [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ref uint pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, uint [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, uint [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, uint [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ref bool pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, bool [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, bool [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ref byte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, byte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, byte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ref short pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, short [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, short [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ref int pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, int [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, int [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ref float pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, float [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, float [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, ref double pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, double [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glIndexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glIndexPointerListIBM (int type, int stride, double [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM")]
    public  IntPtr ext__GL_IBM_vertex_array_lists__glNormalPointerListIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerListIBM (int type, int stride, bool [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerListIBM (int type, int stride, byte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerListIBM (int type, int stride, short [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerListIBM (int type, int stride, int [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerListIBM (int type, int stride, float [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerListIBM (int type, int stride, double [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerListIBM (int type, int stride, string pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointerListIBM (int type, int stride, IntPtr pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ref sbyte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, sbyte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, sbyte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, sbyte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ref ushort pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ushort [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ushort [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ushort [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ref uint pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, uint [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, uint [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, uint [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ref bool pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, bool [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, bool [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ref byte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, byte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, byte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ref short pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, short [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, short [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ref int pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, int [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, int [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ref float pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, float [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, float [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, ref double pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, double [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glNormalPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointerListIBM (int type, int stride, double [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM")]
    public  IntPtr ext__GL_IBM_vertex_array_lists__glTexCoordPointerListIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, bool [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, byte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, short [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, int [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, float [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, double [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, string pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, IntPtr pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ref sbyte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, sbyte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, sbyte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, sbyte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ref ushort pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ushort [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ushort [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ushort [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ref uint pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, uint [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, uint [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, uint [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ref bool pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, bool [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, bool [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ref byte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, byte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, byte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ref short pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, short [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, short [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ref int pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, int [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, int [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ref float pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, float [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, float [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, ref double pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, double [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glTexCoordPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointerListIBM (int size, int type, int stride, double [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM")]
    public  IntPtr ext__GL_IBM_vertex_array_lists__glVertexPointerListIBM = IntPtr.Zero;

    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerListIBM (int size, int type, int stride, bool [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerListIBM (int size, int type, int stride, byte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerListIBM (int size, int type, int stride, short [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerListIBM (int size, int type, int stride, int [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerListIBM (int size, int type, int stride, float [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerListIBM (int size, int type, int stride, double [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerListIBM (int size, int type, int stride, string pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointerListIBM (int size, int type, int stride, IntPtr pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ref sbyte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, sbyte [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, sbyte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, sbyte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ref ushort pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ushort [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ushort [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ushort [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ref uint pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, uint [] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, uint [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, uint [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ref bool pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, bool [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, bool [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ref byte pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, byte [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, byte [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ref short pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, short [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, short [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ref int pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, int [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, int [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ref float pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, float [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, float [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, ref double pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, double [,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_IBM_vertex_array_lists", "glVertexPointerListIBM"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointerListIBM (int size, int type, int stride, double [,,] pointer, int ptrstride) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_INGR_blend_func_separate", "glBlendFuncSeparateINGR")]
    public  IntPtr ext__GL_INGR_blend_func_separate__glBlendFuncSeparateINGR = IntPtr.Zero;

    [OpenGLExtensionImport("GL_INGR_blend_func_separate", "glBlendFuncSeparateINGR"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBlendFuncSeparateINGR (int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL")]
    public  IntPtr ext__GL_INTEL_parallel_arrays__glVertexPointervINTEL = IntPtr.Zero;

    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointervINTEL (int size, int type, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointervINTEL (int size, int type, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointervINTEL (int size, int type, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointervINTEL (int size, int type, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointervINTEL (int size, int type, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointervINTEL (int size, int type, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointervINTEL (int size, int type, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexPointervINTEL (int size, int type, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glVertexPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexPointervINTEL (int size, int type, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL")]
    public  IntPtr ext__GL_INTEL_parallel_arrays__glNormalPointervINTEL = IntPtr.Zero;

    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointervINTEL (int type, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointervINTEL (int type, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointervINTEL (int type, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointervINTEL (int type, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointervINTEL (int type, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointervINTEL (int type, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointervINTEL (int type, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormalPointervINTEL (int type, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glNormalPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormalPointervINTEL (int type, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL")]
    public  IntPtr ext__GL_INTEL_parallel_arrays__glColorPointervINTEL = IntPtr.Zero;

    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointervINTEL (int size, int type, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointervINTEL (int size, int type, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointervINTEL (int size, int type, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointervINTEL (int size, int type, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointervINTEL (int size, int type, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointervINTEL (int size, int type, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointervINTEL (int size, int type, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorPointervINTEL (int size, int type, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glColorPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorPointervINTEL (int size, int type, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL")]
    public  IntPtr ext__GL_INTEL_parallel_arrays__glTexCoordPointervINTEL = IntPtr.Zero;

    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointervINTEL (int size, int type, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointervINTEL (int size, int type, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointervINTEL (int size, int type, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointervINTEL (int size, int type, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointervINTEL (int size, int type, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointervINTEL (int size, int type, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointervINTEL (int size, int type, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoordPointervINTEL (int size, int type, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_INTEL_parallel_arrays", "glTexCoordPointervINTEL"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoordPointervINTEL (int size, int type, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_resize_buffers", "glResizeBuffersMESA")]
    public  IntPtr ext__GL_MESA_resize_buffers__glResizeBuffersMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_resize_buffers", "glResizeBuffersMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glResizeBuffersMESA () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos2dMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2dMESA (double x, double y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dvMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos2dvMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2dvMESA (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2dvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2dvMESA (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos2fMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2fMESA (float x, float y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fvMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos2fvMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2fvMESA (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2fvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2fvMESA (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2iMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos2iMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2iMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2iMESA (int x, int y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2ivMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos2ivMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2ivMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2ivMESA (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2ivMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2ivMESA (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2sMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos2sMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2sMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2sMESA (short x, short y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2svMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos2svMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2svMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2svMESA (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos2svMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2svMESA (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos3dMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3dMESA (double x, double y, double z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dvMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos3dvMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3dvMESA (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3dvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3dvMESA (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos3fMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3fMESA (float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fvMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos3fvMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3fvMESA (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3fvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3fvMESA (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3iMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos3iMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3iMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3iMESA (int x, int y, int z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3ivMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos3ivMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3ivMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3ivMESA (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3ivMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3ivMESA (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3sMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos3sMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3sMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3sMESA (short x, short y, short z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3svMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos3svMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3svMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3svMESA (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos3svMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3svMESA (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos4dMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4dMESA (double x, double y, double z, double w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dvMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos4dvMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4dvMESA (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4dvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4dvMESA (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos4fMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4fMESA (float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fvMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos4fvMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4fvMESA (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4fvMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4fvMESA (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4iMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos4iMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4iMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4iMESA (int x, int y, int z, int w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4ivMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos4ivMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4ivMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4ivMESA (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4ivMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4ivMESA (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4sMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos4sMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4sMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4sMESA (short x, short y, short z, short w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4svMESA")]
    public  IntPtr ext__GL_MESA_window_pos__glWindowPos4svMESA = IntPtr.Zero;

    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4svMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4svMESA (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_MESA_window_pos", "glWindowPos4svMESA"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos4svMESA (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV")]
    public  IntPtr ext__GL_NV_evaluators__glMapControlPointsNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, string points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, string points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, string points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, string points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, IntPtr points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, IntPtr points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref sbyte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref sbyte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref sbyte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref sbyte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, sbyte [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, sbyte [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref ushort points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref ushort points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref ushort points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref ushort points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ushort [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ushort [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref uint points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref uint points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref uint points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref uint points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, uint [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, uint [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref bool points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref bool points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref bool points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref bool points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, bool [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, bool [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref byte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref byte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref byte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref byte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, byte [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, byte [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref short points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref short points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref short points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref short points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, short [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, short [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref int points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref int points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref int points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref int points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, int [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, int [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, float [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, float [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref double points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, ref double points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref double points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, ref double points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double [,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, int packed, double [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double [,,] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int uorder, int vorder, bool packed, double [,,] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterivNV")]
    public  IntPtr ext__GL_NV_evaluators__glMapParameterivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapParameterivNV (int target, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapParameterivNV (int target, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterfvNV")]
    public  IntPtr ext__GL_NV_evaluators__glMapParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapParameterfvNV (int target, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glMapParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMapParameterfvNV (int target, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV")]
    public  IntPtr ext__GL_NV_evaluators__glGetMapControlPointsNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, [Out] bool [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, [Out] bool [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, [Out] bool [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, [Out] bool [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, [Out] byte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, [Out] byte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, [Out] byte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, [Out] byte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, [Out] short [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, [Out] short [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, [Out] short [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, [Out] short [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, [Out] int [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, [Out] int [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, [Out] int [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, [Out] int [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, [Out] float [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, [Out] float [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, [Out] float [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, [Out] float [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, [Out] double [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, [Out] double [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, [Out] double [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, [Out] double [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, IntPtr points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, IntPtr points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, IntPtr points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, IntPtr points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, out bool points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, out bool points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, out bool points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, out bool points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, out byte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, out byte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, out byte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, out byte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, out short points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, out short points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, out short points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, out short points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, out int points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, out int points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, out int points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, out int points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, out float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, out float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, out float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, out float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, out double points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, out double points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, out double points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, out double points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, out sbyte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, out sbyte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, out sbyte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, out sbyte points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, [Out] sbyte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, [Out] sbyte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, [Out] sbyte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, [Out] sbyte [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, out ushort points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, out ushort points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, out ushort points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, out ushort points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, [Out] ushort [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, [Out] ushort [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, [Out] ushort [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, [Out] ushort [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, out uint points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, out uint points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, out uint points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, out uint points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, int packed, [Out] uint [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, int packed, [Out] uint [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, int index, int type, int ustride, int vstride, bool packed, [Out] uint [] points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapControlPointsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapControlPointsNV (int target, uint index, int type, int ustride, int vstride, bool packed, [Out] uint [] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterivNV")]
    public  IntPtr ext__GL_NV_evaluators__glGetMapParameterivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapParameterivNV (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapParameterivNV (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterfvNV")]
    public  IntPtr ext__GL_NV_evaluators__glGetMapParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapParameterfvNV (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapParameterfvNV (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV")]
    public  IntPtr ext__GL_NV_evaluators__glGetMapAttribParameterivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapAttribParameterivNV (int target, int index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapAttribParameterivNV (int target, uint index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapAttribParameterivNV (int target, int index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapAttribParameterivNV (int target, uint index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV")]
    public  IntPtr ext__GL_NV_evaluators__glGetMapAttribParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapAttribParameterfvNV (int target, int index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapAttribParameterfvNV (int target, uint index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMapAttribParameterfvNV (int target, int index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_evaluators", "glGetMapAttribParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMapAttribParameterfvNV (int target, uint index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_evaluators", "glEvalMapsNV")]
    public  IntPtr ext__GL_NV_evaluators__glEvalMapsNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_evaluators", "glEvalMapsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEvalMapsNV (int target, int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV")]
    public  IntPtr ext__GL_NV_fence__glDeleteFencesNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteFencesNV (int n, ref int fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteFencesNV (int n, int [] fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteFencesNV (int n, ref uint fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glDeleteFencesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteFencesNV (int n, uint [] fences) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV")]
    public  IntPtr ext__GL_NV_fence__glGenFencesNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenFencesNV (int n, out int fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenFencesNV (int n, [Out] int [] fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenFencesNV (int n, out uint fences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glGenFencesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenFencesNV (int n, [Out] uint [] fences) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fence", "glIsFenceNV")]
    public  IntPtr ext__GL_NV_fence__glIsFenceNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fence", "glIsFenceNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsFenceNV (int fence) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glIsFenceNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsFenceNV (uint fence) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fence", "glTestFenceNV")]
    public  IntPtr ext__GL_NV_fence__glTestFenceNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fence", "glTestFenceNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glTestFenceNV (int fence) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glTestFenceNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glTestFenceNV (uint fence) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV")]
    public  IntPtr ext__GL_NV_fence__glGetFenceivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFenceivNV (int fence, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetFenceivNV (uint fence, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFenceivNV (int fence, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glGetFenceivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetFenceivNV (uint fence, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fence", "glFinishFenceNV")]
    public  IntPtr ext__GL_NV_fence__glFinishFenceNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fence", "glFinishFenceNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFinishFenceNV (int fence) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glFinishFenceNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFinishFenceNV (uint fence) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fence", "glSetFenceNV")]
    public  IntPtr ext__GL_NV_fence__glSetFenceNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fence", "glSetFenceNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSetFenceNV (int fence, int condition) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fence", "glSetFenceNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSetFenceNV (uint fence, int condition) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fNV")]
    public  IntPtr ext__GL_NV_fragment_program__glProgramNamedParameter4fNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramNamedParameter4fNV (int id, int len, string name, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramNamedParameter4fNV (uint id, int len, string name, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dNV")]
    public  IntPtr ext__GL_NV_fragment_program__glProgramNamedParameter4dNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramNamedParameter4dNV (int id, int len, string name, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramNamedParameter4dNV (uint id, int len, string name, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV")]
    public  IntPtr ext__GL_NV_fragment_program__glProgramNamedParameter4fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramNamedParameter4fvNV (int id, int len, string name, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramNamedParameter4fvNV (uint id, int len, string name, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramNamedParameter4fvNV (int id, int len, string name, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramNamedParameter4fvNV (uint id, int len, string name, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV")]
    public  IntPtr ext__GL_NV_fragment_program__glProgramNamedParameter4dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramNamedParameter4dvNV (int id, int len, string name, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramNamedParameter4dvNV (uint id, int len, string name, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramNamedParameter4dvNV (int id, int len, string name, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glProgramNamedParameter4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramNamedParameter4dvNV (uint id, int len, string name, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV")]
    public  IntPtr ext__GL_NV_fragment_program__glGetProgramNamedParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramNamedParameterfvNV (int id, int len, string name, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramNamedParameterfvNV (uint id, int len, string name, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramNamedParameterfvNV (int id, int len, string name, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramNamedParameterfvNV (uint id, int len, string name, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV")]
    public  IntPtr ext__GL_NV_fragment_program__glGetProgramNamedParameterdvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramNamedParameterdvNV (int id, int len, string name, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramNamedParameterdvNV (uint id, int len, string name, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramNamedParameterdvNV (int id, int len, string name, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_fragment_program", "glGetProgramNamedParameterdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramNamedParameterdvNV (uint id, int len, string name, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV")]
    public  IntPtr ext__GL_NV_half_float__glVertex2hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertex2hNV (short x, short y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex2hNV (ushort x, short y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex2hNV (short x, ushort y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex2hNV (ushort x, ushort y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertex2hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertex2hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertex2hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex2hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex2hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV")]
    public  IntPtr ext__GL_NV_half_float__glVertex3hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertex3hNV (short x, short y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex3hNV (ushort x, short y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex3hNV (short x, ushort y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex3hNV (ushort x, ushort y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex3hNV (short x, short y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex3hNV (ushort x, short y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex3hNV (short x, ushort y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex3hNV (ushort x, ushort y, ushort z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertex3hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertex3hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertex3hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex3hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex3hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV")]
    public  IntPtr ext__GL_NV_half_float__glVertex4hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertex4hNV (short x, short y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (ushort x, short y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (short x, ushort y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (ushort x, ushort y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (short x, short y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (ushort x, short y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (short x, ushort y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (ushort x, ushort y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (short x, short y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (ushort x, short y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (short x, ushort y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (ushort x, ushort y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (short x, short y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (ushort x, short y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (short x, ushort y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hNV (ushort x, ushort y, ushort z, ushort w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertex4hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertex4hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertex4hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertex4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertex4hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV")]
    public  IntPtr ext__GL_NV_half_float__glNormal3hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormal3hNV (short nx, short ny, short nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormal3hNV (ushort nx, short ny, short nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormal3hNV (short nx, ushort ny, short nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormal3hNV (ushort nx, ushort ny, short nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormal3hNV (short nx, short ny, ushort nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormal3hNV (ushort nx, short ny, ushort nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormal3hNV (short nx, ushort ny, ushort nz) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormal3hNV (ushort nx, ushort ny, ushort nz) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV")]
    public  IntPtr ext__GL_NV_half_float__glNormal3hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormal3hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormal3hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormal3hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glNormal3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glNormal3hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV")]
    public  IntPtr ext__GL_NV_half_float__glColor3hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor3hNV (short red, short green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor3hNV (ushort red, short green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor3hNV (short red, ushort green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor3hNV (ushort red, ushort green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor3hNV (short red, short green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor3hNV (ushort red, short green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor3hNV (short red, ushort green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor3hNV (ushort red, ushort green, ushort blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV")]
    public  IntPtr ext__GL_NV_half_float__glColor3hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor3hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor3hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor3hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor3hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV")]
    public  IntPtr ext__GL_NV_half_float__glColor4hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4hNV (short red, short green, short blue, short alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (ushort red, short green, short blue, short alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (short red, ushort green, short blue, short alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (ushort red, ushort green, short blue, short alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (short red, short green, ushort blue, short alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (ushort red, short green, ushort blue, short alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (short red, ushort green, ushort blue, short alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (ushort red, ushort green, ushort blue, short alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (short red, short green, short blue, ushort alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (ushort red, short green, short blue, ushort alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (short red, ushort green, short blue, ushort alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (ushort red, ushort green, short blue, ushort alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (short red, short green, ushort blue, ushort alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (ushort red, short green, ushort blue, ushort alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (short red, ushort green, ushort blue, ushort alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hNV (ushort red, ushort green, ushort blue, ushort alpha) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV")]
    public  IntPtr ext__GL_NV_half_float__glColor4hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glColor4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColor4hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hNV")]
    public  IntPtr ext__GL_NV_half_float__glTexCoord1hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord1hNV (short s) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord1hNV (ushort s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV")]
    public  IntPtr ext__GL_NV_half_float__glTexCoord1hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord1hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord1hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord1hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord1hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV")]
    public  IntPtr ext__GL_NV_half_float__glTexCoord2hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2hNV (short s, short t) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord2hNV (ushort s, short t) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord2hNV (short s, ushort t) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord2hNV (ushort s, ushort t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV")]
    public  IntPtr ext__GL_NV_half_float__glTexCoord2hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord2hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord2hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV")]
    public  IntPtr ext__GL_NV_half_float__glTexCoord3hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord3hNV (short s, short t, short r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord3hNV (ushort s, short t, short r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord3hNV (short s, ushort t, short r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord3hNV (ushort s, ushort t, short r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord3hNV (short s, short t, ushort r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord3hNV (ushort s, short t, ushort r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord3hNV (short s, ushort t, ushort r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord3hNV (ushort s, ushort t, ushort r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV")]
    public  IntPtr ext__GL_NV_half_float__glTexCoord3hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord3hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord3hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord3hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord3hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV")]
    public  IntPtr ext__GL_NV_half_float__glTexCoord4hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4hNV (short s, short t, short r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (ushort s, short t, short r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (short s, ushort t, short r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (ushort s, ushort t, short r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (short s, short t, ushort r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (ushort s, short t, ushort r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (short s, ushort t, ushort r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (ushort s, ushort t, ushort r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (short s, short t, short r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (ushort s, short t, short r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (short s, ushort t, short r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (ushort s, ushort t, short r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (short s, short t, ushort r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (ushort s, short t, ushort r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (short s, ushort t, ushort r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hNV (ushort s, ushort t, ushort r, ushort q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV")]
    public  IntPtr ext__GL_NV_half_float__glTexCoord4hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glTexCoord4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexCoord4hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hNV")]
    public  IntPtr ext__GL_NV_half_float__glMultiTexCoord1hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1hNV (int target, short s) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord1hNV (int target, ushort s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV")]
    public  IntPtr ext__GL_NV_half_float__glMultiTexCoord1hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1hvNV (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1hvNV (int target, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord1hvNV (int target, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord1hvNV (int target, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV")]
    public  IntPtr ext__GL_NV_half_float__glMultiTexCoord2hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2hNV (int target, short s, short t) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord2hNV (int target, ushort s, short t) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord2hNV (int target, short s, ushort t) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord2hNV (int target, ushort s, ushort t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV")]
    public  IntPtr ext__GL_NV_half_float__glMultiTexCoord2hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2hvNV (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2hvNV (int target, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord2hvNV (int target, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord2hvNV (int target, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV")]
    public  IntPtr ext__GL_NV_half_float__glMultiTexCoord3hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3hNV (int target, short s, short t, short r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord3hNV (int target, ushort s, short t, short r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord3hNV (int target, short s, ushort t, short r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord3hNV (int target, ushort s, ushort t, short r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord3hNV (int target, short s, short t, ushort r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord3hNV (int target, ushort s, short t, ushort r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord3hNV (int target, short s, ushort t, ushort r) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord3hNV (int target, ushort s, ushort t, ushort r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV")]
    public  IntPtr ext__GL_NV_half_float__glMultiTexCoord3hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3hvNV (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3hvNV (int target, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord3hvNV (int target, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord3hvNV (int target, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV")]
    public  IntPtr ext__GL_NV_half_float__glMultiTexCoord4hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4hNV (int target, short s, short t, short r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, ushort s, short t, short r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, short s, ushort t, short r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, ushort s, ushort t, short r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, short s, short t, ushort r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, ushort s, short t, ushort r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, short s, ushort t, ushort r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, ushort s, ushort t, ushort r, short q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, short s, short t, short r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, ushort s, short t, short r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, short s, ushort t, short r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, ushort s, ushort t, short r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, short s, short t, ushort r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, ushort s, short t, ushort r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, short s, ushort t, ushort r, ushort q) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hNV (int target, ushort s, ushort t, ushort r, ushort q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV")]
    public  IntPtr ext__GL_NV_half_float__glMultiTexCoord4hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4hvNV (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4hvNV (int target, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hvNV (int target, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glMultiTexCoord4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiTexCoord4hvNV (int target, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhNV")]
    public  IntPtr ext__GL_NV_half_float__glFogCoordhNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordhNV (short fog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordhNV (ushort fog) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV")]
    public  IntPtr ext__GL_NV_half_float__glFogCoordhvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordhvNV (ref short fog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordhvNV (short [] fog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordhvNV (ref ushort fog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glFogCoordhvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordhvNV (ushort [] fog) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV")]
    public  IntPtr ext__GL_NV_half_float__glSecondaryColor3hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3hNV (short red, short green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3hNV (ushort red, short green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3hNV (short red, ushort green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3hNV (ushort red, ushort green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3hNV (short red, short green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3hNV (ushort red, short green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3hNV (short red, ushort green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3hNV (ushort red, ushort green, ushort blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV")]
    public  IntPtr ext__GL_NV_half_float__glSecondaryColor3hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3hvNV (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3hvNV (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3hvNV (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glSecondaryColor3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3hvNV (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexWeighthNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeighthNV (short weight) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeighthNV (ushort weight) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexWeighthvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeighthvNV (ref short weight) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexWeighthvNV (short [] weight) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeighthvNV (ref ushort weight) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexWeighthvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexWeighthvNV (ushort [] weight) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttrib1hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1hNV (int index, short x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1hNV (uint index, short x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1hNV (int index, ushort x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1hNV (uint index, ushort x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttrib1hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1hvNV (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1hvNV (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1hvNV (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1hvNV (uint index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1hvNV (int index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1hvNV (uint index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1hvNV (int index, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1hvNV (uint index, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttrib2hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2hNV (int index, short x, short y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hNV (uint index, short x, short y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hNV (int index, ushort x, short y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hNV (uint index, ushort x, short y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hNV (int index, short x, ushort y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hNV (uint index, short x, ushort y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hNV (int index, ushort x, ushort y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hNV (uint index, ushort x, ushort y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttrib2hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2hvNV (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hvNV (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2hvNV (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hvNV (uint index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hvNV (int index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hvNV (uint index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hvNV (int index, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2hvNV (uint index, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttrib3hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3hNV (int index, short x, short y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (uint index, short x, short y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (int index, ushort x, short y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (uint index, ushort x, short y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (int index, short x, ushort y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (uint index, short x, ushort y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (int index, ushort x, ushort y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (uint index, ushort x, ushort y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (int index, short x, short y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (uint index, short x, short y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (int index, ushort x, short y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (uint index, ushort x, short y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (int index, short x, ushort y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (uint index, short x, ushort y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (int index, ushort x, ushort y, ushort z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hNV (uint index, ushort x, ushort y, ushort z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttrib3hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3hvNV (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hvNV (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3hvNV (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hvNV (uint index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hvNV (int index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hvNV (uint index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hvNV (int index, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3hvNV (uint index, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttrib4hNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4hNV (int index, short x, short y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, short x, short y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, ushort x, short y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, ushort x, short y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, short x, ushort y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, short x, ushort y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, ushort x, ushort y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, ushort x, ushort y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, short x, short y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, short x, short y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, ushort x, short y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, ushort x, short y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, short x, ushort y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, short x, ushort y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, ushort x, ushort y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, ushort x, ushort y, ushort z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, short x, short y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, short x, short y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, ushort x, short y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, ushort x, short y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, short x, ushort y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, short x, ushort y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, ushort x, ushort y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, ushort x, ushort y, short z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, short x, short y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, short x, short y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, ushort x, short y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, ushort x, short y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, short x, ushort y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, short x, ushort y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (int index, ushort x, ushort y, ushort z, ushort w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hNV (uint index, ushort x, ushort y, ushort z, ushort w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttrib4hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4hvNV (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hvNV (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4hvNV (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hvNV (uint index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hvNV (int index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hvNV (uint index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hvNV (int index, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttrib4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4hvNV (uint index, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttribs1hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs1hvNV (int index, int n, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1hvNV (uint index, int n, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs1hvNV (int index, int n, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1hvNV (uint index, int n, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1hvNV (int index, int n, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1hvNV (uint index, int n, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1hvNV (int index, int n, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs1hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1hvNV (uint index, int n, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttribs2hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs2hvNV (int index, int n, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2hvNV (uint index, int n, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs2hvNV (int index, int n, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2hvNV (uint index, int n, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2hvNV (int index, int n, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2hvNV (uint index, int n, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2hvNV (int index, int n, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs2hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2hvNV (uint index, int n, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttribs3hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs3hvNV (int index, int n, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3hvNV (uint index, int n, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs3hvNV (int index, int n, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3hvNV (uint index, int n, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3hvNV (int index, int n, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3hvNV (uint index, int n, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3hvNV (int index, int n, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs3hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3hvNV (uint index, int n, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV")]
    public  IntPtr ext__GL_NV_half_float__glVertexAttribs4hvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4hvNV (int index, int n, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4hvNV (uint index, int n, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4hvNV (int index, int n, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4hvNV (uint index, int n, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4hvNV (int index, int n, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4hvNV (uint index, int n, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4hvNV (int index, int n, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_half_float", "glVertexAttribs4hvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4hvNV (uint index, int n, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV")]
    public  IntPtr ext__GL_NV_occlusion_query__glGenOcclusionQueriesNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenOcclusionQueriesNV (int n, out int ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenOcclusionQueriesNV (int n, [Out] int [] ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenOcclusionQueriesNV (int n, out uint ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGenOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenOcclusionQueriesNV (int n, [Out] uint [] ids) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV")]
    public  IntPtr ext__GL_NV_occlusion_query__glDeleteOcclusionQueriesNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteOcclusionQueriesNV (int n, ref int ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteOcclusionQueriesNV (int n, int [] ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteOcclusionQueriesNV (int n, ref uint ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glDeleteOcclusionQueriesNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteOcclusionQueriesNV (int n, uint [] ids) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glIsOcclusionQueryNV")]
    public  IntPtr ext__GL_NV_occlusion_query__glIsOcclusionQueryNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glIsOcclusionQueryNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsOcclusionQueryNV (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glIsOcclusionQueryNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsOcclusionQueryNV (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glBeginOcclusionQueryNV")]
    public  IntPtr ext__GL_NV_occlusion_query__glBeginOcclusionQueryNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glBeginOcclusionQueryNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBeginOcclusionQueryNV (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glBeginOcclusionQueryNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBeginOcclusionQueryNV (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glEndOcclusionQueryNV")]
    public  IntPtr ext__GL_NV_occlusion_query__glEndOcclusionQueryNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glEndOcclusionQueryNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEndOcclusionQueryNV () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV")]
    public  IntPtr ext__GL_NV_occlusion_query__glGetOcclusionQueryivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetOcclusionQueryivNV (int id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetOcclusionQueryivNV (uint id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetOcclusionQueryivNV (int id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetOcclusionQueryivNV (uint id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV")]
    public  IntPtr ext__GL_NV_occlusion_query__glGetOcclusionQueryuivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetOcclusionQueryuivNV (int id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetOcclusionQueryuivNV (uint id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetOcclusionQueryuivNV (int id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetOcclusionQueryuivNV (uint id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetOcclusionQueryuivNV (int id, int pname, out uint arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetOcclusionQueryuivNV (uint id, int pname, out uint arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetOcclusionQueryuivNV (int id, int pname, [Out] uint [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_occlusion_query", "glGetOcclusionQueryuivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetOcclusionQueryuivNV (uint id, int pname, [Out] uint [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV")]
    public  IntPtr ext__GL_NV_pixel_data_range__glPixelDataRangeNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelDataRangeNV (int target, int length, [Out] bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelDataRangeNV (int target, int length, [Out] byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelDataRangeNV (int target, int length, [Out] short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelDataRangeNV (int target, int length, [Out] int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelDataRangeNV (int target, int length, [Out] float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelDataRangeNV (int target, int length, [Out] double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelDataRangeNV (int target, int length, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, out bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, out byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, out short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, out int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, out float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, out double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, out sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, [Out] sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, out ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, [Out] ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, out uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPixelDataRangeNV (int target, int length, [Out] uint [] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glFlushPixelDataRangeNV")]
    public  IntPtr ext__GL_NV_pixel_data_range__glFlushPixelDataRangeNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_pixel_data_range", "glFlushPixelDataRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushPixelDataRangeNV (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameteriNV")]
    public  IntPtr ext__GL_NV_point_sprite__glPointParameteriNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameteriNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameteriNV (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameterivNV")]
    public  IntPtr ext__GL_NV_point_sprite__glPointParameterivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterivNV (int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_point_sprite", "glPointParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterivNV (int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartNV")]
    public  IntPtr ext__GL_NV_primitive_restart__glPrimitiveRestartNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPrimitiveRestartNV () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartIndexNV")]
    public  IntPtr ext__GL_NV_primitive_restart__glPrimitiveRestartIndexNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartIndexNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPrimitiveRestartIndexNV (int index) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_primitive_restart", "glPrimitiveRestartIndexNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glPrimitiveRestartIndexNV (uint index) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfvNV")]
    public  IntPtr ext__GL_NV_register_combiners__glCombinerParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerParameterfvNV (int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerParameterfvNV (int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfNV")]
    public  IntPtr ext__GL_NV_register_combiners__glCombinerParameterfNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterfNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerParameterfNV (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterivNV")]
    public  IntPtr ext__GL_NV_register_combiners__glCombinerParameterivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerParameterivNV (int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerParameterivNV (int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameteriNV")]
    public  IntPtr ext__GL_NV_register_combiners__glCombinerParameteriNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerParameteriNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerParameteriNV (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerInputNV")]
    public  IntPtr ext__GL_NV_register_combiners__glCombinerInputNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerInputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerInputNV (int stage, int portion, int variable, int input, int mapping, int componentUsage) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV")]
    public  IntPtr ext__GL_NV_register_combiners__glCombinerOutputNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerOutputNV (int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, int cdDotProduct, int muxSum) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCombinerOutputNV (int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, int cdDotProduct, int muxSum) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCombinerOutputNV (int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, bool cdDotProduct, int muxSum) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCombinerOutputNV (int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, bool cdDotProduct, int muxSum) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCombinerOutputNV (int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, int cdDotProduct, bool muxSum) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCombinerOutputNV (int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, int cdDotProduct, bool muxSum) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCombinerOutputNV (int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, bool cdDotProduct, bool muxSum) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glCombinerOutputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCombinerOutputNV (int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, bool abDotProduct, bool cdDotProduct, bool muxSum) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glFinalCombinerInputNV")]
    public  IntPtr ext__GL_NV_register_combiners__glFinalCombinerInputNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glFinalCombinerInputNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFinalCombinerInputNV (int variable, int input, int mapping, int componentUsage) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterfvNV")]
    public  IntPtr ext__GL_NV_register_combiners__glGetCombinerInputParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerInputParameterfvNV (int stage, int portion, int variable, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerInputParameterfvNV (int stage, int portion, int variable, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterivNV")]
    public  IntPtr ext__GL_NV_register_combiners__glGetCombinerInputParameterivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerInputParameterivNV (int stage, int portion, int variable, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerInputParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerInputParameterivNV (int stage, int portion, int variable, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterfvNV")]
    public  IntPtr ext__GL_NV_register_combiners__glGetCombinerOutputParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerOutputParameterfvNV (int stage, int portion, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerOutputParameterfvNV (int stage, int portion, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterivNV")]
    public  IntPtr ext__GL_NV_register_combiners__glGetCombinerOutputParameterivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerOutputParameterivNV (int stage, int portion, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetCombinerOutputParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerOutputParameterivNV (int stage, int portion, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterfvNV")]
    public  IntPtr ext__GL_NV_register_combiners__glGetFinalCombinerInputParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFinalCombinerInputParameterfvNV (int variable, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFinalCombinerInputParameterfvNV (int variable, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterivNV")]
    public  IntPtr ext__GL_NV_register_combiners__glGetFinalCombinerInputParameterivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFinalCombinerInputParameterivNV (int variable, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners", "glGetFinalCombinerInputParameterivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFinalCombinerInputParameterivNV (int variable, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners2", "glCombinerStageParameterfvNV")]
    public  IntPtr ext__GL_NV_register_combiners2__glCombinerStageParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners2", "glCombinerStageParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerStageParameterfvNV (int stage, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners2", "glCombinerStageParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCombinerStageParameterfvNV (int stage, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_register_combiners2", "glGetCombinerStageParameterfvNV")]
    public  IntPtr ext__GL_NV_register_combiners2__glGetCombinerStageParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_register_combiners2", "glGetCombinerStageParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerStageParameterfvNV (int stage, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_register_combiners2", "glGetCombinerStageParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCombinerStageParameterfvNV (int stage, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glFlushVertexArrayRangeNV")]
    public  IntPtr ext__GL_NV_vertex_array_range__glFlushVertexArrayRangeNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glFlushVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushVertexArrayRangeNV () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV")]
    public  IntPtr ext__GL_NV_vertex_array_range__glVertexArrayRangeNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeNV (int length, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeNV (int length, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeNV (int length, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeNV (int length, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeNV (int length, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeNV (int length, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeNV (int length, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexArrayRangeNV (int length, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_array_range", "glVertexArrayRangeNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexArrayRangeNV (int length, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV")]
    public  IntPtr ext__GL_NV_vertex_program__glAreProgramsResidentNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glAreProgramsResidentNV (int n, ref int programs, out int residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glAreProgramsResidentNV (int n, int [] programs, out int residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, ref uint programs, out int residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, uint [] programs, out int residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glAreProgramsResidentNV (int n, ref int programs, [Out] int [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glAreProgramsResidentNV (int n, int [] programs, [Out] int [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, ref uint programs, [Out] int [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, uint [] programs, [Out] int [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, ref int programs, out bool residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, int [] programs, out bool residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, ref uint programs, out bool residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, uint [] programs, out bool residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, ref int programs, [Out] bool [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, int [] programs, [Out] bool [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, ref uint programs, [Out] bool [] residences) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glAreProgramsResidentNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glAreProgramsResidentNV (int n, uint [] programs, [Out] bool [] residences) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glBindProgramNV")]
    public  IntPtr ext__GL_NV_vertex_program__glBindProgramNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glBindProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindProgramNV (int target, int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glBindProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindProgramNV (int target, uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV")]
    public  IntPtr ext__GL_NV_vertex_program__glDeleteProgramsNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteProgramsNV (int n, ref int programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteProgramsNV (int n, int [] programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteProgramsNV (int n, ref uint programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glDeleteProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteProgramsNV (int n, uint [] programs) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV")]
    public  IntPtr ext__GL_NV_vertex_program__glExecuteProgramNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glExecuteProgramNV (int target, int id, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glExecuteProgramNV (int target, uint id, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glExecuteProgramNV (int target, int id, float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glExecuteProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glExecuteProgramNV (int target, uint id, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGenProgramsNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenProgramsNV (int n, out int programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenProgramsNV (int n, [Out] int [] programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenProgramsNV (int n, out uint programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGenProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenProgramsNV (int n, [Out] uint [] programs) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGetProgramParameterdvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramParameterdvNV (int target, int index, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramParameterdvNV (int target, uint index, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramParameterdvNV (int target, int index, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramParameterdvNV (int target, uint index, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGetProgramParameterfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramParameterfvNV (int target, int index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramParameterfvNV (int target, uint index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramParameterfvNV (int target, int index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramParameterfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramParameterfvNV (int target, uint index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGetProgramivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramivNV (int id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramivNV (uint id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramivNV (int id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramivNV (uint id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGetProgramStringNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramStringNV (int id, int pname, out byte program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringNV (uint id, int pname, out byte program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramStringNV (int id, int pname, [Out] byte [] program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetProgramStringNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramStringNV (uint id, int pname, [Out] byte [] program) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGetTrackMatrixivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetTrackMatrixivNV (int target, int address, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetTrackMatrixivNV (int target, uint address, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetTrackMatrixivNV (int target, int address, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetTrackMatrixivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetTrackMatrixivNV (int target, uint address, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGetVertexAttribdvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribdvNV (int index, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribdvNV (uint index, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribdvNV (int index, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribdvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribdvNV (uint index, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGetVertexAttribfvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribfvNV (int index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribfvNV (uint index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribfvNV (int index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribfvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribfvNV (uint index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGetVertexAttribivNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribivNV (int index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribivNV (uint index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribivNV (int index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribivNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribivNV (uint index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV")]
    public  IntPtr ext__GL_NV_vertex_program__glGetVertexAttribPointervNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervNV (int index, int pname, [Out] bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, [Out] bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervNV (int index, int pname, [Out] byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, [Out] byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervNV (int index, int pname, [Out] short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, [Out] short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervNV (int index, int pname, [Out] int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, [Out] int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervNV (int index, int pname, [Out] float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, [Out] float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervNV (int index, int pname, [Out] double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, [Out] double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointervNV (int index, int pname, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, out bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, out bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, out byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, out byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, out short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, out short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, out int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, out int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, out float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, out float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, out double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, out double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, out sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, out sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, [Out] sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, [Out] sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, out ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, out ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, [Out] ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, [Out] ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, out uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, out uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (int index, int pname, [Out] uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glGetVertexAttribPointervNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointervNV (uint index, int pname, [Out] uint [] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glIsProgramNV")]
    public  IntPtr ext__GL_NV_vertex_program__glIsProgramNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glIsProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsProgramNV (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glIsProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsProgramNV (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glLoadProgramNV")]
    public  IntPtr ext__GL_NV_vertex_program__glLoadProgramNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glLoadProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadProgramNV (int target, int id, int len, string program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glLoadProgramNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glLoadProgramNV (int target, uint id, int len, string program) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dNV")]
    public  IntPtr ext__GL_NV_vertex_program__glProgramParameter4dNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameter4dNV (int target, int index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameter4dNV (int target, uint index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glProgramParameter4dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameter4dvNV (int target, int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameter4dvNV (int target, uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameter4dvNV (int target, int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameter4dvNV (int target, uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fNV")]
    public  IntPtr ext__GL_NV_vertex_program__glProgramParameter4fNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameter4fNV (int target, int index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameter4fNV (int target, uint index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glProgramParameter4fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameter4fvNV (int target, int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameter4fvNV (int target, uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameter4fvNV (int target, int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameter4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameter4fvNV (int target, uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glProgramParameters4dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameters4dvNV (int target, int index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4dvNV (int target, uint index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4dvNV (int target, int index, uint count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4dvNV (int target, uint index, uint count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameters4dvNV (int target, int index, int count, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4dvNV (int target, uint index, int count, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4dvNV (int target, int index, uint count, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4dvNV (int target, uint index, uint count, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glProgramParameters4fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameters4fvNV (int target, int index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4fvNV (int target, uint index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4fvNV (int target, int index, uint count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4fvNV (int target, uint index, uint count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glProgramParameters4fvNV (int target, int index, int count, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4fvNV (int target, uint index, int count, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4fvNV (int target, int index, uint count, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glProgramParameters4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glProgramParameters4fvNV (int target, uint index, uint count, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV")]
    public  IntPtr ext__GL_NV_vertex_program__glRequestResidentProgramsNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glRequestResidentProgramsNV (int n, ref int programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glRequestResidentProgramsNV (int n, int [] programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glRequestResidentProgramsNV (int n, ref uint programs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glRequestResidentProgramsNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glRequestResidentProgramsNV (int n, uint [] programs) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glTrackMatrixNV")]
    public  IntPtr ext__GL_NV_vertex_program__glTrackMatrixNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glTrackMatrixNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTrackMatrixNV (int target, int address, int matrix, int transform) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glTrackMatrixNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTrackMatrixNV (int target, uint address, int matrix, int transform) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribPointerNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (int index, int fsize, int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribPointerNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointerNV (uint index, int fsize, int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib1dNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1dNV (int index, double x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1dNV (uint index, double x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib1dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1dvNV (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1dvNV (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1dvNV (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1dvNV (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib1fNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1fNV (int index, float x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1fNV (uint index, float x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib1fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1fvNV (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1fvNV (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1fvNV (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1fvNV (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1sNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib1sNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1sNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1sNV (int index, short x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1sNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1sNV (uint index, short x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib1svNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1svNV (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1svNV (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1svNV (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib1svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1svNV (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib2dNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2dNV (int index, double x, double y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2dNV (uint index, double x, double y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib2dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2dvNV (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2dvNV (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2dvNV (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2dvNV (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib2fNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2fNV (int index, float x, float y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2fNV (uint index, float x, float y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib2fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2fvNV (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2fvNV (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2fvNV (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2fvNV (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2sNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib2sNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2sNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2sNV (int index, short x, short y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2sNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2sNV (uint index, short x, short y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib2svNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2svNV (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2svNV (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2svNV (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib2svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2svNV (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib3dNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3dNV (int index, double x, double y, double z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3dNV (uint index, double x, double y, double z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib3dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3dvNV (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3dvNV (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3dvNV (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3dvNV (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib3fNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3fNV (int index, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3fNV (uint index, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib3fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3fvNV (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3fvNV (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3fvNV (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3fvNV (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3sNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib3sNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3sNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3sNV (int index, short x, short y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3sNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3sNV (uint index, short x, short y, short z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib3svNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3svNV (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3svNV (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3svNV (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib3svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3svNV (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib4dNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4dNV (int index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4dNV (uint index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib4dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4dvNV (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4dvNV (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4dvNV (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4dvNV (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib4fNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4fNV (int index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4fNV (uint index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib4fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4fvNV (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4fvNV (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4fvNV (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4fvNV (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4sNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib4sNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4sNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4sNV (int index, short x, short y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4sNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4sNV (uint index, short x, short y, short z, short w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib4svNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4svNV (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4svNV (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4svNV (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4svNV (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib4ubNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4ubNV (int index, byte x, byte y, byte z, byte w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4ubNV (uint index, byte x, byte y, byte z, byte w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttrib4ubvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4ubvNV (int index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4ubvNV (uint index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4ubvNV (int index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttrib4ubvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4ubvNV (uint index, byte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs1dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs1dvNV (int index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1dvNV (uint index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs1dvNV (int index, int count, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1dvNV (uint index, int count, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs1fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs1fvNV (int index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1fvNV (uint index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs1fvNV (int index, int count, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1fvNV (uint index, int count, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs1svNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs1svNV (int index, int count, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1svNV (uint index, int count, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs1svNV (int index, int count, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs1svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs1svNV (uint index, int count, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs2dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs2dvNV (int index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2dvNV (uint index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs2dvNV (int index, int count, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2dvNV (uint index, int count, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs2fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs2fvNV (int index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2fvNV (uint index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs2fvNV (int index, int count, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2fvNV (uint index, int count, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs2svNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs2svNV (int index, int count, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2svNV (uint index, int count, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs2svNV (int index, int count, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs2svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs2svNV (uint index, int count, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs3dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs3dvNV (int index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3dvNV (uint index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs3dvNV (int index, int count, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3dvNV (uint index, int count, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs3fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs3fvNV (int index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3fvNV (uint index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs3fvNV (int index, int count, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3fvNV (uint index, int count, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs3svNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs3svNV (int index, int count, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3svNV (uint index, int count, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs3svNV (int index, int count, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs3svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs3svNV (uint index, int count, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs4dvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4dvNV (int index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4dvNV (uint index, int count, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4dvNV (int index, int count, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4dvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4dvNV (uint index, int count, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs4fvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4fvNV (int index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4fvNV (uint index, int count, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4fvNV (int index, int count, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4fvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4fvNV (uint index, int count, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs4svNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4svNV (int index, int count, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4svNV (uint index, int count, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4svNV (int index, int count, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4svNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4svNV (uint index, int count, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV")]
    public  IntPtr ext__GL_NV_vertex_program__glVertexAttribs4ubvNV = IntPtr.Zero;

    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4ubvNV (int index, int count, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4ubvNV (uint index, int count, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribs4ubvNV (int index, int count, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_NV_vertex_program", "glVertexAttribs4ubvNV"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribs4ubvNV (uint index, int count, byte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_PGI_misc_hints", "glHintPGI")]
    public  IntPtr ext__GL_PGI_misc_hints__glHintPGI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_PGI_misc_hints", "glHintPGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glHintPGI (int target, int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_detail_texture", "glDetailTexFuncSGIS")]
    public  IntPtr ext__GL_SGIS_detail_texture__glDetailTexFuncSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_detail_texture", "glDetailTexFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDetailTexFuncSGIS (int target, int n, ref float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_detail_texture", "glDetailTexFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDetailTexFuncSGIS (int target, int n, float [] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_detail_texture", "glGetDetailTexFuncSGIS")]
    public  IntPtr ext__GL_SGIS_detail_texture__glGetDetailTexFuncSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_detail_texture", "glGetDetailTexFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetDetailTexFuncSGIS (int target, out float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_detail_texture", "glGetDetailTexFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetDetailTexFuncSGIS (int target, [Out] float [] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_fog_function", "glFogFuncSGIS")]
    public  IntPtr ext__GL_SGIS_fog_function__glFogFuncSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_fog_function", "glFogFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogFuncSGIS (int n, ref float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_fog_function", "glFogFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogFuncSGIS (int n, float [] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_fog_function", "glGetFogFuncSGIS")]
    public  IntPtr ext__GL_SGIS_fog_function__glGetFogFuncSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_fog_function", "glGetFogFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFogFuncSGIS (out float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_fog_function", "glGetFogFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFogFuncSGIS ([Out] float [] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_multisample", "glSampleMaskSGIS")]
    public  IntPtr ext__GL_SGIS_multisample__glSampleMaskSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_multisample", "glSampleMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSampleMaskSGIS (float value, int invert) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_multisample", "glSampleMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSampleMaskSGIS (float value, bool invert) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_multisample", "glSamplePatternSGIS")]
    public  IntPtr ext__GL_SGIS_multisample__glSamplePatternSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_multisample", "glSamplePatternSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSamplePatternSGIS (int pattern) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameteriSGIS")]
    public  IntPtr ext__GL_SGIS_pixel_texture__glPixelTexGenParameteriSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameteriSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTexGenParameteriSGIS (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterivSGIS")]
    public  IntPtr ext__GL_SGIS_pixel_texture__glPixelTexGenParameterivSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterivSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTexGenParameterivSGIS (int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterivSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTexGenParameterivSGIS (int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfSGIS")]
    public  IntPtr ext__GL_SGIS_pixel_texture__glPixelTexGenParameterfSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTexGenParameterfSGIS (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfvSGIS")]
    public  IntPtr ext__GL_SGIS_pixel_texture__glPixelTexGenParameterfvSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfvSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTexGenParameterfvSGIS (int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glPixelTexGenParameterfvSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTexGenParameterfvSGIS (int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterivSGIS")]
    public  IntPtr ext__GL_SGIS_pixel_texture__glGetPixelTexGenParameterivSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterivSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPixelTexGenParameterivSGIS (int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterivSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPixelTexGenParameterivSGIS (int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterfvSGIS")]
    public  IntPtr ext__GL_SGIS_pixel_texture__glGetPixelTexGenParameterfvSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterfvSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPixelTexGenParameterfvSGIS (int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_pixel_texture", "glGetPixelTexGenParameterfvSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetPixelTexGenParameterfvSGIS (int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfSGIS")]
    public  IntPtr ext__GL_SGIS_point_parameters__glPointParameterfSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfSGIS (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfvSGIS")]
    public  IntPtr ext__GL_SGIS_point_parameters__glPointParameterfvSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfvSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfvSGIS (int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_point_parameters", "glPointParameterfvSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfvSGIS (int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glSharpenTexFuncSGIS")]
    public  IntPtr ext__GL_SGIS_sharpen_texture__glSharpenTexFuncSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glSharpenTexFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSharpenTexFuncSGIS (int target, int n, ref float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glSharpenTexFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSharpenTexFuncSGIS (int target, int n, float [] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glGetSharpenTexFuncSGIS")]
    public  IntPtr ext__GL_SGIS_sharpen_texture__glGetSharpenTexFuncSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glGetSharpenTexFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetSharpenTexFuncSGIS (int target, out float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_sharpen_texture", "glGetSharpenTexFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetSharpenTexFuncSGIS (int target, [Out] float [] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS")]
    public  IntPtr ext__GL_SGIS_texture4D__glTexImage4DSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, bool [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, byte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, short [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, int [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, float [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, double [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, string pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, IntPtr pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref sbyte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, sbyte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, sbyte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, sbyte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref ushort pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ushort [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ushort [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ushort [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref uint pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, uint [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, uint [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, uint [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref bool pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, bool [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, bool [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref byte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, byte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, byte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref short pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, short [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, short [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref int pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, int [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, int [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref float pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, float [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, float [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, ref double pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, double [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage4DSGIS (int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, double [,,] pixels) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS")]
    public  IntPtr ext__GL_SGIS_texture4D__glTexSubImage4DSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, bool [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, byte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, short [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, int [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, float [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, double [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, string pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, IntPtr pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref sbyte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, sbyte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, sbyte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, sbyte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref ushort pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ushort [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ushort [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ushort [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref uint pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, uint [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, uint [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, uint [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref bool pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, bool [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, bool [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref byte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, byte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, byte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref short pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, short [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, short [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref int pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, int [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, int [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref float pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, float [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, float [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, ref double pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, double [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture4D", "glTexSubImage4DSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage4DSGIS (int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, double [,,] pixels) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS")]
    public  IntPtr ext__GL_SGIS_texture_color_mask__glTextureColorMaskSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTextureColorMaskSGIS (int red, int green, int blue, int alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (bool red, int green, int blue, int alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (int red, bool green, int blue, int alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (bool red, bool green, int blue, int alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (int red, int green, bool blue, int alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (bool red, int green, bool blue, int alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (int red, bool green, bool blue, int alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (bool red, bool green, bool blue, int alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (int red, int green, int blue, bool alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (bool red, int green, int blue, bool alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (int red, bool green, int blue, bool alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (bool red, bool green, int blue, bool alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (int red, int green, bool blue, bool alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (bool red, int green, bool blue, bool alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (int red, bool green, bool blue, bool alpha) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_color_mask", "glTextureColorMaskSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTextureColorMaskSGIS (bool red, bool green, bool blue, bool alpha) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glGetTexFilterFuncSGIS")]
    public  IntPtr ext__GL_SGIS_texture_filter4__glGetTexFilterFuncSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glGetTexFilterFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetTexFilterFuncSGIS (int target, int filter, out float weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glGetTexFilterFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetTexFilterFuncSGIS (int target, int filter, [Out] float [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glTexFilterFuncSGIS")]
    public  IntPtr ext__GL_SGIS_texture_filter4__glTexFilterFuncSGIS = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glTexFilterFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexFilterFuncSGIS (int target, int filter, int n, ref float weights) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIS_texture_filter4", "glTexFilterFuncSGIS"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexFilterFuncSGIS (int target, int filter, int n, float [] weights) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_async", "glAsyncMarkerSGIX")]
    public  IntPtr ext__GL_SGIX_async__glAsyncMarkerSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_async", "glAsyncMarkerSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glAsyncMarkerSGIX (int marker) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_async", "glAsyncMarkerSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glAsyncMarkerSGIX (uint marker) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX")]
    public  IntPtr ext__GL_SGIX_async__glFinishAsyncSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glFinishAsyncSGIX (out int markerp) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glFinishAsyncSGIX ([Out] int [] markerp) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glFinishAsyncSGIX (out uint markerp) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_async", "glFinishAsyncSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glFinishAsyncSGIX ([Out] uint [] markerp) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX")]
    public  IntPtr ext__GL_SGIX_async__glPollAsyncSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glPollAsyncSGIX (out int markerp) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glPollAsyncSGIX ([Out] int [] markerp) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glPollAsyncSGIX (out uint markerp) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_async", "glPollAsyncSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glPollAsyncSGIX ([Out] uint [] markerp) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_async", "glGenAsyncMarkersSGIX")]
    public  IntPtr ext__GL_SGIX_async__glGenAsyncMarkersSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_async", "glGenAsyncMarkersSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGenAsyncMarkersSGIX (int range) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_async", "glDeleteAsyncMarkersSGIX")]
    public  IntPtr ext__GL_SGIX_async__glDeleteAsyncMarkersSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_async", "glDeleteAsyncMarkersSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteAsyncMarkersSGIX (int marker, int range) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_async", "glDeleteAsyncMarkersSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteAsyncMarkersSGIX (uint marker, int range) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_async", "glIsAsyncMarkerSGIX")]
    public  IntPtr ext__GL_SGIX_async__glIsAsyncMarkerSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_async", "glIsAsyncMarkerSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsAsyncMarkerSGIX (int marker) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_async", "glIsAsyncMarkerSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsAsyncMarkerSGIX (uint marker) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_flush_raster", "glFlushRasterSGIX")]
    public  IntPtr ext__GL_SGIX_flush_raster__glFlushRasterSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_flush_raster", "glFlushRasterSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFlushRasterSGIX () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentColorMaterialSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentColorMaterialSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentColorMaterialSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentColorMaterialSGIX (int face, int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightfSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightfSGIX (int light, int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfvSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightfvSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightfvSGIX (int light, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightfvSGIX (int light, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightiSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightiSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightiSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightiSGIX (int light, int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightivSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightivSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightivSGIX (int light, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightivSGIX (int light, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightModelfSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightModelfSGIX (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfvSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightModelfvSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightModelfvSGIX (int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightModelfvSGIX (int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModeliSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightModeliSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModeliSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightModeliSGIX (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelivSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentLightModelivSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightModelivSGIX (int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentLightModelivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentLightModelivSGIX (int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentMaterialfSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentMaterialfSGIX (int face, int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfvSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentMaterialfvSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentMaterialfvSGIX (int face, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentMaterialfvSGIX (int face, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialiSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentMaterialiSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialiSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentMaterialiSGIX (int face, int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialivSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glFragmentMaterialivSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentMaterialivSGIX (int face, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glFragmentMaterialivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFragmentMaterialivSGIX (int face, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightfvSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glGetFragmentLightfvSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFragmentLightfvSGIX (int light, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFragmentLightfvSGIX (int light, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightivSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glGetFragmentLightivSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFragmentLightivSGIX (int light, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentLightivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFragmentLightivSGIX (int light, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialfvSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glGetFragmentMaterialfvSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFragmentMaterialfvSGIX (int face, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFragmentMaterialfvSGIX (int face, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialivSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glGetFragmentMaterialivSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFragmentMaterialivSGIX (int face, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glGetFragmentMaterialivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetFragmentMaterialivSGIX (int face, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glLightEnviSGIX")]
    public  IntPtr ext__GL_SGIX_fragment_lighting__glLightEnviSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_fragment_lighting", "glLightEnviSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLightEnviSGIX (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_framezoom", "glFrameZoomSGIX")]
    public  IntPtr ext__GL_SGIX_framezoom__glFrameZoomSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_framezoom", "glFrameZoomSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFrameZoomSGIX (int factor) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_igloo_interface", "glIglooInterfaceSGIX")]
    public  IntPtr ext__GL_SGIX_igloo_interface__glIglooInterfaceSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_igloo_interface", "glIglooInterfaceSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIglooInterfaceSGIX (int pname, ref IntPtr arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_igloo_interface", "glIglooInterfaceSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glIglooInterfaceSGIX (int pname, IntPtr [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_instruments", "glGetInstrumentsSGIX")]
    public  IntPtr ext__GL_SGIX_instruments__glGetInstrumentsSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_instruments", "glGetInstrumentsSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGetInstrumentsSGIX () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_instruments", "glInstrumentsBufferSGIX")]
    public  IntPtr ext__GL_SGIX_instruments__glInstrumentsBufferSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_instruments", "glInstrumentsBufferSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glInstrumentsBufferSGIX (int size, out int buffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_instruments", "glInstrumentsBufferSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glInstrumentsBufferSGIX (int size, [Out] int [] buffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_instruments", "glPollInstrumentsSGIX")]
    public  IntPtr ext__GL_SGIX_instruments__glPollInstrumentsSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_instruments", "glPollInstrumentsSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glPollInstrumentsSGIX (out int marker_p) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_instruments", "glPollInstrumentsSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glPollInstrumentsSGIX ([Out] int [] marker_p) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_instruments", "glReadInstrumentsSGIX")]
    public  IntPtr ext__GL_SGIX_instruments__glReadInstrumentsSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_instruments", "glReadInstrumentsSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReadInstrumentsSGIX (int marker) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_instruments", "glStartInstrumentsSGIX")]
    public  IntPtr ext__GL_SGIX_instruments__glStartInstrumentsSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_instruments", "glStartInstrumentsSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStartInstrumentsSGIX () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_instruments", "glStopInstrumentsSGIX")]
    public  IntPtr ext__GL_SGIX_instruments__glStopInstrumentsSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_instruments", "glStopInstrumentsSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStopInstrumentsSGIX (int marker) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX")]
    public  IntPtr ext__GL_SGIX_list_priority__glGetListParameterfvSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetListParameterfvSGIX (int list, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetListParameterfvSGIX (uint list, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetListParameterfvSGIX (int list, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetListParameterfvSGIX (uint list, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX")]
    public  IntPtr ext__GL_SGIX_list_priority__glGetListParameterivSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetListParameterivSGIX (int list, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetListParameterivSGIX (uint list, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetListParameterivSGIX (int list, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glGetListParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetListParameterivSGIX (uint list, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfSGIX")]
    public  IntPtr ext__GL_SGIX_list_priority__glListParameterfSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glListParameterfSGIX (int list, int pname, float param) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glListParameterfSGIX (uint list, int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX")]
    public  IntPtr ext__GL_SGIX_list_priority__glListParameterfvSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glListParameterfvSGIX (int list, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glListParameterfvSGIX (uint list, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glListParameterfvSGIX (int list, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glListParameterfvSGIX (uint list, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameteriSGIX")]
    public  IntPtr ext__GL_SGIX_list_priority__glListParameteriSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameteriSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glListParameteriSGIX (int list, int pname, int param) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameteriSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glListParameteriSGIX (uint list, int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX")]
    public  IntPtr ext__GL_SGIX_list_priority__glListParameterivSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glListParameterivSGIX (int list, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glListParameterivSGIX (uint list, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glListParameterivSGIX (int list, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_list_priority", "glListParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glListParameterivSGIX (uint list, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_pixel_texture", "glPixelTexGenSGIX")]
    public  IntPtr ext__GL_SGIX_pixel_texture__glPixelTexGenSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_pixel_texture", "glPixelTexGenSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPixelTexGenSGIX (int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3dSGIX")]
    public  IntPtr ext__GL_SGIX_polynomial_ffd__glDeformationMap3dSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3dSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeformationMap3dSGIX (int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ref double points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3dSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeformationMap3dSGIX (int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double [] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3fSGIX")]
    public  IntPtr ext__GL_SGIX_polynomial_ffd__glDeformationMap3fSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3fSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeformationMap3fSGIX (int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ref float points) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformationMap3fSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeformationMap3fSGIX (int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float [] points) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformSGIX")]
    public  IntPtr ext__GL_SGIX_polynomial_ffd__glDeformSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeformSGIX (int mask) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glDeformSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeformSGIX (uint mask) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glLoadIdentityDeformationMapSGIX")]
    public  IntPtr ext__GL_SGIX_polynomial_ffd__glLoadIdentityDeformationMapSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glLoadIdentityDeformationMapSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadIdentityDeformationMapSGIX (int mask) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_polynomial_ffd", "glLoadIdentityDeformationMapSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glLoadIdentityDeformationMapSGIX (uint mask) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_reference_plane", "glReferencePlaneSGIX")]
    public  IntPtr ext__GL_SGIX_reference_plane__glReferencePlaneSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_reference_plane", "glReferencePlaneSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReferencePlaneSGIX (ref double equation) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_reference_plane", "glReferencePlaneSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReferencePlaneSGIX (double [] equation) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfSGIX")]
    public  IntPtr ext__GL_SGIX_sprite__glSpriteParameterfSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSpriteParameterfSGIX (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfvSGIX")]
    public  IntPtr ext__GL_SGIX_sprite__glSpriteParameterfvSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSpriteParameterfvSGIX (int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterfvSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSpriteParameterfvSGIX (int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameteriSGIX")]
    public  IntPtr ext__GL_SGIX_sprite__glSpriteParameteriSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameteriSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSpriteParameteriSGIX (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterivSGIX")]
    public  IntPtr ext__GL_SGIX_sprite__glSpriteParameterivSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSpriteParameterivSGIX (int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGIX_sprite", "glSpriteParameterivSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSpriteParameterivSGIX (int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGIX_tag_sample_buffer", "glTagSampleBufferSGIX")]
    public  IntPtr ext__GL_SGIX_tag_sample_buffer__glTagSampleBufferSGIX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGIX_tag_sample_buffer", "glTagSampleBufferSGIX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTagSampleBufferSGIX () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI")]
    public  IntPtr ext__GL_SGI_color_table__glColorTableSGI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, bool [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, byte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, short [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, int [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, float [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, double [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, string table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, IntPtr table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ref sbyte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, sbyte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, sbyte [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, sbyte [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ref ushort table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ushort [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ushort [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ushort [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ref uint table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, uint [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, uint [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, uint [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ref bool table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, bool [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, bool [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ref byte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, byte [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, byte [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ref short table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, short [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, short [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ref int table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, int [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, int [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ref float table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, float [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, float [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, ref double table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, double [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTableSGI (int target, int internalformat, int width, int format, int type, double [,,] table) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterfvSGI")]
    public  IntPtr ext__GL_SGI_color_table__glColorTableParameterfvSGI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterfvSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableParameterfvSGI (int target, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterfvSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableParameterfvSGI (int target, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterivSGI")]
    public  IntPtr ext__GL_SGI_color_table__glColorTableParameterivSGI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterivSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableParameterivSGI (int target, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glColorTableParameterivSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableParameterivSGI (int target, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGI_color_table", "glCopyColorTableSGI")]
    public  IntPtr ext__GL_SGI_color_table__glCopyColorTableSGI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGI_color_table", "glCopyColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyColorTableSGI (int target, int internalformat, int x, int y, int width) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI")]
    public  IntPtr ext__GL_SGI_color_table__glGetColorTableSGI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableSGI (int target, int format, int type, [Out] bool [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableSGI (int target, int format, int type, [Out] byte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableSGI (int target, int format, int type, [Out] short [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableSGI (int target, int format, int type, [Out] int [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableSGI (int target, int format, int type, [Out] float [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableSGI (int target, int format, int type, [Out] double [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableSGI (int target, int format, int type, IntPtr table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, out bool table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, out byte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, out short table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, out int table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, out float table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, out double table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, out sbyte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, [Out] sbyte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, out ushort table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, [Out] ushort [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, out uint table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTableSGI (int target, int format, int type, [Out] uint [] table) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterfvSGI")]
    public  IntPtr ext__GL_SGI_color_table__glGetColorTableParameterfvSGI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterfvSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterfvSGI (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterfvSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterfvSGI (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterivSGI")]
    public  IntPtr ext__GL_SGI_color_table__glGetColorTableParameterivSGI = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterivSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterivSGI (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SGI_color_table", "glGetColorTableParameterivSGI"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterivSGI (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUNX_constant_data", "glFinishTextureSUNX")]
    public  IntPtr ext__GL_SUNX_constant_data__glFinishTextureSUNX = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUNX_constant_data", "glFinishTextureSUNX"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFinishTextureSUNX () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorbSUN")]
    public  IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorbSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorbSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGlobalAlphaFactorbSUN (byte factor) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorbSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGlobalAlphaFactorbSUN (sbyte factor) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorsSUN")]
    public  IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorsSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorsSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGlobalAlphaFactorsSUN (short factor) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoriSUN")]
    public  IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactoriSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoriSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGlobalAlphaFactoriSUN (int factor) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorfSUN")]
    public  IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorfSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorfSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGlobalAlphaFactorfSUN (float factor) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactordSUN")]
    public  IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactordSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactordSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGlobalAlphaFactordSUN (double factor) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorubSUN")]
    public  IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorubSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorubSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGlobalAlphaFactorubSUN (byte factor) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorusSUN")]
    public  IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactorusSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorusSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGlobalAlphaFactorusSUN (short factor) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactorusSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGlobalAlphaFactorusSUN (ushort factor) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoruiSUN")]
    public  IntPtr ext__GL_SUN_global_alpha__glGlobalAlphaFactoruiSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoruiSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGlobalAlphaFactoruiSUN (int factor) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_global_alpha", "glGlobalAlphaFactoruiSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGlobalAlphaFactoruiSUN (uint factor) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_mesh_array", "glDrawMeshArraysSUN")]
    public  IntPtr ext__GL_SUN_mesh_array__glDrawMeshArraysSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_mesh_array", "glDrawMeshArraysSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawMeshArraysSUN (int mode, int first, int count, int width) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuiSUN")]
    public  IntPtr ext__GL_SUN_triangle_list__glReplacementCodeuiSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuiSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiSUN (int code) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuiSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiSUN (uint code) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusSUN")]
    public  IntPtr ext__GL_SUN_triangle_list__glReplacementCodeusSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeusSUN (short code) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeusSUN (ushort code) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubSUN")]
    public  IntPtr ext__GL_SUN_triangle_list__glReplacementCodeubSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeubSUN (byte code) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN")]
    public  IntPtr ext__GL_SUN_triangle_list__glReplacementCodeuivSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuivSUN (ref int code) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuivSUN (int [] code) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuivSUN (ref uint code) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeuivSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuivSUN (uint [] code) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN")]
    public  IntPtr ext__GL_SUN_triangle_list__glReplacementCodeusvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeusvSUN (ref short code) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeusvSUN (short [] code) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeusvSUN (ref ushort code) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeusvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeusvSUN (ushort [] code) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubvSUN")]
    public  IntPtr ext__GL_SUN_triangle_list__glReplacementCodeubvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeubvSUN (ref byte code) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodeubvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeubvSUN (byte [] code) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN")]
    public  IntPtr ext__GL_SUN_triangle_list__glReplacementCodePointerSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodePointerSUN (int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodePointerSUN (int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodePointerSUN (int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodePointerSUN (int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodePointerSUN (int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodePointerSUN (int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodePointerSUN (int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodePointerSUN (int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_triangle_list", "glReplacementCodePointerSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodePointerSUN (int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glColor4ubVertex2fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex2fSUN (byte r, byte g, byte b, byte a, float x, float y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glColor4ubVertex2fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex2fvSUN (ref byte c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex2fvSUN (byte [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex2fvSUN (ref byte c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex2fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex2fvSUN (byte [] c, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glColor4ubVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex3fSUN (byte r, byte g, byte b, byte a, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glColor4ubVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex3fvSUN (ref byte c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex3fvSUN (byte [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex3fvSUN (ref byte c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4ubVertex3fvSUN (byte [] c, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glColor3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor3fVertex3fSUN (float r, float g, float b, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glColor3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor3fVertex3fvSUN (ref float c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor3fVertex3fvSUN (float [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor3fVertex3fvSUN (ref float c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor3fVertex3fvSUN (float [] c, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glNormal3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormal3fVertex3fSUN (float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glNormal3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormal3fVertex3fvSUN (ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormal3fVertex3fvSUN (float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormal3fVertex3fvSUN (ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glNormal3fVertex3fvSUN (float [] n, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glColor4fNormal3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4fNormal3fVertex3fSUN (float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glColor4fNormal3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4fNormal3fVertex3fvSUN (ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4fNormal3fVertex3fvSUN (float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4fNormal3fVertex3fvSUN (ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4fNormal3fVertex3fvSUN (float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4fNormal3fVertex3fvSUN (ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4fNormal3fVertex3fvSUN (float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4fNormal3fVertex3fvSUN (ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColor4fNormal3fVertex3fvSUN (float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fVertex3fSUN (float s, float t, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fVertex3fvSUN (ref float tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fVertex3fvSUN (float [] tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fVertex3fvSUN (ref float tc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fVertex3fvSUN (float [] tc, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord4fVertex4fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fVertex4fSUN (float s, float t, float p, float q, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord4fVertex4fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fVertex4fvSUN (ref float tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fVertex4fvSUN (float [] tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fVertex4fvSUN (ref float tc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fVertex4fvSUN (float [] tc, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fColor4ubVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4ubVertex3fSUN (float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fColor4ubVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4ubVertex3fvSUN (ref float tc, ref byte c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4ubVertex3fvSUN (float [] tc, ref byte c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4ubVertex3fvSUN (ref float tc, byte [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4ubVertex3fvSUN (float [] tc, byte [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4ubVertex3fvSUN (ref float tc, ref byte c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4ubVertex3fvSUN (float [] tc, ref byte c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4ubVertex3fvSUN (ref float tc, byte [] c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4ubVertex3fvSUN (float [] tc, byte [] c, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fColor3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor3fVertex3fSUN (float s, float t, float r, float g, float b, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fColor3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor3fVertex3fvSUN (ref float tc, ref float c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor3fVertex3fvSUN (float [] tc, ref float c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor3fVertex3fvSUN (ref float tc, float [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor3fVertex3fvSUN (float [] tc, float [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor3fVertex3fvSUN (ref float tc, ref float c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor3fVertex3fvSUN (float [] tc, ref float c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor3fVertex3fvSUN (ref float tc, float [] c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor3fVertex3fvSUN (float [] tc, float [] c, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fNormal3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fNormal3fVertex3fSUN (float s, float t, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fNormal3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fNormal3fVertex3fvSUN (ref float tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fNormal3fVertex3fvSUN (float [] tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fNormal3fVertex3fvSUN (ref float tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fNormal3fVertex3fvSUN (float [] tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fNormal3fVertex3fvSUN (ref float tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fNormal3fVertex3fvSUN (float [] tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fNormal3fVertex3fvSUN (ref float tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fNormal3fVertex3fvSUN (float [] tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fColor4fNormal3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fSUN (float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord2fColor4fNormal3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (ref float tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (float [] tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (ref float tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (float [] tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (ref float tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (float [] tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (ref float tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (float [] tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (ref float tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (float [] tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (ref float tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (float [] tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (ref float tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (float [] tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (ref float tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord2fColor4fNormal3fVertex3fvSUN (float [] tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord4fColor4fNormal3fVertex4fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fSUN (float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glTexCoord4fColor4fNormal3fVertex4fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (ref float tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (float [] tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (ref float tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (float [] tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (ref float tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (float [] tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (ref float tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (float [] tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (ref float tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (float [] tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (ref float tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (float [] tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (ref float tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (float [] tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (ref float tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glTexCoord4fColor4fNormal3fVertex4fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexCoord4fColor4fNormal3fVertex4fvSUN (float [] tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiVertex3fSUN (int rc, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiVertex3fSUN (uint rc, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiVertex3fvSUN (ref int rc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiVertex3fvSUN (int [] rc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiVertex3fvSUN (ref uint rc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiVertex3fvSUN (uint [] rc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiVertex3fvSUN (ref int rc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiVertex3fvSUN (int [] rc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiVertex3fvSUN (ref uint rc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiVertex3fvSUN (uint [] rc, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor4ubVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4ubVertex3fSUN (int rc, byte r, byte g, byte b, byte a, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4ubVertex3fSUN (uint rc, byte r, byte g, byte b, byte a, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor4ubVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (ref int rc, ref byte c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (int [] rc, ref byte c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (ref uint rc, ref byte c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (uint [] rc, ref byte c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (ref int rc, byte [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (int [] rc, byte [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (ref uint rc, byte [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (uint [] rc, byte [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (ref int rc, ref byte c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (int [] rc, ref byte c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (ref uint rc, ref byte c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (uint [] rc, ref byte c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (ref int rc, byte [] c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (int [] rc, byte [] c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (ref uint rc, byte [] c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4ubVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4ubVertex3fvSUN (uint [] rc, byte [] c, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor3fVertex3fSUN (int rc, float r, float g, float b, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor3fVertex3fSUN (uint rc, float r, float g, float b, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (ref int rc, ref float c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (int [] rc, ref float c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (ref uint rc, ref float c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (uint [] rc, ref float c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (ref int rc, float [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (int [] rc, float [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (ref uint rc, float [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (uint [] rc, float [] c, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (ref int rc, ref float c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (int [] rc, ref float c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (ref uint rc, ref float c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (uint [] rc, ref float c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (ref int rc, float [] c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (int [] rc, float [] c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (ref uint rc, float [] c, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor3fVertex3fvSUN (uint [] rc, float [] c, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiNormal3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiNormal3fVertex3fSUN (int rc, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiNormal3fVertex3fSUN (uint rc, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiNormal3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (ref int rc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (int [] rc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (ref uint rc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (uint [] rc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (ref int rc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (int [] rc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (ref uint rc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (uint [] rc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (ref int rc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (int [] rc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (ref uint rc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (uint [] rc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (ref int rc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (int [] rc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (ref uint rc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiNormal3fVertex3fvSUN (uint [] rc, float [] n, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor4fNormal3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fSUN (int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fSUN (uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiColor4fNormal3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref int rc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (int [] rc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref uint rc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (uint [] rc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref int rc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (int [] rc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref uint rc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (uint [] rc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref int rc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (int [] rc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref uint rc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (uint [] rc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref int rc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (int [] rc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref uint rc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (uint [] rc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref int rc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (int [] rc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref uint rc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (uint [] rc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref int rc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (int [] rc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref uint rc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (uint [] rc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref int rc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (int [] rc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref uint rc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (uint [] rc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref int rc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (int [] rc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (ref uint rc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (uint [] rc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fVertex3fSUN (int rc, float s, float t, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fVertex3fSUN (uint rc, float s, float t, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (ref int rc, ref float tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (int [] rc, ref float tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (ref uint rc, ref float tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (uint [] rc, ref float tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (ref int rc, float [] tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (int [] rc, float [] tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (ref uint rc, float [] tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (uint [] rc, float [] tc, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (ref int rc, ref float tc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (int [] rc, ref float tc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (ref uint rc, ref float tc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (uint [] rc, ref float tc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (ref int rc, float [] tc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (int [] rc, float [] tc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (ref uint rc, float [] tc, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fVertex3fvSUN (uint [] rc, float [] tc, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref int rc, ref float tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (int [] rc, ref float tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref uint rc, ref float tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (uint [] rc, ref float tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref int rc, float [] tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (int [] rc, float [] tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref uint rc, float [] tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (uint [] rc, float [] tc, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref int rc, ref float tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (int [] rc, ref float tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref uint rc, ref float tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (uint [] rc, ref float tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref int rc, float [] tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (int [] rc, float [] tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref uint rc, float [] tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (uint [] rc, float [] tc, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref int rc, ref float tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (int [] rc, ref float tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref uint rc, ref float tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (uint [] rc, ref float tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref int rc, float [] tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (int [] rc, float [] tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref uint rc, float [] tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (uint [] rc, float [] tc, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref int rc, ref float tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (int [] rc, ref float tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref uint rc, ref float tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (uint [] rc, ref float tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref int rc, float [] tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (int [] rc, float [] tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (ref uint rc, float [] tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (uint [] rc, float [] tc, float [] n, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
    public  IntPtr ext__GL_SUN_vertex__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = IntPtr.Zero;

    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, ref float tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, ref float tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, ref float tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, ref float tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, float [] tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, float [] tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, float [] tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, float [] tc, ref float c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, ref float tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, ref float tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, ref float tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, ref float tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, float [] tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, float [] tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, float [] tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, float [] tc, float [] c, ref float n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, ref float tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, ref float tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, ref float tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, ref float tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, float [] tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, float [] tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, float [] tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, float [] tc, ref float c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, ref float tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, ref float tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, ref float tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, ref float tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, float [] tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, float [] tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, float [] tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, float [] tc, float [] c, float [] n, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, ref float tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, ref float tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, ref float tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, ref float tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, float [] tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, float [] tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, float [] tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, float [] tc, ref float c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, ref float tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, ref float tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, ref float tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, ref float tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, float [] tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, float [] tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, float [] tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, float [] tc, float [] c, ref float n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, ref float tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, ref float tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, ref float tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, ref float tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, float [] tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, float [] tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, float [] tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, float [] tc, ref float c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, ref float tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, ref float tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, ref float tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, ref float tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref int rc, float [] tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (int [] rc, float [] tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (ref uint rc, float [] tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_SUN_vertex", "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (uint [] rc, float [] tc, float [] c, float [] n, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glBlendColor")]
    public  IntPtr ext__GL_VERSION_1_2__glBlendColor = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glBlendColor"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBlendColor (float red, float green, float blue, float alpha) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glBlendEquation")]
    public  IntPtr ext__GL_VERSION_1_2__glBlendEquation = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glBlendEquation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBlendEquation (int mode) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements")]
    public  IntPtr ext__GL_VERSION_1_2__glDrawRangeElements = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, bool [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, bool [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, bool [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, bool [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, byte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, byte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, byte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, byte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, short [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, short [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, short [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, short [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, int [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, int [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, int [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, int [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, float [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, float [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, float [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, float [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, double [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, double [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, double [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, double [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, string indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, string indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, string indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, string indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, IntPtr indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, IntPtr indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, IntPtr indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, IntPtr indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ref sbyte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ref sbyte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ref sbyte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ref sbyte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, sbyte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, sbyte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, sbyte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, sbyte [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, sbyte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, sbyte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, sbyte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, sbyte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, sbyte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, sbyte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, sbyte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, sbyte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ref ushort indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ref ushort indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ref ushort indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ref ushort indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ushort [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ushort [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ushort [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ushort [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ushort [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ushort [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ushort [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ushort [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ushort [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ushort [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ushort [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ushort [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ref uint indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ref uint indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ref uint indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ref uint indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, uint [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, uint [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, uint [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, uint [] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, uint [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, uint [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, uint [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, uint [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, uint [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, uint [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, uint [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, uint [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ref bool indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ref bool indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ref bool indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ref bool indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, bool [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, bool [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, bool [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, bool [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, bool [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, bool [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, bool [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, bool [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ref byte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ref byte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ref byte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ref byte indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, byte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, byte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, byte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, byte [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, byte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, byte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, byte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, byte [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ref short indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ref short indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ref short indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ref short indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, short [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, short [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, short [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, short [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, short [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, short [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, short [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, short [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ref int indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ref int indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ref int indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ref int indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, int [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, int [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, int [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, int [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, int [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, int [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, int [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, int [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ref float indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ref float indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ref float indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ref float indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, float [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, float [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, float [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, float [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, float [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, float [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, float [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, float [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, ref double indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, ref double indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, ref double indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, ref double indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, double [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, double [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, double [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, double [,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, int end, int count, int type, double [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, int end, int count, int type, double [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, int start, uint end, int count, int type, double [,,] indices) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glDrawRangeElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDrawRangeElements (int mode, uint start, uint end, int count, int type, double [,,] indices) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable")]
    public  IntPtr ext__GL_VERSION_1_2__glColorTable = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, bool [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, byte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, short [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, int [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, float [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, double [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, string table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, IntPtr table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ref sbyte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, sbyte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, sbyte [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, sbyte [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ref ushort table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ushort [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ushort [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ushort [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ref uint table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, uint [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, uint [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, uint [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ref bool table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, bool [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, bool [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ref byte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, byte [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, byte [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ref short table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, short [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, short [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ref int table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, int [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, int [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ref float table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, float [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, float [,,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, ref double table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, double [,] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorTable (int target, int internalformat, int width, int format, int type, double [,,] table) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameterfv")]
    public  IntPtr ext__GL_VERSION_1_2__glColorTableParameterfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableParameterfv (int target, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableParameterfv (int target, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameteriv")]
    public  IntPtr ext__GL_VERSION_1_2__glColorTableParameteriv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableParameteriv (int target, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorTableParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorTableParameteriv (int target, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyColorTable")]
    public  IntPtr ext__GL_VERSION_1_2__glCopyColorTable = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyColorTable (int target, int internalformat, int x, int y, int width) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable")]
    public  IntPtr ext__GL_VERSION_1_2__glGetColorTable = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTable (int target, int format, int type, [Out] bool [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTable (int target, int format, int type, [Out] byte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTable (int target, int format, int type, [Out] short [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTable (int target, int format, int type, [Out] int [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTable (int target, int format, int type, [Out] float [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTable (int target, int format, int type, [Out] double [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTable (int target, int format, int type, IntPtr table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, out bool table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, out byte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, out short table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, out int table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, out float table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, out double table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, out sbyte table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, [Out] sbyte [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, out ushort table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, [Out] ushort [] table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, out uint table) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetColorTable (int target, int format, int type, [Out] uint [] table) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameterfv")]
    public  IntPtr ext__GL_VERSION_1_2__glGetColorTableParameterfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterfv (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameterfv (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameteriv")]
    public  IntPtr ext__GL_VERSION_1_2__glGetColorTableParameteriv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameteriv (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetColorTableParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetColorTableParameteriv (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable")]
    public  IntPtr ext__GL_VERSION_1_2__glColorSubTable = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glColorSubTable (int target, int start, int count, int format, int type, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyColorSubTable")]
    public  IntPtr ext__GL_VERSION_1_2__glCopyColorSubTable = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyColorSubTable"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyColorSubTable (int target, int start, int x, int y, int width) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D")]
    public  IntPtr ext__GL_VERSION_1_2__glConvolutionFilter1D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, bool [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, byte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, short [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, int [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, float [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, double [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, string image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, IntPtr image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ref sbyte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, sbyte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, sbyte [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, sbyte [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ref ushort image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ushort [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ushort [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ushort [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ref uint image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, uint [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, uint [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, uint [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ref bool image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, bool [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, bool [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ref byte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, byte [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, byte [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ref short image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, short [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, short [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ref int image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, int [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, int [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ref float image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, float [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, float [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, ref double image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, double [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter1D (int target, int internalformat, int width, int format, int type, double [,,] image) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D")]
    public  IntPtr ext__GL_VERSION_1_2__glConvolutionFilter2D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, bool [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, byte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, short [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, int [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, float [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, double [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, string image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, IntPtr image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ref sbyte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, sbyte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, sbyte [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, sbyte [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ref ushort image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ushort [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ushort [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ushort [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ref uint image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, uint [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, uint [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, uint [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ref bool image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, bool [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, bool [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ref byte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, byte [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, byte [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ref short image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, short [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, short [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ref int image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, int [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, int [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ref float image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, float [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, float [,,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, ref double image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, double [,] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glConvolutionFilter2D (int target, int internalformat, int width, int height, int format, int type, double [,,] image) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterf")]
    public  IntPtr ext__GL_VERSION_1_2__glConvolutionParameterf = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameterf (int target, int pname, float arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterfv")]
    public  IntPtr ext__GL_VERSION_1_2__glConvolutionParameterfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameterfv (int target, int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameterfv (int target, int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteri")]
    public  IntPtr ext__GL_VERSION_1_2__glConvolutionParameteri = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteri"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameteri (int target, int pname, int arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteriv")]
    public  IntPtr ext__GL_VERSION_1_2__glConvolutionParameteriv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameteriv (int target, int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glConvolutionParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glConvolutionParameteriv (int target, int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyConvolutionFilter1D")]
    public  IntPtr ext__GL_VERSION_1_2__glCopyConvolutionFilter1D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyConvolutionFilter1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyConvolutionFilter1D (int target, int internalformat, int x, int y, int width) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyConvolutionFilter2D")]
    public  IntPtr ext__GL_VERSION_1_2__glCopyConvolutionFilter2D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyConvolutionFilter2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyConvolutionFilter2D (int target, int internalformat, int x, int y, int width, int height) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter")]
    public  IntPtr ext__GL_VERSION_1_2__glGetConvolutionFilter = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilter (int target, int format, int type, [Out] bool [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilter (int target, int format, int type, [Out] byte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilter (int target, int format, int type, [Out] short [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilter (int target, int format, int type, [Out] int [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilter (int target, int format, int type, [Out] float [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilter (int target, int format, int type, [Out] double [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionFilter (int target, int format, int type, IntPtr image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, out bool image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, out byte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, out short image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, out int image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, out float image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, out double image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, out sbyte image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, [Out] sbyte [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, out ushort image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, [Out] ushort [] image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, out uint image) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionFilter"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetConvolutionFilter (int target, int format, int type, [Out] uint [] image) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameterfv")]
    public  IntPtr ext__GL_VERSION_1_2__glGetConvolutionParameterfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionParameterfv (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionParameterfv (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameteriv")]
    public  IntPtr ext__GL_VERSION_1_2__glGetConvolutionParameteriv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionParameteriv (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetConvolutionParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetConvolutionParameteriv (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram")]
    public  IntPtr ext__GL_VERSION_1_2__glGetHistogram = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogram (int target, int reset, int format, int type, [Out] bool [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, [Out] bool [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogram (int target, int reset, int format, int type, [Out] byte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, [Out] byte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogram (int target, int reset, int format, int type, [Out] short [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, [Out] short [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogram (int target, int reset, int format, int type, [Out] int [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, [Out] int [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogram (int target, int reset, int format, int type, [Out] float [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, [Out] float [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogram (int target, int reset, int format, int type, [Out] double [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, [Out] double [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogram (int target, int reset, int format, int type, IntPtr values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, IntPtr values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, out bool values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, out bool values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, out byte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, out byte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, out short values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, out short values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, out int values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, out int values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, out float values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, out float values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, out double values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, out double values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, out sbyte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, out sbyte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, [Out] sbyte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, [Out] sbyte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, out ushort values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, out ushort values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, [Out] ushort [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, [Out] ushort [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, out uint values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, out uint values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, int reset, int format, int type, [Out] uint [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetHistogram (int target, bool reset, int format, int type, [Out] uint [] values) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameterfv")]
    public  IntPtr ext__GL_VERSION_1_2__glGetHistogramParameterfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramParameterfv (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramParameterfv (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameteriv")]
    public  IntPtr ext__GL_VERSION_1_2__glGetHistogramParameteriv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramParameteriv (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetHistogramParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetHistogramParameteriv (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax")]
    public  IntPtr ext__GL_VERSION_1_2__glGetMinmax = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmax (int target, int reset, int format, int type, [Out] bool [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, [Out] bool [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmax (int target, int reset, int format, int type, [Out] byte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, [Out] byte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmax (int target, int reset, int format, int type, [Out] short [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, [Out] short [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmax (int target, int reset, int format, int type, [Out] int [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, [Out] int [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmax (int target, int reset, int format, int type, [Out] float [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, [Out] float [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmax (int target, int reset, int format, int type, [Out] double [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, [Out] double [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmax (int target, int reset, int format, int type, IntPtr values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, IntPtr values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, out bool values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, out bool values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, out byte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, out byte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, out short values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, out short values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, out int values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, out int values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, out float values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, out float values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, out double values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, out double values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, out sbyte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, out sbyte values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, [Out] sbyte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, [Out] sbyte [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, out ushort values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, out ushort values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, [Out] ushort [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, [Out] ushort [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, out uint values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, out uint values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, int reset, int format, int type, [Out] uint [] values) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetMinmax (int target, bool reset, int format, int type, [Out] uint [] values) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameterfv")]
    public  IntPtr ext__GL_VERSION_1_2__glGetMinmaxParameterfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxParameterfv (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxParameterfv (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameteriv")]
    public  IntPtr ext__GL_VERSION_1_2__glGetMinmaxParameteriv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxParameteriv (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glGetMinmaxParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetMinmaxParameteriv (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glHistogram")]
    public  IntPtr ext__GL_VERSION_1_2__glHistogram = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glHistogram (int target, int width, int internalformat, int sink) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glHistogram (int target, int width, int internalformat, bool sink) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glMinmax")]
    public  IntPtr ext__GL_VERSION_1_2__glMinmax = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMinmax (int target, int internalformat, int sink) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMinmax (int target, int internalformat, bool sink) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glResetHistogram")]
    public  IntPtr ext__GL_VERSION_1_2__glResetHistogram = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glResetHistogram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glResetHistogram (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glResetMinmax")]
    public  IntPtr ext__GL_VERSION_1_2__glResetMinmax = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glResetMinmax"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glResetMinmax (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D")]
    public  IntPtr ext__GL_VERSION_1_2__glTexImage3D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, string pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, IntPtr pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref sbyte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, sbyte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref ushort pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ushort [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref uint pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, uint [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref bool pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, bool [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref byte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, byte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref short pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, short [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref int pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref float pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, float [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, ref double pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, double [,,] pixels) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D")]
    public  IntPtr ext__GL_VERSION_1_2__glTexSubImage3D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, string pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, IntPtr pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref sbyte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, sbyte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref ushort pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ushort [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref uint pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint [] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, uint [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref bool pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, bool [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref byte pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, byte [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref short pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, short [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref int pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref float pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, float [,,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, ref double pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double [,] pixels) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_2", "glTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, double [,,] pixels) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyTexSubImage3D")]
    public  IntPtr ext__GL_VERSION_1_2__glCopyTexSubImage3D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_2", "glCopyTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCopyTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glActiveTexture")]
    public  IntPtr ext__GL_VERSION_1_3__glActiveTexture = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glActiveTexture"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glActiveTexture (int texture) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glClientActiveTexture")]
    public  IntPtr ext__GL_VERSION_1_3__glClientActiveTexture = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glClientActiveTexture"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glClientActiveTexture (int texture) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1d")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1d (int target, double s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1dv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1dv (int target, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1dv (int target, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1f")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1f (int target, float s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1fv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1fv (int target, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1fv (int target, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1i")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1i (int target, int s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1iv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1iv (int target, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1iv (int target, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1s")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1s (int target, short s) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1sv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord1sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1sv (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord1sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord1sv (int target, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2d")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2d (int target, double s, double t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2dv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2dv (int target, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2dv (int target, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2f")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2f (int target, float s, float t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2fv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2fv (int target, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2fv (int target, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2i")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2i (int target, int s, int t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2iv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2iv (int target, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2iv (int target, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2s")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2s (int target, short s, short t) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2sv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord2sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2sv (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord2sv (int target, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3d")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3d (int target, double s, double t, double r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3dv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3dv (int target, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3dv (int target, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3f")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3f (int target, float s, float t, float r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3fv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3fv (int target, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3fv (int target, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3i")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3i (int target, int s, int t, int r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3iv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3iv (int target, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3iv (int target, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3s")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3s (int target, short s, short t, short r) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3sv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord3sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3sv (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord3sv (int target, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4d")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4d (int target, double s, double t, double r, double q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4dv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4dv (int target, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4dv (int target, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4f")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4f (int target, float s, float t, float r, float q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4fv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4fv (int target, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4fv (int target, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4i")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4i (int target, int s, int t, int r, int q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4iv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4iv (int target, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4iv (int target, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4s")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4s (int target, short s, short t, short r, short q) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4sv")]
    public  IntPtr ext__GL_VERSION_1_3__glMultiTexCoord4sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4sv (int target, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultiTexCoord4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiTexCoord4sv (int target, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixf")]
    public  IntPtr ext__GL_VERSION_1_3__glLoadTransposeMatrixf = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadTransposeMatrixf (ref float m) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadTransposeMatrixf (float [] m) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixd")]
    public  IntPtr ext__GL_VERSION_1_3__glLoadTransposeMatrixd = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadTransposeMatrixd (ref double m) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glLoadTransposeMatrixd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLoadTransposeMatrixd (double [] m) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixf")]
    public  IntPtr ext__GL_VERSION_1_3__glMultTransposeMatrixf = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultTransposeMatrixf (ref float m) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultTransposeMatrixf (float [] m) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixd")]
    public  IntPtr ext__GL_VERSION_1_3__glMultTransposeMatrixd = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultTransposeMatrixd (ref double m) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glMultTransposeMatrixd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultTransposeMatrixd (double [] m) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glSampleCoverage")]
    public  IntPtr ext__GL_VERSION_1_3__glSampleCoverage = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glSampleCoverage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSampleCoverage (float value, int invert) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glSampleCoverage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSampleCoverage (float value, bool invert) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D")]
    public  IntPtr ext__GL_VERSION_1_3__glCompressedTexImage3D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D")]
    public  IntPtr ext__GL_VERSION_1_3__glCompressedTexImage2D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D")]
    public  IntPtr ext__GL_VERSION_1_3__glCompressedTexImage1D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexImage1D (int target, int level, int internalformat, int width, int border, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D")]
    public  IntPtr ext__GL_VERSION_1_3__glCompressedTexSubImage3D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage3D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D")]
    public  IntPtr ext__GL_VERSION_1_3__glCompressedTexSubImage2D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage2D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D")]
    public  IntPtr ext__GL_VERSION_1_3__glCompressedTexSubImage1D = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glCompressedTexSubImage1D"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompressedTexSubImage1D (int target, int level, int xoffset, int width, int format, int imageSize, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage")]
    public  IntPtr ext__GL_VERSION_1_3__glGetCompressedTexImage = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImage (int target, int level, [Out] bool [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImage (int target, int level, [Out] byte [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImage (int target, int level, [Out] short [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImage (int target, int level, [Out] int [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImage (int target, int level, [Out] float [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImage (int target, int level, [Out] double [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetCompressedTexImage (int target, int level, IntPtr img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, out bool img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, out byte img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, out short img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, out int img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, out float img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, out double img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, out sbyte img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, [Out] sbyte [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, out ushort img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, [Out] ushort [] img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, out uint img) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_3", "glGetCompressedTexImage"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetCompressedTexImage (int target, int level, [Out] uint [] img) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glBlendFuncSeparate")]
    public  IntPtr ext__GL_VERSION_1_4__glBlendFuncSeparate = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glBlendFuncSeparate"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBlendFuncSeparate (int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordf")]
    public  IntPtr ext__GL_VERSION_1_4__glFogCoordf = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordf (float coord) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordfv")]
    public  IntPtr ext__GL_VERSION_1_4__glFogCoordfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordfv (ref float coord) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordfv (float [] coord) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordd")]
    public  IntPtr ext__GL_VERSION_1_4__glFogCoordd = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordd"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordd (double coord) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoorddv")]
    public  IntPtr ext__GL_VERSION_1_4__glFogCoorddv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoorddv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoorddv (ref double coord) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoorddv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoorddv (double [] coord) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer")]
    public  IntPtr ext__GL_VERSION_1_4__glFogCoordPointer = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointer (int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointer (int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointer (int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointer (int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointer (int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointer (int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointer (int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glFogCoordPointer (int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glFogCoordPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glFogCoordPointer (int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays")]
    public  IntPtr ext__GL_VERSION_1_4__glMultiDrawArrays = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawArrays (int mode, out int first, out int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawArrays (int mode, [Out] int [] first, out int count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawArrays (int mode, out int first, [Out] int [] count, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawArrays"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawArrays (int mode, [Out] int [] first, [Out] int [] count, int primcount) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements")]
    public  IntPtr ext__GL_VERSION_1_4__glMultiDrawElements = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, ref int count, int type, bool [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, int [] count, int type, bool [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, ref int count, int type, byte [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, int [] count, int type, byte [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, ref int count, int type, short [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, int [] count, int type, short [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, ref int count, int type, int [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, int [] count, int type, int [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, ref int count, int type, float [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, int [] count, int type, float [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, ref int count, int type, double [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, int [] count, int type, double [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, ref int count, int type, string indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, int [] count, int type, string indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, ref int count, int type, IntPtr indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glMultiDrawElements (int mode, int [] count, int type, IntPtr indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ref sbyte indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ref sbyte indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, sbyte [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, sbyte [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, sbyte [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, sbyte [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, sbyte [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, sbyte [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ref ushort indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ref ushort indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ushort [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ushort [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ushort [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ushort [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ushort [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ushort [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ref uint indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ref uint indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, uint [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, uint [] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, uint [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, uint [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, uint [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, uint [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ref bool indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ref bool indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, bool [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, bool [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, bool [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, bool [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ref byte indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ref byte indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, byte [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, byte [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, byte [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, byte [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ref short indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ref short indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, short [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, short [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, short [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, short [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ref int indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ref int indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, int [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, int [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, int [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, int [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ref float indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ref float indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, float [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, float [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, float [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, float [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, ref double indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, ref double indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, double [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, double [,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, ref int count, int type, double [,,] indices, int primcount) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glMultiDrawElements"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glMultiDrawElements (int mode, int [] count, int type, double [,,] indices, int primcount) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterf")]
    public  IntPtr ext__GL_VERSION_1_4__glPointParameterf = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterf"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterf (int pname, float param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterfv")]
    public  IntPtr ext__GL_VERSION_1_4__glPointParameterfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfv (int pname, ref float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameterfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameterfv (int pname, float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteri")]
    public  IntPtr ext__GL_VERSION_1_4__glPointParameteri = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteri"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameteri (int pname, int param) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteriv")]
    public  IntPtr ext__GL_VERSION_1_4__glPointParameteriv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameteriv (int pname, ref int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glPointParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glPointParameteriv (int pname, int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3b = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3b (byte red, byte green, byte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3b (sbyte red, byte green, byte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3b (byte red, sbyte green, byte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3b (sbyte red, sbyte green, byte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3b (byte red, byte green, sbyte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3b (sbyte red, byte green, sbyte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3b (byte red, sbyte green, sbyte blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3b"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3b (sbyte red, sbyte green, sbyte blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3bv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3bv (ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3bv (byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bv (ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3bv (sbyte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3d")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3d (double red, double green, double blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3dv")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3dv (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3dv (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3f")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3f (float red, float green, float blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3fv")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3fv (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3fv (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3i")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3i (int red, int green, int blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3iv")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3iv (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3iv (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3s")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3s (short red, short green, short blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3sv")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3sv (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3sv (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ub")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3ub = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ub"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3ub (byte red, byte green, byte blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ubv")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3ubv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3ubv (ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3ubv (byte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3ui = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3ui (int red, int green, int blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3ui (uint red, int green, int blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3ui (int red, uint green, int blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3ui (uint red, uint green, int blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3ui (int red, int green, uint blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3ui (uint red, int green, uint blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3ui (int red, uint green, uint blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3ui"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3ui (uint red, uint green, uint blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3uiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3uiv (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3uiv (int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uiv (ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3uiv (uint [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3us = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3us (short red, short green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3us (ushort red, short green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3us (short red, ushort green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3us (ushort red, ushort green, short blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3us (short red, short green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3us (ushort red, short green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3us (short red, ushort green, ushort blue) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3us"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3us (ushort red, ushort green, ushort blue) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColor3usv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3usv (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColor3usv (short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usv (ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColor3usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColor3usv (ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer")]
    public  IntPtr ext__GL_VERSION_1_4__glSecondaryColorPointer = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointer (int size, int type, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointer (int size, int type, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointer (int size, int type, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointer (int size, int type, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointer (int size, int type, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointer (int size, int type, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointer (int size, int type, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glSecondaryColorPointer (int size, int type, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glSecondaryColorPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glSecondaryColorPointer (int size, int type, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2d")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos2d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2d (double x, double y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2dv")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos2dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2dv (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2dv (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2f")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos2f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2f (float x, float y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2fv")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos2fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2fv (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2fv (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2i")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos2i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2i (int x, int y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2iv")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos2iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2iv (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2iv (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2s")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos2s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2s (short x, short y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2sv")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos2sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2sv (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos2sv (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3d")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos3d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3d (double x, double y, double z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3dv")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos3dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3dv (ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3dv (double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3f")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos3f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3f (float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3fv")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos3fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3fv (ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3fv (float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3i")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos3i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3i (int x, int y, int z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3iv")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos3iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3iv (ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3iv (int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3s")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos3s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3s (short x, short y, short z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3sv")]
    public  IntPtr ext__GL_VERSION_1_4__glWindowPos3sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3sv (ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_4", "glWindowPos3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glWindowPos3sv (short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries")]
    public  IntPtr ext__GL_VERSION_1_5__glGenQueries = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenQueries (int n, out int ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenQueries (int n, [Out] int [] ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenQueries (int n, out uint ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenQueries"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenQueries (int n, [Out] uint [] ids) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries")]
    public  IntPtr ext__GL_VERSION_1_5__glDeleteQueries = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteQueries (int n, ref int ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteQueries (int n, int [] ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteQueries (int n, ref uint ids) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteQueries"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteQueries (int n, uint [] ids) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glIsQuery")]
    public  IntPtr ext__GL_VERSION_1_5__glIsQuery = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glIsQuery"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsQuery (int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glIsQuery"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsQuery (uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glBeginQuery")]
    public  IntPtr ext__GL_VERSION_1_5__glBeginQuery = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glBeginQuery"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBeginQuery (int target, int id) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBeginQuery"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBeginQuery (int target, uint id) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glEndQuery")]
    public  IntPtr ext__GL_VERSION_1_5__glEndQuery = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glEndQuery"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEndQuery (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryiv")]
    public  IntPtr ext__GL_VERSION_1_5__glGetQueryiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryiv (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryiv (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv")]
    public  IntPtr ext__GL_VERSION_1_5__glGetQueryObjectiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryObjectiv (int id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectiv (uint id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryObjectiv (int id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectiv (uint id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv")]
    public  IntPtr ext__GL_VERSION_1_5__glGetQueryObjectuiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryObjectuiv (int id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuiv (uint id, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetQueryObjectuiv (int id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuiv (uint id, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuiv (int id, int pname, out uint arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuiv (uint id, int pname, out uint arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuiv (int id, int pname, [Out] uint [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetQueryObjectuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetQueryObjectuiv (uint id, int pname, [Out] uint [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glBindBuffer")]
    public  IntPtr ext__GL_VERSION_1_5__glBindBuffer = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glBindBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindBuffer (int target, int buffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBindBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindBuffer (int target, uint buffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers")]
    public  IntPtr ext__GL_VERSION_1_5__glDeleteBuffers = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteBuffers (int n, ref int buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteBuffers (int n, int [] buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteBuffers (int n, ref uint buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glDeleteBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteBuffers (int n, uint [] buffers) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers")]
    public  IntPtr ext__GL_VERSION_1_5__glGenBuffers = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenBuffers (int n, out int buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGenBuffers (int n, [Out] int [] buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenBuffers (int n, out uint buffers) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGenBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGenBuffers (int n, [Out] uint [] buffers) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glIsBuffer")]
    public  IntPtr ext__GL_VERSION_1_5__glIsBuffer = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glIsBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsBuffer (int buffer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glIsBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsBuffer (uint buffer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData")]
    public  IntPtr ext__GL_VERSION_1_5__glBufferData = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferData (int target, int size, bool [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferData (int target, int size, byte [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferData (int target, int size, short [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferData (int target, int size, int [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferData (int target, int size, float [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferData (int target, int size, double [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferData (int target, int size, string data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferData (int target, int size, IntPtr data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ref sbyte data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, sbyte [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, sbyte [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, sbyte [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ref ushort data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ushort [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ushort [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ushort [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ref uint data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, uint [] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, uint [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, uint [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ref bool data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, bool [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, bool [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ref byte data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, byte [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, byte [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ref short data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, short [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, short [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ref int data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, int [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, int [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ref float data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, float [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, float [,,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, ref double data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, double [,] data, int usage) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferData (int target, int size, double [,,] data, int usage) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData")]
    public  IntPtr ext__GL_VERSION_1_5__glBufferSubData = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubData (int target, int offset, int size, bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubData (int target, int offset, int size, byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubData (int target, int offset, int size, short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubData (int target, int offset, int size, int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubData (int target, int offset, int size, float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubData (int target, int offset, int size, double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubData (int target, int offset, int size, string data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBufferSubData (int target, int offset, int size, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ref sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, sbyte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, sbyte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ref ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ushort [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ushort [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ref uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, uint [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, uint [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, uint [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ref bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, bool [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, bool [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ref byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, byte [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, byte [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ref short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, short [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, short [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ref int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, int [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, int [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ref float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, float [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, float [,,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, ref double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, double [,] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBufferSubData (int target, int offset, int size, double [,,] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData")]
    public  IntPtr ext__GL_VERSION_1_5__glGetBufferSubData = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubData (int target, int offset, int size, [Out] bool [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubData (int target, int offset, int size, [Out] byte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubData (int target, int offset, int size, [Out] short [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubData (int target, int offset, int size, [Out] int [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubData (int target, int offset, int size, [Out] float [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubData (int target, int offset, int size, [Out] double [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferSubData (int target, int offset, int size, IntPtr data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, out bool data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, out byte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, out short data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, out int data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, out float data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, out double data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, out sbyte data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, [Out] sbyte [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, out ushort data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, [Out] ushort [] data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, out uint data) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferSubData"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferSubData (int target, int offset, int size, [Out] uint [] data) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glMapBuffer")]
    public  IntPtr ext__GL_VERSION_1_5__glMapBuffer = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glMapBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  IntPtr glMapBuffer (int target, int access) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glUnmapBuffer")]
    public  IntPtr ext__GL_VERSION_1_5__glUnmapBuffer = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glUnmapBuffer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glUnmapBuffer (int target) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferParameteriv")]
    public  IntPtr ext__GL_VERSION_1_5__glGetBufferParameteriv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferParameteriv (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferParameteriv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferParameteriv (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv")]
    public  IntPtr ext__GL_VERSION_1_5__glGetBufferPointerv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointerv (int target, int pname, [Out] bool [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointerv (int target, int pname, [Out] byte [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointerv (int target, int pname, [Out] short [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointerv (int target, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointerv (int target, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointerv (int target, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetBufferPointerv (int target, int pname, IntPtr arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, out bool arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, out byte arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, out short arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, out sbyte arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, [Out] sbyte [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, out ushort arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, [Out] ushort [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, out uint arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_1_5", "glGetBufferPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetBufferPointerv (int target, int pname, [Out] uint [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glBlendEquationSeparate")]
    public  IntPtr ext__GL_VERSION_2_0__glBlendEquationSeparate = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glBlendEquationSeparate"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBlendEquationSeparate (int modeRGB, int modeAlpha) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDrawBuffers")]
    public  IntPtr ext__GL_VERSION_2_0__glDrawBuffers = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDrawBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawBuffers (int n, ref int bufs) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glDrawBuffers"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDrawBuffers (int n, int [] bufs) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilOpSeparate")]
    public  IntPtr ext__GL_VERSION_2_0__glStencilOpSeparate = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilOpSeparate"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStencilOpSeparate (int face, int sfail, int dpfail, int dppass) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilFuncSeparate")]
    public  IntPtr ext__GL_VERSION_2_0__glStencilFuncSeparate = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilFuncSeparate"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStencilFuncSeparate (int frontfunc, int backfunc, int arg_ref, int mask) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilFuncSeparate"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStencilFuncSeparate (int frontfunc, int backfunc, int arg_ref, uint mask) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilMaskSeparate")]
    public  IntPtr ext__GL_VERSION_2_0__glStencilMaskSeparate = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilMaskSeparate"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glStencilMaskSeparate (int face, int mask) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glStencilMaskSeparate"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glStencilMaskSeparate (int face, uint mask) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader")]
    public  IntPtr ext__GL_VERSION_2_0__glAttachShader = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glAttachShader (int program, int shader) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glAttachShader (uint program, int shader) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glAttachShader (int program, uint shader) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glAttachShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glAttachShader (uint program, uint shader) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation")]
    public  IntPtr ext__GL_VERSION_2_0__glBindAttribLocation = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindAttribLocation (int program, int index, ref string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindAttribLocation (uint program, int index, ref string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindAttribLocation (int program, uint index, ref string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindAttribLocation (uint program, uint index, ref string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glBindAttribLocation (int program, int index, string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindAttribLocation (uint program, int index, string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindAttribLocation (int program, uint index, string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glBindAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glBindAttribLocation (uint program, uint index, string [] name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glCompileShader")]
    public  IntPtr ext__GL_VERSION_2_0__glCompileShader = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glCompileShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glCompileShader (int shader) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glCompileShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glCompileShader (uint shader) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glCreateProgram")]
    public  IntPtr ext__GL_VERSION_2_0__glCreateProgram = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glCreateProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glCreateProgram () {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glCreateShader")]
    public  IntPtr ext__GL_VERSION_2_0__glCreateShader = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glCreateShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glCreateShader (int type) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteProgram")]
    public  IntPtr ext__GL_VERSION_2_0__glDeleteProgram = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteProgram (int program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteProgram (uint program) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteShader")]
    public  IntPtr ext__GL_VERSION_2_0__glDeleteShader = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDeleteShader (int shader) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glDeleteShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDeleteShader (uint shader) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader")]
    public  IntPtr ext__GL_VERSION_2_0__glDetachShader = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDetachShader (int program, int shader) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDetachShader (uint program, int shader) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDetachShader (int program, uint shader) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glDetachShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDetachShader (uint program, uint shader) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDisableVertexAttribArray")]
    public  IntPtr ext__GL_VERSION_2_0__glDisableVertexAttribArray = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glDisableVertexAttribArray"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glDisableVertexAttribArray (int index) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glDisableVertexAttribArray"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glDisableVertexAttribArray (uint index) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glEnableVertexAttribArray")]
    public  IntPtr ext__GL_VERSION_2_0__glEnableVertexAttribArray = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glEnableVertexAttribArray"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glEnableVertexAttribArray (int index) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glEnableVertexAttribArray"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glEnableVertexAttribArray (uint index) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib")]
    public  IntPtr ext__GL_VERSION_2_0__glGetActiveAttrib = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, out int length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, out int length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, out int length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, out int length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, [Out] int [] length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, [Out] int [] length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, [Out] int [] length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, [Out] int [] length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, out int length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, out int length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, out int length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, out int length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, out int length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, out int length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, out int length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, out int length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, out int length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, out int length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, out int length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, out int length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, [Out] int [] length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, [Out] int [] length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, [Out] int [] length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, [Out] int [] length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, out int length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, out int length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, out int length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, out int length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, out int length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, out int length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, out int length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, out int length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveAttrib (int program, int index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, int index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (int program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveAttrib"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveAttrib (uint program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform")]
    public  IntPtr ext__GL_VERSION_2_0__glGetActiveUniform = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, out int length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, out int length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, out int length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, out int length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, [Out] int [] length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, [Out] int [] length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, [Out] int [] length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, [Out] int [] length, out int size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, out int length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, out int length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, out int length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, out int length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, out int length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, out int length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, out int length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, out int length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, out string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, out int length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, out int length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, out int length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, out int length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, [Out] int [] length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, [Out] int [] length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, [Out] int [] length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, [Out] int [] length, out int size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, out int length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, out int length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, out int length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, out int length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, out int type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, out int length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, out int length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, out int length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, out int length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, [Out] int [] length, out int size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, out int length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetActiveUniform (int program, int index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, int index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (int program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetActiveUniform"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetActiveUniform (uint program, uint index, int bufSize, [Out] int [] length, [Out] int [] size, [Out] int [] type, [Out] string [] name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders")]
    public  IntPtr ext__GL_VERSION_2_0__glGetAttachedShaders = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetAttachedShaders (int program, int maxCount, out int count, out int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (uint program, int maxCount, out int count, out int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetAttachedShaders (int program, int maxCount, [Out] int [] count, out int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (uint program, int maxCount, [Out] int [] count, out int obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetAttachedShaders (int program, int maxCount, out int count, [Out] int [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (uint program, int maxCount, out int count, [Out] int [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetAttachedShaders (int program, int maxCount, [Out] int [] count, [Out] int [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (uint program, int maxCount, [Out] int [] count, [Out] int [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (int program, int maxCount, out int count, out uint obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (uint program, int maxCount, out int count, out uint obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (int program, int maxCount, [Out] int [] count, out uint obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (uint program, int maxCount, [Out] int [] count, out uint obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (int program, int maxCount, out int count, [Out] uint [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (uint program, int maxCount, out int count, [Out] uint [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (int program, int maxCount, [Out] int [] count, [Out] uint [] obj) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttachedShaders"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetAttachedShaders (uint program, int maxCount, [Out] int [] count, [Out] uint [] obj) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation")]
    public  IntPtr ext__GL_VERSION_2_0__glGetAttribLocation = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGetAttribLocation (int program, ref string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glGetAttribLocation (uint program, ref string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGetAttribLocation (int program, string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetAttribLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glGetAttribLocation (uint program, string [] name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv")]
    public  IntPtr ext__GL_VERSION_2_0__glGetProgramiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramiv (int program, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramiv (uint program, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramiv (int program, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramiv (uint program, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog")]
    public  IntPtr ext__GL_VERSION_2_0__glGetProgramInfoLog = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramInfoLog (int program, int bufSize, out int length, out string infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramInfoLog (uint program, int bufSize, out int length, out string infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramInfoLog (int program, int bufSize, [Out] int [] length, out string infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramInfoLog (uint program, int bufSize, [Out] int [] length, out string infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramInfoLog (int program, int bufSize, out int length, [Out] string [] infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramInfoLog (uint program, int bufSize, out int length, [Out] string [] infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetProgramInfoLog (int program, int bufSize, [Out] int [] length, [Out] string [] infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetProgramInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetProgramInfoLog (uint program, int bufSize, [Out] int [] length, [Out] string [] infoLog) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv")]
    public  IntPtr ext__GL_VERSION_2_0__glGetShaderiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderiv (int shader, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderiv (uint shader, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderiv (int shader, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderiv (uint shader, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog")]
    public  IntPtr ext__GL_VERSION_2_0__glGetShaderInfoLog = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderInfoLog (int shader, int bufSize, out int length, out string infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderInfoLog (uint shader, int bufSize, out int length, out string infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderInfoLog (int shader, int bufSize, [Out] int [] length, out string infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderInfoLog (uint shader, int bufSize, [Out] int [] length, out string infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderInfoLog (int shader, int bufSize, out int length, [Out] string [] infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderInfoLog (uint shader, int bufSize, out int length, [Out] string [] infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderInfoLog (int shader, int bufSize, [Out] int [] length, [Out] string [] infoLog) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderInfoLog"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderInfoLog (uint shader, int bufSize, [Out] int [] length, [Out] string [] infoLog) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource")]
    public  IntPtr ext__GL_VERSION_2_0__glGetShaderSource = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderSource (int shader, int bufSize, out int length, out string source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderSource (uint shader, int bufSize, out int length, out string source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderSource (int shader, int bufSize, [Out] int [] length, out string source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderSource (uint shader, int bufSize, [Out] int [] length, out string source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderSource (int shader, int bufSize, out int length, [Out] string [] source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderSource (uint shader, int bufSize, out int length, [Out] string [] source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetShaderSource (int shader, int bufSize, [Out] int [] length, [Out] string [] source) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetShaderSource (uint shader, int bufSize, [Out] int [] length, [Out] string [] source) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation")]
    public  IntPtr ext__GL_VERSION_2_0__glGetUniformLocation = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGetUniformLocation (int program, ref string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glGetUniformLocation (uint program, ref string name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glGetUniformLocation (int program, string [] name) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformLocation"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glGetUniformLocation (uint program, string [] name) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv")]
    public  IntPtr ext__GL_VERSION_2_0__glGetUniformfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetUniformfv (int program, int location, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetUniformfv (uint program, int location, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetUniformfv (int program, int location, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetUniformfv (uint program, int location, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv")]
    public  IntPtr ext__GL_VERSION_2_0__glGetUniformiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetUniformiv (int program, int location, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetUniformiv (uint program, int location, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetUniformiv (int program, int location, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetUniformiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetUniformiv (uint program, int location, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv")]
    public  IntPtr ext__GL_VERSION_2_0__glGetVertexAttribdv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribdv (int index, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribdv (uint index, int pname, out double arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribdv (int index, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribdv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribdv (uint index, int pname, [Out] double [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv")]
    public  IntPtr ext__GL_VERSION_2_0__glGetVertexAttribfv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribfv (int index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribfv (uint index, int pname, out float arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribfv (int index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribfv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribfv (uint index, int pname, [Out] float [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv")]
    public  IntPtr ext__GL_VERSION_2_0__glGetVertexAttribiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribiv (int index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribiv (uint index, int pname, out int arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribiv (int index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribiv (uint index, int pname, [Out] int [] arg_params) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv")]
    public  IntPtr ext__GL_VERSION_2_0__glGetVertexAttribPointerv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointerv (int index, int pname, [Out] bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, [Out] bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointerv (int index, int pname, [Out] byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, [Out] byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointerv (int index, int pname, [Out] short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, [Out] short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointerv (int index, int pname, [Out] int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, [Out] int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointerv (int index, int pname, [Out] float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, [Out] float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointerv (int index, int pname, [Out] double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, [Out] double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glGetVertexAttribPointerv (int index, int pname, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, out bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, out bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, out byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, out byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, out short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, out short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, out int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, out int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, out float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, out float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, out double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, out double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, out sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, out sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, [Out] sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, [Out] sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, out ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, out ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, [Out] ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, [Out] ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, out uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, out uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (int index, int pname, [Out] uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glGetVertexAttribPointerv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glGetVertexAttribPointerv (uint index, int pname, [Out] uint [] pointer) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glIsProgram")]
    public  IntPtr ext__GL_VERSION_2_0__glIsProgram = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glIsProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsProgram (int program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glIsProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsProgram (uint program) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glIsShader")]
    public  IntPtr ext__GL_VERSION_2_0__glIsShader = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glIsShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  int glIsShader (int shader) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glIsShader"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  int glIsShader (uint shader) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glLinkProgram")]
    public  IntPtr ext__GL_VERSION_2_0__glLinkProgram = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glLinkProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glLinkProgram (int program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glLinkProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glLinkProgram (uint program) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource")]
    public  IntPtr ext__GL_VERSION_2_0__glShaderSource = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderSource (int shader, int count, ref string[] arg_string, ref int length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderSource (uint shader, int count, ref string[] arg_string, ref int length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderSource (int shader, int count, string[] [] arg_string, ref int length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderSource (uint shader, int count, string[] [] arg_string, ref int length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderSource (int shader, int count, ref string[] arg_string, int [] length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderSource (uint shader, int count, ref string[] arg_string, int [] length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glShaderSource (int shader, int count, string[] [] arg_string, int [] length) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glShaderSource"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glShaderSource (uint shader, int count, string[] [] arg_string, int [] length) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUseProgram")]
    public  IntPtr ext__GL_VERSION_2_0__glUseProgram = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUseProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUseProgram (int program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUseProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUseProgram (uint program) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1f")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform1f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1f (int location, float v0) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2f")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform2f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2f (int location, float v0, float v1) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3f")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform3f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3f (int location, float v0, float v1, float v2) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4f")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform4f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4f (int location, float v0, float v1, float v2, float v3) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1i")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform1i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1i (int location, int v0) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2i")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform2i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2i (int location, int v0, int v1) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3i")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform3i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3i (int location, int v0, int v1, int v2) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4i")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform4i = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4i"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4i (int location, int v0, int v1, int v2, int v3) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1fv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform1fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1fv (int location, int count, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1fv (int location, int count, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2fv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform2fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2fv (int location, int count, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2fv (int location, int count, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3fv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform3fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3fv (int location, int count, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3fv (int location, int count, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4fv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform4fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4fv (int location, int count, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4fv (int location, int count, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1iv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform1iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1iv (int location, int count, ref int value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform1iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform1iv (int location, int count, int [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2iv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform2iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2iv (int location, int count, ref int value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform2iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform2iv (int location, int count, int [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3iv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform3iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3iv (int location, int count, ref int value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform3iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform3iv (int location, int count, int [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4iv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniform4iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4iv (int location, int count, ref int value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniform4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniform4iv (int location, int count, int [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniformMatrix2fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix2fv (int location, int count, int transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix2fv (int location, int count, bool transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix2fv (int location, int count, int transpose, float [] value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix2fv (int location, int count, bool transpose, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniformMatrix3fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix3fv (int location, int count, int transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix3fv (int location, int count, bool transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix3fv (int location, int count, int transpose, float [] value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix3fv (int location, int count, bool transpose, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv")]
    public  IntPtr ext__GL_VERSION_2_0__glUniformMatrix4fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix4fv (int location, int count, int transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix4fv (int location, int count, bool transpose, ref float value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glUniformMatrix4fv (int location, int count, int transpose, float [] value) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glUniformMatrix4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glUniformMatrix4fv (int location, int count, bool transpose, float [] value) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glValidateProgram")]
    public  IntPtr ext__GL_VERSION_2_0__glValidateProgram = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glValidateProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glValidateProgram (int program) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glValidateProgram"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glValidateProgram (uint program) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1d")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib1d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1d (int index, double x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1d (uint index, double x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib1dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1dv (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1dv (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1dv (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1dv (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1f")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib1f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1f (int index, float x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1f (uint index, float x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib1fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1fv (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1fv (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1fv (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1fv (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1s")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib1s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1s (int index, short x) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1s (uint index, short x) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib1sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1sv (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1sv (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib1sv (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib1sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib1sv (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2d")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib2d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2d (int index, double x, double y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2d (uint index, double x, double y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib2dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2dv (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2dv (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2dv (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2dv (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2f")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib2f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2f (int index, float x, float y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2f (uint index, float x, float y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib2fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2fv (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2fv (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2fv (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2fv (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2s")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib2s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2s (int index, short x, short y) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2s (uint index, short x, short y) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib2sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2sv (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2sv (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib2sv (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib2sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib2sv (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3d")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib3d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3d (int index, double x, double y, double z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3d (uint index, double x, double y, double z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib3dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3dv (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3dv (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3dv (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3dv (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3f")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib3f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3f (int index, float x, float y, float z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3f (uint index, float x, float y, float z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib3fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3fv (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3fv (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3fv (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3fv (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3s")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib3s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3s (int index, short x, short y, short z) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3s (uint index, short x, short y, short z) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib3sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3sv (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3sv (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib3sv (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib3sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib3sv (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nbv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nbv (int index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nbv (uint index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nbv (int index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nbv (uint index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nbv (int index, ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nbv (uint index, ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nbv (int index, sbyte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nbv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nbv (uint index, sbyte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Niv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Niv (int index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Niv (uint index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Niv (int index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Niv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Niv (uint index, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nsv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nsv (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nsv (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nsv (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nsv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nsv (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nub")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nub = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nub"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nub (int index, byte x, byte y, byte z, byte w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nub"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nub (uint index, byte x, byte y, byte z, byte w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nubv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nubv (int index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nubv (uint index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nubv (int index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nubv (uint index, byte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nuiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nuiv (int index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nuiv (uint index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nuiv (int index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nuiv (uint index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nuiv (int index, ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nuiv (uint index, ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nuiv (int index, uint [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nuiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nuiv (uint index, uint [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4Nusv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nusv (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nusv (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4Nusv (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nusv (uint index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nusv (int index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nusv (uint index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nusv (int index, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4Nusv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4Nusv (uint index, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4bv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4bv (int index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bv (uint index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4bv (int index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bv (uint index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bv (int index, ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bv (uint index, ref sbyte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bv (int index, sbyte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4bv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4bv (uint index, sbyte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4d")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4d = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4d (int index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4d"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4d (uint index, double x, double y, double z, double w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4dv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4dv (int index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4dv (uint index, ref double v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4dv (int index, double [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4dv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4dv (uint index, double [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4f")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4f = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4f (int index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4f"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4f (uint index, float x, float y, float z, float w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4fv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4fv (int index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4fv (uint index, ref float v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4fv (int index, float [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4fv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4fv (uint index, float [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4iv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4iv (int index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4iv (uint index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4iv (int index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4iv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4iv (uint index, int [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4s")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4s = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4s (int index, short x, short y, short z, short w) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4s"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4s (uint index, short x, short y, short z, short w) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4sv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4sv (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4sv (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4sv (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4sv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4sv (uint index, short [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4ubv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4ubv (int index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4ubv (uint index, ref byte v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4ubv (int index, byte [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4ubv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4ubv (uint index, byte [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4uiv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4uiv (int index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uiv (uint index, ref int v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4uiv (int index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uiv (uint index, int [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uiv (int index, ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uiv (uint index, ref uint v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uiv (int index, uint [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4uiv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4uiv (uint index, uint [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttrib4usv = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4usv (int index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usv (uint index, ref short v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttrib4usv (int index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usv (uint index, short [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usv (int index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usv (uint index, ref ushort v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usv (int index, ushort [] v) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttrib4usv"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttrib4usv (uint index, ushort [] v) {
      throw new NotImplementedException();
    }

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer")]
    public  IntPtr ext__GL_VERSION_2_0__glVertexAttribPointer = IntPtr.Zero;

    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, bool [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, byte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, short [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, int [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, float [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, double [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, string pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(true)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, IntPtr pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ref sbyte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, sbyte [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, sbyte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, sbyte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ref ushort pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ushort [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ushort [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ushort [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ref uint pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, uint [] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, uint [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, uint [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ref bool pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, bool [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, bool [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ref byte pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, byte [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, byte [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ref short pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, short [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, short [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ref int pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, int [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, int [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ref float pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, float [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, float [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, ref double pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, double [,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, int normalized, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, int normalized, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (int index, int size, int type, bool normalized, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }
    [OpenGLExtensionImport("GL_VERSION_2_0", "glVertexAttribPointer"), SuppressUnmanagedCodeSecurity, CLSCompliantAttribute(false)]
    public  void glVertexAttribPointer (uint index, int size, int type, bool normalized, int stride, double [,,] pointer) {
      throw new NotImplementedException();
    }

}

}
